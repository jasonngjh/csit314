<p>I am writing a piece of code that uploads something to AWS S3 asynchronously. In doing so, I have been following <a href="https://www.codingforentrepreneurs.com/blog/large-file-uploads-with-amazon-s3-django/" rel="nofollow noreferrer">this</a> tutorial. </p>

<p>Everything seems to be fine; however, when it comes to the actual upload, I get an HTTP 400 back from AWS.</p>

<pre><code>&lt;Error&gt;&lt;Code&gt;InvalidRequest&lt;/Code&gt;&lt;Message&gt;The authorization mechanism you have provided is not supported. Please use AWS4-HMAC-SHA256.&lt;/Message&gt;&lt;RequestId&gt;E1CB0551A45B4B3D&lt;/RequestId&gt;&lt;HostId&gt;H8xQkyTimhnb+Z3cIKKB1EvCwDp+Ka+Rt+JR4YISR2hrj7Qmmb2BLHc0UXpoC+Gz1n7wwt8aYkg=&lt;/HostId&gt;&lt;/Error&gt;
</code></pre>

<p>The initial hunch was that this had something to do with with the signature version, so I explicitly set <code>AWS_S3_SIGNATURE_VERSION = "s3v4"</code> in <code>settings.py</code> of the Django project for Boto3 and Django-Storages to use. This didn't help. </p>

<p>Hence, it seems that there is something wrong with the way the policy is formed before it is sent to AWS. Is this correct? What goes wrong here?</p>

<p>P.S. There are a couple of other people in the commends of the tutorial who report the same issue and are unable to resolve it.</p>

<p><code>models.py</code></p>

<pre><code>class FileItem(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, default=1, null = True, on_delete = models.SET_NULL)
    name = models.CharField(max_length=120, null=True, blank=True)
    path  = models.TextField(blank=True, null=True)
    size  = models.BigIntegerField(default=0)
    file_type = models.CharField(max_length=120, null=True, blank=True)
    timestamp = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    uploaded = models.BooleanField(default=False)
    active = models.BooleanField(default=True)

    @property
    def title(self):
        return str(self.name)
</code></pre>

<p><code>urls.py</code></p>

<pre><code>urlpatterns = [
    path('uploader/', TemplateView.as_view(template_name='celery_test/test-uploader.html'), name='upload-home'),
    path('api/files/policy/', views.FilePolicyAPI.as_view(), name='upload-policy'),
    path('api/files/complete/', views.FileUploadCompleteHandler.as_view(), name='upload-complete'),
]
</code></pre>

<p><code>views.py</code>:</p>

<pre><code>import base64
import hashlib
import hmac
import os
import time
from rest_framework import permissions, status, authentication
from rest_framework.response import Response
from rest_framework.views import APIView

from django.conf import settings
from .models import FileItem

class FilePolicyAPI(APIView):
    """
    This view is to get the AWS Upload Policy for our s3 bucket.
    What we do here is first create a FileItem object instance in our
    Django backend. This is to include the FileItem instance in the path
    we will use within our bucket as you'll see below.
    """
    permission_classes = (permissions.IsAuthenticated, permissions.IsAdminUser)
    authentication_classes = (authentication.SessionAuthentication, authentication.TokenAuthentication, )

    def post(self, request, *args, **kwargs):
        """
        The initial post request includes the filename
        and auth credentials. In our case, we'll use
        Session Authentication but any auth should work.
        """
        filename_req = request.data.get('filename')
        print(filename_req)
        if not filename_req:
                return Response({"message": "A filename is required"}, status=status.HTTP_400_BAD_REQUEST)
        policy_expires = int(time.time()+5000)
        user = request.user
        username_str = str(request.user)
        print(user)
        print(username_str)
        """
        Below we create the Django object. We'll use this
        in our upload path to AWS. 

        Example:
        To-be-uploaded file's name: Some Random File.mp4
        Eventual Path on S3: &lt;bucket&gt;/username/2312/2312.mp4
        """
        file_obj = FileItem.objects.create(user=user, name=filename_req)
        file_obj_id = file_obj.id
        upload_start_path = "videos/{file_obj_id}/".format(
#                    username = username_str,
                    file_obj_id=file_obj_id
            )       
        _, file_extension = os.path.splitext(filename_req)
        filename_final = "{file_obj_id}{file_extension}".format(
                    file_obj_id= file_obj_id,
                    file_extension=file_extension

                )
        """
        Eventual file_upload_path includes the renamed file to the 
        Django-stored FileItem instance ID. Renaming the file is 
        done to prevent issues with user generated formatted names.
        """
        final_upload_path = "{upload_start_path}{filename_final}".format(
                                 upload_start_path=upload_start_path,
                                 filename_final=filename_final,
                            )
        if filename_req and file_extension:
            """
            Save the eventual path to the Django-stored FileItem instance
            """
            file_obj.path = final_upload_path
            file_obj.save()

        policy_document_context = {
            "expire": policy_expires,
            "bucket_name": settings.AWS_STORAGE_BUCKET_NAME,
            "key_name": "",
            "acl_name": "private",
            "content_name": "",
            "content_length": 524288000,
            "upload_start_path": upload_start_path,

            }
        policy_document = """
        {"expiration": "2021-01-01T00:00:00Z",
          "conditions": [ 
            {"bucket": "%(bucket_name)s"}, 
            ["starts-with", "$key", "%(upload_start_path)s"],
            {"acl": "%(acl_name)s"},

            ["starts-with", "$Content-Type", "%(content_name)s"],
            ["starts-with", "$filename", ""],
            ["content-length-range", 0, %(content_length)d]
          ]
        }
        """ % policy_document_context
        aws_secret = str.encode(settings.AWS_SECRET_ACCESS_KEY)
        print("Policy: ")
        print(policy_document)
        policy_document_str_encoded = str.encode(policy_document.replace(" ", ""))
        url = 'https://{bucket}.s3.{region}.amazonaws.com/'.format(
                        bucket=settings.AWS_STORAGE_BUCKET_NAME,  
                        region=settings.AWS_S3_REGION_NAME
                        )
        policy = base64.b64encode(policy_document_str_encoded)
        signature = base64.b64encode(hmac.new(aws_secret, policy, hashlib.sha1).digest())
        data = {
            "policy": policy,
            "signature": signature,
            "key": settings.AWS_ACCESS_KEY_ID,
            "file_bucket_path": upload_start_path,
            "file_id": file_obj_id,
            "filename": filename_final,
            "url": url,
            "username": username_str,
        }
        return Response(data, status=status.HTTP_200_OK)

class FileUploadCompleteHandler(APIView):
    permission_classes = [permissions.IsAuthenticated]
    authentication_classes = [authentication.SessionAuthentication]

    def post(self, request, *args, **kwargs):
        file_id = request.POST.get('file')
        size = request.POST.get('fileSize')
        data = {}
        type_ = request.POST.get('fileType')
        if file_id:
            obj = FileItem.objects.get(id=int(file_id))
            obj.size = int(size)
            obj.uploaded = True
            obj.type = type_
            obj.save()
            data['id'] = obj.id
            data['saved'] = True
        return Response(data, status=status.HTTP_200_OK)
</code></pre>

<p>Here is the AJAX code:</p>

<pre><code>{% extends "base.html" %}
{% block content %}
&lt;div class='row'&gt;
    &lt;div class='col-6 offset-3'&gt;
        &lt;div class='item-loading-queue'&gt;

        &lt;/div&gt;
        &lt;form class='cfeproj-upload-form'&gt;
            &lt;input class='cfeproj-upload-file form-control' type='file' accept='audio/*,video/*,image/*' multiple='multiple' /&gt;
        &lt;/form&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
 $(document).ready(function(){
     // setup session cookie data. This is Django-related
     function getCookie(name) {
         var cookieValue = null;
         if (document.cookie &amp;&amp; document.cookie !== '') {
             var cookies = document.cookie.split(';');
             for (var i = 0; i &lt; cookies.length; i++) {
                 var cookie = jQuery.trim(cookies[i]);
                 // Does this cookie string begin with the name we want?
                 if (cookie.substring(0, name.length + 1) === (name + '=')) {
                     cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                     break;
                 }
             }
         }
         return cookieValue;
     }
     var csrftoken = getCookie('csrftoken');
     function csrfSafeMethod(method) {
         // these HTTP methods do not require CSRF protection
         return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
     }
     $.ajaxSetup({
         beforeSend: function(xhr, settings) {
             if (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) {
                 xhr.setRequestHeader("X-CSRFToken", csrftoken);
             }
         }
     });
     // end session cookie data setup. 



     // declare an empty array for potential uploaded files
     var fileItemList = []

     // auto-upload on file input change.
     $(document).on('change','.cfeproj-upload-file', function(event){
     var selectedFiles = $(this).prop('files');
     formItem = $(this).parent()
     $.each(selectedFiles, function(index, item){
             var myFile = verifyFileIsImageMovieAudio(item)
             if (myFile){
         uploadFile(myFile)
             } else {
         // alert("Some files are invalid uploads.")
             }
     })
     $(this).val('');

     })



     function verifyFileIsImageMovieAudio(file){
     // verifies the file extension is one we support.
     var extension = file.name.split('.').pop().toLowerCase(); //file.substr( (file.lastIndexOf('.') +1) );
     switch(extension) {
             case 'jpg':
             case 'png':
             case 'gif':
             case 'jpeg':
         return file  
             case 'mov':
             case 'mp4':
             case 'mpeg4':
             case 'avi':
         return file
             case 'mp3':
         return file
             default:
         notAllowedFiles.push(file)
         return null
     }
     };

     function constructFormPolicyData(policyData, fileItem) {
     var contentType = fileItem.type != '' ? fileItem.type : 'application/octet-stream'
     var url = policyData.url
     var filename = policyData.filename
     var repsonseUser = policyData.user
     // var keyPath = 'www/' + repsonseUser + '/' + filename
     var keyPath = policyData.file_bucket_path
     var fd = new FormData()
     fd.append('key', keyPath + filename);
     fd.append('acl','private');
     fd.append('Content-Type', contentType);
     fd.append("AWSAccessKeyId", policyData.key)
     fd.append('Policy', policyData.policy);
     fd.append('filename', filename);
     fd.append('Signature', policyData.signature);
     fd.append('file', fileItem);
     return fd
     }

     function fileUploadComplete(fileItem, policyData){
     data = {
             uploaded: true,
             fileSize: fileItem.size,
             file: policyData.file_id,

     }
     $.ajax({
             method:"POST",
             data: data,
             url: "/en/celery/api/files/complete/",
             success: function(data){
         displayItems(fileItemList)
             },
             error: function(jqXHR, textStatus, errorThrown){ 
         alert("An error occured (/api/files/complete/), please refresh the page.")
             }
     })
     }

     function displayItems(fileItemList){
     var itemList = $('.item-loading-queue')
     itemList.html("")
     $.each(fileItemList, function(index, obj){
             var item = obj.file
             var id_ = obj.id
             var order_ = obj.order
             var html_ = "&lt;div class=\"progress\"&gt;" + 
             "&lt;div class=\"progress-bar\" role=\"progressbar\" style='width:" + item.progress + "%' aria-valuenow='" + item.progress + "' aria-valuemin=\"0\" aria-valuemax=\"100\"&gt;&lt;/div&gt;&lt;/div&gt;"
             itemList.append("&lt;div&gt;" + order_ + ") " + item.name + "&lt;a href='#' class='srvup-item-upload float-right' data-id='" + id_ + ")'&gt;X&lt;/a&gt; &lt;br/&gt;" + html_ + "&lt;/div&gt;&lt;hr/&gt;")

     })
     }


     function uploadFile(fileItem){
         var policyData;
         var newLoadingItem;
         // get AWS upload policy for each file uploaded through the POST method
         // Remember we're creating an instance in the backend so using POST is
         // needed.
         $.ajax({
             method:"POST",
             data: {
                 filename: fileItem.name
             },
             url: "/en/celery/api/files/policy/",
             success: function(data){
                 policyData = data
             },
             error: function(data){
                 alert("An error occured (/api/files/policy/), please try again later")
             }
         }).done(function(){
             // construct the needed data using the policy for AWS
             var fd = constructFormPolicyData(policyData, fileItem)

             // use XML http Request to Send to AWS. 
             var xhr = new XMLHttpRequest()

             // construct callback for when uploading starts
             xhr.upload.onloadstart = function(event){
                 var inLoadingIndex = $.inArray(fileItem, fileItemList)
                 if (inLoadingIndex == -1){
                     // Item is not loading, add to inProgress queue
                     newLoadingItem = {
                         file: fileItem,
                         id: policyData.file_id,
                         order: fileItemList.length + 1
                     }
                     fileItemList.push(newLoadingItem)
                 }
                 fileItem.xhr = xhr
             }

             // Monitor upload progress and attach to fileItem.
             xhr.upload.addEventListener("progress", function(event){
                 if (event.lengthComputable) {
                     var progress = Math.round(event.loaded / event.total * 100);
                     fileItem.progress = progress
                     displayItems(fileItemList)
                 }
             })

             xhr.upload.addEventListener("load", function(event){
                 console.log("Complete")
                 // handle FileItem Upload being complete.
                 // fileUploadComplete(fileItem, policyData)

             })

         xhr.upload.addEventListener("load", function(event){
                 console.log("Complete")
                 // handle FileItem Upload being complete.
                 fileUploadComplete(fileItem, policyData)

         })
         console.log(policyData.url);
         console.log(policyData);
         console.log(fd);
             xhr.open('POST', policyData.url , true);
             xhr.send(fd);
         })
     }});
&lt;/script&gt;
{% endblock content %}
</code></pre>

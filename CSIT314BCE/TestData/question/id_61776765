<p>I had an existing project without Gradle and needed to add <code>com.google.code.gson:gson:+</code> library to work with JSON objects. To begin with I ran either <code>gradle init</code> or <code>gradle build</code>, I'm not sure. This caused my java classes with a <code>main()</code> not to run as the source path was wrong/changed. I have changed the structure following advice to at least get the classes to compile and run, but I still have this warning in run configurations "Warning: Class 'Main' not found in module 'src'" ;</p>

<p><a href="https://i.stack.imgur.com/fTveb.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/fTveb.png" alt="enter image description here"></a></p>

<p>If I set <code>Use classpath of module</code> to <code>src.main</code>, the warning goes away but when I run <code>Main.main()</code> Gradle seems to execute Gradle tasks, like this - this will run indefinitely;</p>

<p><a href="https://i.stack.imgur.com/AeiYu.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/AeiYu.png" alt="enter image description here"></a></p>

<p>Here is my project structure;</p>

<p><a href="https://i.stack.imgur.com/SRNcu.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/SRNcu.png" alt="enter image description here"></a></p>

<p>This is my <code>build.gradle</code> file;</p>

<pre><code> /*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    // idea plugin? // I added this to original build.gradle file
    id 'idea'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    google()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    // For use with JSONUtil class // I added this to original build.gradle file
    compile 'com.google.code.gson:gson:+'
}

application {
    // Define the main class for the application.
    mainClassName = 'java.Main' // changed to 'Main' and I can `gradle run` seems to actually run Main.java
}
</code></pre>

<p>I have imported <code>com.google.gson.JsonObject</code> and <code>com.google.gson.JsonParser</code> from <code>com.google.gson:gson:2.8.6</code> library, with no code inspection warnings, i.e available at compile time. If I run my code with a <code>JsonObject jsonObject = new JsonObject</code> I get the error;</p>

<pre><code>Exception in thread "main" java.lang.NoClassDefFoundError: com/google/gson/JsonParser
    at HttpUtils.getAccessToken(HttpUtils.java:80)
    at Main.auth(Main.java:75)
    at Main.play(Main.java:36)
    at Main.main(Main.java:17)
Caused by: java.lang.ClassNotFoundException: com.google.gson.JsonParser
    at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:602)
    at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
    at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
    ... 4 more
</code></pre>

<p>Line 80 of <code>HttpUtils.java</code>;</p>

<pre><code>JsonObject jsonResponse = JsonParser.parseString(response.body()).getAsJsonObject(); // todo: status 200 "success" else failed
            accessToken = jsonResponse.get("access_token").getAsString();
            System.out.println(accessToken);
</code></pre>

<p>I understand this means that JVM can't compile a <code>.class</code> for <code>JsonParser</code>? I suppose this means the compiler has no knowledge of the library existing, which makes me suspect that Gradle isn't configured properly with the project, as it has downloaded the library, but not added a path to it?</p>

<p>I have tried <code>gradle cleanIdea</code> and then <code>gradle idea</code>. I have rebuilt the the project. I have "Mark directory as source root" on various directories for testing being careful to revert when it failed to change behaviour. </p>

<p><strong>Edit</strong>; </p>

<p>I have added a package <code>com.example</code> in the <code>src.main.Java</code> directory and added the java files. </p>

<p><a href="https://i.stack.imgur.com/47FiG.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/47FiG.png" alt="enter image description here"></a></p>

<p>I edited run configuration for <code>Main.java</code> to</p>

<ul>
<li><code>Main class: com.example.Main</code></li>
<li><code>Use classpath of module: src.main</code></li>
</ul>

<p>I also changed the <code>build.gradle</code> file to;</p>

<pre><code>application {
    // Define the main class for the application.
    mainClassName = 'com.example.Main'
}
</code></pre>

<p><code>Main</code> runs but I am stuck at this point, which seems to run indefinitely;</p>

<p><a href="https://i.stack.imgur.com/OT5eY.png" rel="nofollow noreferrer"><img src="https://i.stack.imgur.com/OT5eY.png" alt="enter image description here"></a></p>

<p>Also, I am sure I right clicked on <code>build.gradle</code> and selected <code>import</code>, although I can't recreate this as the option isn't available now.</p>

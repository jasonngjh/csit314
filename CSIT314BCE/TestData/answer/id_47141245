<p>As what has already been mentioned by others, what behind the mystery is <a href="https://en.wikipedia.org/wiki/Branch_predictor" rel="noreferrer">Branch Predictor</a>. </p>

<p>I'm not trying to add something but explaining the concept in another way. 
There is a concise introduction on the wiki which contains text and diagram.
I do like the explanation below which uses a diagram to elaborate the Branch Predictor intuitively.</p>

<blockquote>
  <p>In computer architecture, a branch predictor is a
  digital circuit that tries to guess which way a branch (e.g. an
  if-then-else structure) will go before this is known for sure. The
  purpose of the branch predictor is to improve the flow in the
  instruction pipeline. Branch predictors play a critical role in
  achieving high effective performance in many modern pipelined
  microprocessor architectures such as x86.</p>
  
  <p>Two-way branching is usually implemented with a conditional jump
  instruction. A conditional jump can either be "not taken" and continue
  execution with the first branch of code which follows immediately
  after the conditional jump, or it can be "taken" and jump to a
  different place in program memory where the second branch of code is
  stored. It is not known for certain whether a conditional jump will be
  taken or not taken until the condition has been calculated and the
  conditional jump has passed the execution stage in the instruction
  pipeline (see fig. 1).</p>
</blockquote>

<p><a href="https://i.stack.imgur.com/unxnb.png" rel="noreferrer"><img src="https://i.stack.imgur.com/unxnb.png" alt="figure 1"></a></p>

<p>Based on the described scenario, I have written an animation demo to show how instructions are executed in a pipeline in different situations.</p>

<ol>
<li>Without the Branch Predictor. </li>
</ol>

<blockquote>
  <p>Without branch prediction, the processor would have to wait until the
  conditional jump instruction has passed the execute stage before the
  next instruction can enter the fetch stage in the pipeline.</p>
</blockquote>

<p>The example contains three instructions and the first one is a conditional jump instruction. The latter two instructions can go into the pipeline until the conditional jump instruction is executed. </p>

<p><a href="https://i.stack.imgur.com/GMFQ6.gif" rel="noreferrer"><img src="https://i.stack.imgur.com/GMFQ6.gif" alt="without branch predictor"></a></p>

<p>It will take 9 clock cycles for 3 instructions to be completed.</p>

<ol start="2">
<li>Use Branch Predictor and don't take a conditional jump. Let's assume that the predict is <strong>not</strong> taking the conditional jump.</li>
</ol>

<p><a href="https://i.stack.imgur.com/Ms5p1.gif" rel="noreferrer"><img src="https://i.stack.imgur.com/Ms5p1.gif" alt="enter image description here"></a></p>

<p>It will take 7 clock cycles for 3 instructions to be completed.</p>

<ol start="3">
<li>Use Branch Predictor and take a conditional jump. Let's assume that the predict is <strong>not</strong> taking the conditional jump.</li>
</ol>

<p><a href="https://i.stack.imgur.com/HIpG3.gif" rel="noreferrer"><img src="https://i.stack.imgur.com/HIpG3.gif" alt="enter image description here"></a></p>

<p>It will take 9 clock cycles for 3 instructions to be completed.</p>

<blockquote>
  <p>The time that is wasted in case of a branch misprediction is equal to
  the number of stages in the pipeline from the fetch stage to the
  execute stage. Modern microprocessors tend to have quite long
  pipelines so that the misprediction delay is between 10 and 20 clock
  cycles. As a result, making a pipeline longer increases the need for a
  more advanced branch predictor.</p>
</blockquote>

<p>As you can see, it seems we don't have a reason not to use Branch Predictor.</p>

<p>It's quite a simple demo that clarifies the very basic part of Branch Predictor. If those gifs are annoying, please feel free to remove them from the answer and visitors can also get the live demo source code from <a href="https://github.com/Eugene-Mark/BranchPredictorDemo" rel="noreferrer">BranchPredictorDemo</a></p>

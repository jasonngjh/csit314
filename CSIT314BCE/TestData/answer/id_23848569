<p>Another alternative is to use the <a href="https://underscorejs.org" rel="noreferrer">Underscore.js</a> library. </p>

<p>Note that <code>_.pick()</code> and <code>_.omit()</code> both return a copy of the object and don't directly modify the original object. Assigning the result to the original object should do the trick (not shown).</p>

<p>Reference: <a href="http://underscorejs.org/#pick" rel="noreferrer">link</a> <strong>_.pick(object, *keys)</strong></p>

<p>Return a copy of the object, filtered to only have values for the 
whitelisted keys (or array of valid keys).</p>

<pre><code>var myJSONObject = 
{"ircEvent": "PRIVMSG", "method": "newURI", "regex": "^http://.*"};

_.pick(myJSONObject, "ircEvent", "method");
=&gt; {"ircEvent": "PRIVMSG", "method": "newURI"};
</code></pre>

<p>Reference: <a href="http://underscorejs.org/#omit" rel="noreferrer">link</a> <strong>_.omit(object, *keys)</strong></p>

<p>Return a copy of the object, filtered to omit the 
blacklisted keys (or array of keys).</p>

<pre><code>var myJSONObject = 
{"ircEvent": "PRIVMSG", "method": "newURI", "regex": "^http://.*"};

_.omit(myJSONObject, "regex");
=&gt; {"ircEvent": "PRIVMSG", "method": "newURI"};
</code></pre>

<p>For arrays, <code>_.filter()</code> and <code>_.reject()</code> can be used in a similar manner. </p>

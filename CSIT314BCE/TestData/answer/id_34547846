<h3>A Typical Git Cycle</h3>

<p>In speaking of Git-related commands in the previous answers, I would like to share my typical Git cycles with all readers which may helpful. Here is how I work with Git,</p>

<ol>
<li><p>Cloning the first time from the remote server</p>

<p><code>git clone $project</code></p></li>
<li><p>Pulling from remote (when I don't have a pending local commit to push)</p>

<p><code>git pull</code></p></li>
<li><p>Adding a new local file1 into $to_be_committed_list (just imagine $to_be_committed_list means <code>staged</code> area)</p>

<p><code>git add $file1</code></p></li>
<li><p>Removing mistakenly added file2 from $to_be_committed_list (assume that file2 is added like step 3, which I didn't want)</p>

<p><code>git reset $file2</code></p></li>
<li><p>Committing file1 which is in $to_be_committed_list</p>

<p><code>git commit -m "commit message description"</code></p></li>
<li><p>Syncing local commit with remote repository before pushing</p>

<p><code>git pull --rebase</code></p></li>
<li><p>Resolving when conflict occurs <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration" rel="noreferrer">prerequisite configure mergetool</a></p>

<p><code>git mergetool #resolve merging here, also can manually merge</code></p></li>
<li><p>Adding conflict-resolved files, let's say <code>file1</code>:</p>

<p><code>git add $file1</code></p></li>
<li><p>Continuing my previous rebase command</p>

<p><code>git rebase --continue</code></p></li>
<li><p>Pushing ready and already synced last local commit</p>

<p><code>git push origin head:refs/for/$branch # branch = master, dev, etc.</code></p></li>
</ol>

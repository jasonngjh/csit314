<p>Undoing a commit is a little scary if you don't know how it works.  But it's actually amazingly easy if you do understand.</p>

<p>Say you have this, where C is your HEAD and (F) is the state of your files.</p>

<pre><code>   (F)
A-B-C
    ↑
  master
</code></pre>

<p>You want to <strong>nuke commit C and never see it again and lose all the changes in locally modified files</strong>.  You do this:</p>

<pre><code>git reset --hard HEAD~1
</code></pre>

<p>The result is:</p>

<pre><code> (F)
A-B
  ↑
master
</code></pre>

<p>Now B is the HEAD.  Because you used <code>--hard</code>, your files are reset to their state at commit B.</p>

<p>Ah, but suppose commit C wasn't a disaster, but just a bit off.  You want to <strong>undo the commit but keep your changes</strong> for a bit of editing before you do a better commit.  Starting again from here, with C as your HEAD:</p>

<pre><code>   (F)
A-B-C
    ↑
  master
</code></pre>

<p>You can do this, leaving off the <code>--hard</code>:</p>

<pre><code>git reset HEAD~1
</code></pre>

<p>In this case the result is:</p>

<pre><code>   (F)
A-B-C
  ↑
master
</code></pre>

<p>In both cases, HEAD is just a pointer to the latest commit.  When you do a <code>git reset HEAD~1</code>, you tell Git to move the HEAD pointer back one commit.  But (unless you use <code>--hard</code>) you leave your files as they were.  So now <code>git status</code> shows the changes you had checked into C.  You haven't lost a thing!</p>

<p>For the lightest touch, you can even <strong>undo your commit but leave your files and your <a href="https://git.wiki.kernel.org/index.php/WhatIsTheIndex" rel="noreferrer">index</a></strong>:</p>

<pre><code>git reset --soft HEAD~1
</code></pre>

<p>This not only leaves your files alone, it even leaves your <em>index</em> alone.  When you do <code>git status</code>, you'll see that the same files are in the index as before.  In fact, right after this command, you could do <code>git commit</code> and you'd be redoing the same commit you just had.</p>

<p>One more thing: <strong>Suppose you destroy a commit</strong> as in the first example, <strong>but then discover you needed it after all</strong>?  Tough luck, right?</p>

<p>Nope, there's <em>still</em> a way to get it back.  Type <code>git reflog</code> and you'll see a list of (partial) commit <a href="https://en.wikipedia.org/wiki/SHA-1#Data_integrity" rel="noreferrer">shas</a> (that is, hashes) that you've moved around in.  Find the commit you destroyed, and do this:</p>

<pre><code>git checkout -b someNewBranchName shaYouDestroyed
</code></pre>

<p>You've now resurrected that commit.  Commits don't actually get destroyed in Git for some 90 days, so you can usually go back and rescue one you didn't mean to get rid of.</p>

<p>Unlike some other languages, Java does not allow you to choose between pass-by-value and pass-by-reference.</p>

<p>All arguments are passed by value. </p>

<p>A method call can pass two <code>types of values</code>to a method</p>

<ul>
<li>copies of primitive values (e.g., values of type int and double)</li>
<li>copies of references to objects.</li>
</ul>

<p><code>Objects themselves cannot be passed to methods</code>. When a method modifies a primitive-type parameter, changes to the parameter have no effect on the original argument value in the calling method.</p>

<p>This is also true for reference-type parameters. If you modify a reference-type parameter so that it refers to another object, only the parameter refers to the new object—the reference stored in the caller’s variable still refers to the original object.</p>

<p>References: <a href="https://www.safaribooksonline.com/library/view/javatm-how-to/9780133813036/ch07lev2sec11.html" rel="noreferrer">Java™ How To Program (Early Objects), Tenth Edition</a> </p>

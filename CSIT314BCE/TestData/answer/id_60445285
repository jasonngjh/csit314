<p>Following are some <em>methods</em> that might help you in removing specific item from Array.</p>

<p><strong>1. Array filter Method to Remove Items By Value</strong></p>

<p>Unlike the splice method, filter creates a new array. filter() does not mutate the array on which it is called, but returns a new array.</p>

<p>filter() has a single parameter, a callback method. The callback is triggered as the filter method iterates through the array elements. It will pass three values to the callback: the current value or element, the current array index and the full array.</p>

<p>The callback method should return either true or false. It is your responsibility to test the value (element) to see if it meets your criteria. If it does you can return true. Elements that return true are added to the new, filtered array.</p>

<pre><code>var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];

var filtered = array.filter(function(value, index, arr){

    return value &gt; 5;

});

//filtered =&gt; [6, 7, 8, 9]
//array =&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]
</code></pre>

<p>You should note a new array containing matching values is returned. The original array is left untouched. I find this useful because I often want to retain an original data source, but retrieve subsets based on different logic sets.</p>

<p><strong>2. The Lodash Array Remove Method</strong></p>

<p>Sometimes utility libraries are the best way to solve more complex problems. Lodash provides a rich set of array manipulation methods, one being remove.</p>

<p>The Lodash remove method works much like the array filter method, but sort of in reverse. It does not save the original array values, but removes matching elements. It returns the matching elements as a new array.</p>

<pre><code>var array = [1, 2, 3, 4];
var evens = _.remove(array, function(n) {
  return n % 2 === 0;
});

console.log(array);
// =&gt; [1, 3]

console.log(evens);
// =&gt; [2, 4]
</code></pre>

<p><strong>3. Making a Remove Method</strong></p>

<p>As I mentioned before, there is no native Array.remove method. The Lodash method does solve this problem, but you may not always want to use Lodash. This does not mean you cannot create a utility method. <a href="https://en.wikipedia.org/wiki/John_Resig" rel="nofollow noreferrer">John Resig</a> gave us a model to follow, however he extended the Array prototype, which is a bad idea.</p>

<p>Instead I created an Array remove utility method that can be added to a helper or utility library. Like the Lodash remove method the first parameter is the target array. It uses Array.filter to return elements not matching a value.</p>

<pre><code>function arrayRemove(arr, value) {

   return arr.filter(function(ele){
       return ele != value;
   });

}

var result = arrayRemove(array, 6);

// result = [1, 2, 3, 4, 5, 7, 8, 9, 0]
</code></pre>

<p>This method is simple, and it assumes simple values like numbers or strings. You could modify this method to use a custom comparison method, but I think it would be easier to just use the filter method directly.</p>

<p><strong>4. Explicitly Remove Array Elements Using the Delete Operator</strong></p>

<p>You can remove specific array elements using the delete operator:</p>

<pre><code>var ar = [1, 2, 3, 4, 5, 6];
delete ar[4]; // Delete element with index 4
console.log( ar ); // [1, 2, 3, 4, undefined, 6]
alert( ar ); // 1, 2, 3, 4, , 6
</code></pre>

<p>Using the delete operator does not affect the length property. Nor does it affect the indexes of subsequent elements. The array becomes sparse, which is a fancy way of saying the deleted item is not removed but becomes undefined. Compare using delete with the splice method described below.</p>

<p>The delete operator is designed to remove properties from JavaScript objects, which arrays are objects.</p>

<p>The reason the element is not actually removed from the array is the delete operator is more about freeing memory than deleting an element. The memory is freed when there are no more references to the value.</p>

<p>As per the <a href="https://tc39.es/ecma262/" rel="noreferrer">ECMA-262</a> standard, <a href="https://tc39.es/ecma262/#sec-string.prototype.replace" rel="noreferrer">String.prototype.replace</a> calls <a href="https://tc39.es/ecma262/#sec-regexp.prototype-@@replace" rel="noreferrer">RegExp.prototype[@@replace]</a>, which says:</p>

<pre class="lang-none prettyprint-override"><code>11. Repeat, while done is false
  a. Let result be ? RegExpExec(rx, S).
  b. If result is null, set done to true.
  c. Else result is not null,
    i. Append result to the end of results.
    ii. If global is false, set done to true.
    iii. Else,
      1. Let matchStr be ? ToString(? Get(result, "0")).
      2. If matchStr is the empty String, then
        a. Let thisIndex be ? ToLength(? Get(rx, "lastIndex")).
        b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).
        c. Perform ? Set(rx, "lastIndex", nextIndex, true).
</code></pre>

<p>where <code>rx</code> is <code>/.*/g</code> and <code>S</code> is <code>'asdf'</code>.</p>

<p>See 11.c.iii.2.b:</p>

<blockquote>
  <p>b. Let nextIndex be AdvanceStringIndex(S, thisIndex, fullUnicode).</p>
</blockquote>

<p>Therefore in <code>'asdf'.replace(/.*/g, 'x')</code> it is actually:</p>

<ol>
<li>result (undefined), results = <code>[]</code>, lastIndex = <code>0</code></li>
<li>result = <code>'asdf'</code>, results = <code>[ 'asdf' ]</code>, lastIndex = <code>4</code></li>
<li>result = <code>''</code>, results = <code>[ 'asdf', '' ]</code>, lastIndex = <code>4</code>, <code>AdvanceStringIndex</code>, set lastIndex to <code>5</code></li>
<li>result = <code>null</code>, results = <code>[ 'asdf', '' ]</code>, return</li>
</ol>

<p>Therefore there are 2 matches.</p>

<p>Others have answered the broad strokes pretty well, so I'll throw in a few details.</p>

<ol>
<li><p>Stack and heap need not be singular. A common situation in which you have more than one stack is if you have more than one thread in a process.  In this case each thread has its own stack. You can also have more than one heap, for example some DLL configurations can result in different DLLs allocating from different heaps, which is why it's generally a bad idea to release memory allocated by a different library.</p></li>
<li><p>In C you can get the benefit of variable length allocation through the use of <a href="https://www.freebsd.org/cgi/man.cgi?alloca" rel="noreferrer">alloca</a>, which allocates on the stack, as opposed to alloc, which allocates on the heap. This memory won't survive your return statement, but it's useful for a scratch buffer.</p></li>
<li><p>Making a huge temporary buffer on Windows that you don't use much of is not free. This is because the compiler will generate a stack probe loop that is called every time your function is entered to make sure the stack exists (because Windows uses a single guard page at the end of your stack to detect when it needs to grow the stack. If you access memory more than one page off the end of the stack you will crash). Example:</p></li>
</ol>

<pre class="lang-cpp prettyprint-override"><code>void myfunction()
{
   char big[10000000];
   // Do something that only uses for first 1K of big 99% of the time.
}
</code></pre>

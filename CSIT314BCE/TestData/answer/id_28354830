<p>Before answering let's add some background, explaining what this <code>HEAD</code> is.</p>

<h1><strong><em><code>First of all what is HEAD?</code></em></strong></h1>

<p><code>HEAD</code> is simply a reference to the current commit (latest) on the current branch. There can only be a single <code>HEAD</code> at any given time (excluding <code>git worktree</code>).</p>

<p>The content of <code>HEAD</code> is stored inside <code>.git/HEAD</code>, and it contains the 40 bytes SHA-1 of the current commit.</p>

<hr>

<h1><strong><em><code>detached HEAD</code></em></strong></h1>

<p>If you are not on the latest commit - meaning that <code>HEAD</code> is pointing to a prior commit in history it's called <strong><em><code>detached HEAD</code></em></strong>.</p>

<p><a href="https://i.stack.imgur.com/OlavO.png" rel="noreferrer"><img src="https://i.stack.imgur.com/OlavO.png" alt="Enter image description here"></a></p>

<p>On the command line it will look like this - SHA-1 instead of the branch name since the <code>HEAD</code> is not pointing to the the tip of the current branch:</p>

<p><a href="https://i.stack.imgur.com/U0l3s.png" rel="noreferrer"><img src="https://i.stack.imgur.com/U0l3s.png" alt="Enter image description here"></a></p>

<hr>

<h3>A few options on how to recover from a detached HEAD:</h3>

<hr>

<h3><a href="https://git-scm.com/docs/git-checkout" rel="noreferrer"><code>git checkout</code></a></h3>

<pre><code>git checkout &lt;commit_id&gt;
git checkout -b &lt;new branch&gt; &lt;commit_id&gt;
git checkout HEAD~X // x is the number of commits t go back
</code></pre>

<p>This will checkout new branch pointing to the desired commit. This command will checkout to a given commit.</p>

<p>At this point you can create a branch and start to work from this point on:</p>

<pre><code># Checkout a given commit.
# Doing so will result in a `detached HEAD` which mean that the `HEAD`
# is not pointing to the latest so you will need to checkout branch
# in order to be able to update the code.
git checkout &lt;commit-id&gt;

# Create a new branch forked to the given commit
git checkout -b &lt;branch name&gt;
</code></pre>

<hr>

<h3><a href="https://git-scm.com/docs/git-reflog" rel="noreferrer"><code>git reflog</code></a></h3>

<p>You can always use the <code>reflog</code> as well. <code>git reflog</code> will display any change which updated the <code>HEAD</code> and checking out the desired reflog entry will set the <code>HEAD</code> back to this commit.</p>

<p><strong>Every time the HEAD is modified there will be a new entry in the <code>reflog</code></strong></p>

<pre><code>git reflog
git checkout HEAD@{...}
</code></pre>

<p>This will get you back to your desired commit</p>

<p><a href="https://i.stack.imgur.com/atW9w.png" rel="noreferrer"><img src="https://i.stack.imgur.com/atW9w.png" alt="Enter image description here"></a></p>

<hr>

<h3><strong><em><a href="https://git-scm.com/docs/git-reset" rel="noreferrer"><code>git reset HEAD --hard &lt;commit_id&gt;</code></a></em></strong></h3>

<p>"Move" your head back to the desired commit.</p>

<pre class="lang-sh prettyprint-override"><code># This will destroy any local modifications.
# Don't do it if you have uncommitted work you want to keep.
git reset --hard 0d1d7fc32

# Alternatively, if there's work to keep:
git stash
git reset --hard 0d1d7fc32
git stash pop
# This saves the modifications, then reapplies that patch after resetting.
# You could get merge conflicts, if you've modified things which were
# changed since the commit you reset to.
</code></pre>

<ul>
<li>Note: (<a href="https://github.com/git/git/blob/master/Documentation/RelNotes/2.7.0.txt" rel="noreferrer">Since Git 2.7</a>) you can also use the <code>git rebase --no-autostash</code> as well.</li>
</ul>

<hr>

<p>This schema illustrates which command does what. As you can see there <code>reset &amp;&amp; checkout</code> modify the <code>HEAD</code>.</p>

<p><a href="https://i.stack.imgur.com/NuThL.png" rel="noreferrer"><img src="https://i.stack.imgur.com/NuThL.png" alt="Enter image description here"></a></p>

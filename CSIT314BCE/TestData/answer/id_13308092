<p>In the following C# code</p>

<pre class="lang-cs prettyprint-override"><code>public void Method1()
{
    int i = 4;
    int y = 2;
    class1 cls1 = new class1();
}
</code></pre>

<p>Here's how the memory is managed</p>

<p><img src="https://i.stack.imgur.com/NS0k7.jpg" alt="Picture of variables on the stack"></p>

<p><code>Local Variables</code> that only need to last as long as the function invocation go in the stack. The heap is used for variables whose lifetime we don't really know up front but we expect them to last a while. In most languages it's critical that we know at compile time how large a variable is if we want to store it on the stack. </p>

<p>Objects (which vary in size as we update them) go on the heap because we don't know at creation time how long they are going to last. In many languages the heap is garbage collected to find objects (such as the cls1 object) that no longer have any references. </p>

<p>In Java, most objects go directly into the heap. In languages like C / C++, structs and classes can often remain on the stack when you're not dealing with pointers.</p>

<p>More information can be found here:</p>

<p><a href="http://timmurphy.org/2010/08/11/the-difference-between-stack-and-heap-memory-allocation/" rel="noreferrer">The difference between stack and heap memory allocation &laquo;  timmurphy.org</a></p>

<p>and here: </p>

<p><a href="https://root.cern.ch/root/htmldoc/guides/users-guide/ALittleC++.html#creating-objects-on-the-stack-and-heap" rel="noreferrer">Creating Objects on the Stack and Heap</a></p>

<p>This article is the source of picture above: <a href="http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types#Stack%20and%20Heap" rel="noreferrer">Six important .NET concepts: Stack, heap, value types, reference types, boxing, and unboxing - CodeProject</a></p>

<p>but be aware it may contain some inaccuracies. </p>

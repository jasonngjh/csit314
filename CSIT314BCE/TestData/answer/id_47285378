<p>All great answers, however a bit difficult for newbies.</p>

<p>I assume you have learned the <code>return</code> statement.</p>

<p>As an analogy, <code>return</code> and <code>yield</code> are twins. <code>return</code> means 'return and stop' whereas 'yield` means 'return, but continue'</p>

<blockquote>
  <ol>
  <li>Try to get a num_list with <code>return</code>.</li>
  </ol>
</blockquote>

<pre><code>def num_list(n):
    for i in range(n):
        return i
</code></pre>

<p>Run it:</p>

<pre><code>In [5]: num_list(3)
Out[5]: 0
</code></pre>

<p>See, you get only a single number rather than a list of them. <code>return</code> never allows you prevail happily, just implements once and quit.</p>

<blockquote>
  <ol start="2">
  <li>There comes <code>yield</code></li>
  </ol>
</blockquote>

<p>Replace <code>return</code> with <code>yield</code>:</p>

<pre><code>In [10]: def num_list(n):
    ...:     for i in range(n):
    ...:         yield i
    ...:

In [11]: num_list(3)
Out[11]: &lt;generator object num_list at 0x10327c990&gt;

In [12]: list(num_list(3))
Out[12]: [0, 1, 2]
</code></pre>

<p>Now, you win to get all the numbers.</p>

<p>Comparing to <code>return</code> which runs once and stops, <code>yield</code> runs times you planed.
You can interpret <code>return</code> as <code>return one of them</code>, and <code>yield</code> as <code>return all of them</code>. This is called <code>iterable</code>.</p>

<blockquote>
  <ol start="3">
  <li>One more step we can rewrite <code>yield</code> statement with <code>return</code></li>
  </ol>
</blockquote>

<pre><code>In [15]: def num_list(n):
    ...:     result = []
    ...:     for i in range(n):
    ...:         result.append(i)
    ...:     return result

In [16]: num_list(3)
Out[16]: [0, 1, 2]
</code></pre>

<p>It's the core about <code>yield</code>.</p>

<p>The difference between a list <code>return</code> outputs and the object <code>yield</code> output is:</p>

<p>You will always get [0, 1, 2] from a list object but only could retrieve them from 'the object <code>yield</code> output' once. So, it has a new name <code>generator</code> object as displayed in <code>Out[11]: &lt;generator object num_list at 0x10327c990&gt;</code>.</p>

<p>In conclusion, as a metaphor to grok it:</p>

<ul>
<li><code>return</code> and <code>yield</code> are twins</li>
<li><code>list</code> and <code>generator</code> are twins</li>
</ul>

<p>I think many of the JavaScript instructions are not well thought out for functional programming. Splice returns the deleted element where most of the time you need the reduced array. This is bad.</p>

<p>Imagine you are doing a recursive call and have to pass an array with one less item, probably without the current indexed item. Or imagine you are doing another recursive call and has to pass an array with an element pushed.</p>

<p>In neither of these cases you can do <code>myRecursiveFunction(myArr.push(c))</code> or <code>myRecursiveFunction(myArr.splice(i,1))</code>. The first idiot will in fact pass the length of the array and the second idiot will pass the deleted element as a parameter.</p>

<p>So what I do in fact... For deleting an array element and passing the resulting to a function as a parameter at the same time I do as follows</p>

<pre><code>myRecursiveFunction(myArr.slice(0,i).concat(a.slice(i+1)))
</code></pre>

<p>When it comes to push that's more silly... I do like,</p>

<pre><code>myRecursiveFunction((myArr.push(c),myArr))
</code></pre>

<p>I believe in a proper functional language a method mutating the object it's called upon must return a reference to the very object as a result.</p>

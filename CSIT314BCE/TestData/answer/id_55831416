<p>This above article is confusing.</p>

<p>It assumes making a copy of the reference and passing it to the method is a pass by value, because a copy is passed. That is not what I and many understand. </p>

<p>Is the language passing by value or by reference ? Why do we ask this question ?</p>

<p>The whole issue occurs when calling a method. Such a method is defined with parameters and is called with arguments.</p>

<p>Making the distinction between parameter and argument is helpful. The parameter is the name of the received thing specified when defining the method. The argument is the name of the sent thing specified when calling the method.</p>

<p>Any content stored in memory has an address so as to be accessed. This content address is called a reference. With the reference it is possible to access the content. If the reference is given to a tier then this tier can access and update the referenced content. If the reference is given to a method, then this method can also access and update this referenced content.</p>

<p>What happens when "passing" an argument into a method parameter ? A copy of the argument is made and given to the method parameter.</p>

<p>What do we understand when we say "pass by value" and "pass by reference" ? When using the word "value" we understand the actual content being stored, say someone's name. When using the word "reference" we understand a memory address pointing to a "value".</p>

<p>So, when we say "pass by value" we understand that the argument we pass into the method parameter is some content. And when we say "pass by reference" we understand that the argument we pass into the method parameter is a memory address pointing to some content.</p>

<p>If what is passed is some content, then a copy of this content is being made and given to the method. Since the content given is a copy, there is no risk of altering the original content.</p>

<p>If, on the other hand, what is passed is a reference to some content, then a copy of this reference is being made and given to the method, with the referenced content itself not being a copy of the original content, but being the original content, only its reference having been copied.</p>

<p>In Java, I understand that a primitive type is passed as content, that is, is passed by value, and an object is passed as a reference to some content, that is, is passed by reference.</p>

<p>That a copy of the reference is made before being given to the method parameter, does not make this reference a value.</p>

<p>The swap test is not a decisive indicator.</p>

<p>If an object outside a method can be altered from within the method when passing it to the method, then the passing is by reference.</p>

<p>The Java documentation and lots of articles are at best confusing on this, and at worst, wrong.</p>

<p>My two cents.</p>

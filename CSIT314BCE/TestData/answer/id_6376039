<p>There are two ways to "undo" your last commit, depending on whether or not you have already made your commit public (pushed to your remote repository):</p>

<h2>How to undo a local commit</h2>

<p>Let's say I committed locally, but now I want to remove that commit.</p>

<pre><code>git log
    commit 101: bad commit    # Latest commit. This would be called 'HEAD'.
    commit 100: good commit   # Second to last commit. This is the one we want.
</code></pre>

<p>To restore everything back to the way it was prior to the last commit, we need to <code>reset</code> to the commit before <code>HEAD</code>:</p>

<pre><code>git reset --soft HEAD^     # Use --soft if you want to keep your changes
git reset --hard HEAD^     # Use --hard if you don't care about keeping the changes you made
</code></pre>

<p>Now <code>git log</code> will show that our last commit has been removed.</p>

<h2>How to undo a public commit</h2>

<p>If you have already made your commits public, you will want to create a new commit which will "revert" the changes you made in your previous commit (current HEAD).</p>

<pre><code>git revert HEAD
</code></pre>

<p>Your changes will now be reverted and ready for you to commit:</p>

<pre><code>git commit -m 'restoring the file I removed by accident'
git log
    commit 102: restoring the file I removed by accident
    commit 101: removing a file we don't need
    commit 100: adding a file that we need
</code></pre>

<p>For more information, check out <em><a href="https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things" rel="noreferrer">Git Basics - Undoing Things</a></em>.</p>

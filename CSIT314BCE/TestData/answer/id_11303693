<p>If you are curious about even more optimizations that can be done to this code, consider this:</p>

<p>Starting with the original loop:</p>

<pre><code>for (unsigned i = 0; i &lt; 100000; ++i)
{
    for (unsigned j = 0; j &lt; arraySize; ++j)
    {
        if (data[j] &gt;= 128)
            sum += data[j];
    }
}
</code></pre>

<p>With loop interchange, we can safely change this loop to:</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    for (unsigned i = 0; i &lt; 100000; ++i)
    {
        if (data[j] &gt;= 128)
            sum += data[j];
    }
}
</code></pre>

<p>Then, you can see that the <code>if</code> conditional is constant throughout the execution of the <code>i</code> loop, so you can hoist the <code>if</code> out:</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    if (data[j] &gt;= 128)
    {
        for (unsigned i = 0; i &lt; 100000; ++i)
        {
            sum += data[j];
        }
    }
}
</code></pre>

<p>Then, you see that the inner loop can be collapsed into one single expression, assuming the floating point model allows it (<code>/fp:fast</code> is thrown, for example)</p>

<pre><code>for (unsigned j = 0; j &lt; arraySize; ++j)
{
    if (data[j] &gt;= 128)
    {
        sum += data[j] * 100000;
    }
}
</code></pre>

<p>That one is 100,000 times faster than before.</p>

<p>To amend the previous commit, make the changes you want and stage those changes, and then run</p>



<pre class="lang-none prettyprint-override"><code>git commit --amend
</code></pre>

<p>This will open a file in your text editor representing your new commit message. It starts out populated with the text from your old commit message. Change the commit message as you want, then save the file and quit your editor to finish.</p>

<p>To amend the previous commit and keep the same log message, run</p>

<pre class="lang-none prettyprint-override"><code>git commit --amend -C HEAD
</code></pre>

<p>To fix the previous commit by removing it entirely, run</p>

<pre class="lang-none prettyprint-override"><code>git reset --hard HEAD^
</code></pre>

<p>If you want to edit more than one commit message, run</p>

<pre class="lang-none prettyprint-override"><code>git rebase -i HEAD~<b>commit_count</b></code></pre>

<p>(Replace <b>commit_count</b> with number of commits that you want to edit.) This command launches your editor. Mark the first commit (the one that you want to change) as “edit” instead of “pick”, then save and exit your editor. Make the change you want to commit and then run</p>

<pre class="lang-none prettyprint-override"><code>git commit --amend
git rebase --continue
</code></pre>

<p>Note: You can also "Make the change you want" from the editor opened by <code>git commit --amend</code></p>

<p>If you have to change an old commit message over multiple branches (i.e., the commit with the erroneous message is present in multiple branches) you might want to use:</p>

<pre class="lang-bash prettyprint-override"><code>git filter-branch -f --msg-filter \
'sed "s/&lt;old message&gt;/&lt;new message&gt;/g"' -- --all
</code></pre>

<p>Git will create a temporary directory for rewriting and additionally backup old references in <code>refs/original/</code>.</p>

<ul>
<li><p><code>-f</code> will enforce the execution of the operation. This is necessary if the temporary directory is already present or if there are already references stored under <code>refs/original</code>. If that is not the case, you can drop this flag.</p></li>
<li><p><code>--</code> separates filter-branch options from revision options.</p></li>
<li><p><code>--all</code> will make sure that all <em>branches</em> and <em>tags</em> are rewritten.</p></li>
</ul>

<p>Due to the backup of your old references, you can easily go back to the state before executing the command.</p>

<p>Say, you want to recover your master and access it in branch <code>old_master</code>:</p>

<pre><code>git checkout -b old_master refs/original/refs/heads/master
</code></pre>

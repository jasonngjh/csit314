<p>Don't use <code>git reset --hard</code>. That will wipe their changes which may well be completely undesirable. Instead:</p>

<pre><code>git pull
git reset origin/master
git checkout &lt;file1&gt; &lt;file2&gt; ...
</code></pre>

<p>You can of course use <code>git fetch</code> instead of <code>git pull</code> since it clearly isn't going to merge, but if you usually pull it makes sense to continue to pull here.</p>

<p>So what happens here is that <code>git pull</code> <strong>updates your origin/master reference</strong>; <code>git reset</code> <strong>updates your local branch reference</strong> on to be the same as origin/master without updating any files, so your checked-out state is unchanged; then <code>git checkout</code> <strong>reverts files to your local branch index state</strong> as needed. In cases where exactly the same file has been added on live and on upstream master, the index already matches the file following the reset, so in the common case you don't need to do <code>git checkout</code> at all.</p>

<p>If the upstream branch also contains commits which you want to apply automatically, you can follow a subtle variation on the process:</p>

<pre><code>git pull
git merge &lt;commit before problem commit&gt;
git reset &lt;problem commit&gt;
git checkout &lt;file1&gt; &lt;file2&gt; ...
git pull
</code></pre>

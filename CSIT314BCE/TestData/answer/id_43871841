<p>They are pretty similar with some small differences, first one is a variable which assigned to an anonymous function (Function Declaration) and second one is the normal way to create a function in JavaScript(Anonymous function Declaration), both has usage, cons and pros:</p>

<p><strong>1. Function Expression</strong><br></p>

<pre><code>var functionOne = function() {
    // Some code
};
</code></pre>

<blockquote>
  <p>A Function Expression defines a function as a part of a larger
  expression syntax (typically a variable assignment ). Functions
  defined via Functions Expressions can be named or anonymous. Function
  Expressions must not start with “function” (hence the parentheses
  around the self invoking example below).</p>
</blockquote>

<p>Assign a variable to a function, means no Hoisting, as we know functions in JavaScript can Hoist, means they can be called before they get declared, while variables need to be declared before getting access to them, so means in this case we can not access the function before where it's declared, also it could be a way that you write your functions, for the functions which return another function, this kind of declaration could make sense, also in ECMA6 &amp; above you can assign this to an arrow function which can be used to call anonymous functions, also this way of declaring is a better way to create Constructor functions in JavaScript.</p>

<p><strong>2. Function Declaration</strong><br></p>

<pre><code>function functionTwo() {
    // Some code
}
</code></pre>

<blockquote>
  <p>A Function Declaration defines a named function variable without
  requiring variable assignment. Function Declarations occur as
  standalone constructs and cannot be nested within non-function blocks.
  It’s helpful to think of them as siblings of Variable Declarations.
  Just as Variable Declarations must start with “var”, Function
  Declarations must begin with “function”.</p>
</blockquote>

<p>This is the normal way of calling a function in JavaScript, this function can be called before you even declare it as in JavaScript all functions get Hoisted, but if you have 'use strict' this won't Hoist as expected, it's a good way to call all normal functions which are not big in lines and neither are a  constructor function.</p>

<p>Also, if you need more info about how hoisting works in JavaScript, visit the link below:</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/Hoisting</a></p>

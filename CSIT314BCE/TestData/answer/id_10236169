<p>Everything is passed by value. Primitives and Object references. But objects can be changed, if their interface allows it.</p>

<p>When you pass an object to a method, you are passing a reference, and the object can be modified by the method implementation. </p>

<pre><code>void bithday(Person p) {
    p.age++;
}
</code></pre>

<p>The reference of the object itself, is passed by value: you can reassign the parameter, but the change is not reflected back:</p>

<pre><code>void renameToJon(Person p) { 
    p = new Person("Jon"); // this will not work
}

jack = new Person("Jack");
renameToJon(jack);
sysout(jack); // jack is unchanged
</code></pre>

<p>As matter of effect, "p" is reference (pointer to the object) and can't be changed. </p>

<p>Primitive types are passed by value. Object's reference can be considered a primitive type too. </p>

<p>To recap, everything is passed by value.</p>

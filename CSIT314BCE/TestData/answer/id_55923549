<p>Long story short: </p>

<ol>
<li>Non-primitives: Java passes the <em>Value of the Reference</em>.  </li>
<li>Primitives: just value. </li>
</ol>

<p>The End.</p>

<p>(2) is too easy. Now if you want to think of what (1) implies, imagine you have a class Apple:</p>

<pre><code>class Apple {
    private double weight;
    public Apple(double weight) {
        this.weight = weight;
    }
    // getters and setters ...

}
</code></pre>

<p>then when you pass an instance of this class to the main method:</p>

<pre><code>class Main {
    public static void main(String[] args) {
        Apple apple = new Apple(3.14);
        transmogrify(apple);
        System.out.println(apple.getWeight()+ " the goose drank wine...";

    }

    private static void transmogrify(Apple apple) {
        // does something with apple ...
        apple.setWeight(apple.getWeight()+0.55);
    }
}
</code></pre>

<p>oh.. but you probably know that, you're interested in what happens when you do something like this:</p>

<pre><code>class Main {
    public static void main(String[] args) {
        Apple apple = new Apple(3.14);
        transmogrify(apple);
        System.out.println("Who ate my: "+apple.getWeight()); // will it still be 3.14? 

    }

    private static void transmogrify(Apple apple) {
        // assign a new apple to the reference passed...
        apple = new Apple(2.71);
    }


}
</code></pre>

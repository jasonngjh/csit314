<p>Even though many beautiful definitions of JavaScript closures exists on the Internet, I am trying to start explaining my six-year-old friend with my favourite definitions of closure which helped me to understand the closure much better.</p>

<p><strong>What is a Closure?</strong></p>

<p>A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.</p>

<p>A closure is the local variables for a function - kept alive after the function has returned.</p>

<p>Closures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created in.</p>

<p>Closures are an extension of the concept of scope. With closures, functions have access to variables that were available in the scope where the function was created.</p>

<p>A closure is a stack-frame which is not deallocated when the function returns. (As if a 'stack-frame' were malloc'ed instead of being on the stack!)</p>

<p>Languages such as Java provide the ability to declare methods private, meaning that they can only be called by other methods in the same class. JavaScript does not provide a native way of doing this, but it is possible to emulate private methods using closures.</p>

<p>A "closure" is an expression (typically a function) that can have free variables together with an environment that binds those variables (that "closes" the expression).</p>

<p>Closures are an abstraction mechanism that allow you to separate concerns very cleanly.</p>

<p><strong>Uses of Closures:</strong></p>

<p>Closures are useful in hiding the implementation of functionality while still revealing the interface.</p>

<p>You can emulate the encapsulation concept in JavaScript using closures.</p>

<p>Closures are used extensively in <a href="http://en.wikipedia.org/wiki/JQuery">jQuery</a> and <a href="http://en.wikipedia.org/wiki/Node.js">Node.js</a>.</p>

<p>While object literals are certainly easy to create and convenient for storing data, closures are often a better choice for creating static singleton namespaces in a large web application.</p>

<p><strong>Example of Closures:</strong></p>

<p>Assuming my 6-year-old friend get to know addition very recently in his primary school, I felt this example of adding the two numbers would be the simplest and apt for the six-year-old to learn the closure.</p>

<p><strong>Example 1: Closure is achieved here by returning a function.</strong></p>

<pre><code>function makeAdder(x) {
    return function(y) {
        return x + y;
    };
}

var add5 = makeAdder(5);
var add10 = makeAdder(10);

console.log(add5(2));  // 7
console.log(add10(2)); // 12
</code></pre>

<p><strong>Example 2: Closure is achieved here by returning an object literal.</strong></p>

<pre><code>function makeAdder(x) {
    return {
        add: function(y){
            return x + y;
        }
    }
}

var add5 = makeAdder(5);
console.log(add5.add(2));//7

var add10 = makeAdder(10);
console.log(add10.add(2));//12
</code></pre>

<p><strong>Example 3: Closures in jQuery</strong></p>

<pre><code>$(function(){
    var name="Closure is easy";
    $('div').click(function(){
        $('p').text(name);
    });
});
</code></pre>

<p><strong>Useful Links:</strong></p>

<ul>
<li><em><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures">Closures</a></em> (Mozilla Developer Network)</li>
<li><em><a href="http://javascriptissexy.com/understand-javascript-closures-with-ease/">Understand JavaScript Closures With Ease</a></em></li>
</ul>

<p>Thanks to the above links which helps me to understand and explain closure better.</p>

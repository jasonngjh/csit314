<p><strong>In Java only references are passed and are passed by value:</strong></p>

<p>Java arguments are <strong>all passed by value</strong> (the reference is copied when used by the method) :</p>

<p>In the case of primitive types, Java behaviour is simple: 
The value is copied in another instance of the primitive type.</p>

<p>In case of Objects, this is the same: 
Object variables are pointers (buckets) holding only Objectâ€™s <strong>address</strong> that was created using the "new" keyword, and are copied like primitive types.</p>

<p>The behaviour can appear different from primitive types: Because the copied object-variable contains the same address (to the same Object).
Object's <strong>content/members</strong> might still be modified within a method and later access outside, giving the illusion that the (containing) Object itself was passed by reference. </p>

<p>"String" Objects appear to be a good <strong>counter-example</strong> to the urban legend saying that "Objects are passed by reference":</p>

<p>In effect, using a method, you will never be able, to update the value of a String passed as argument:</p>

<p>A String Object, holds characters by an array declared <strong>final</strong> that can't be modified.
Only the address of the Object might be replaced by another using "new". 
Using "new" to update the variable, will not let the Object be accessed from outside, since the variable was initially passed by value and copied.</p>

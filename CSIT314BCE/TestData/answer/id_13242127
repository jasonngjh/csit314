<p>The problem with all these solutions is that they are all either too complex, or, an even bigger problem, is that they remove all untracked files from the web server, which we don't want since there are always needed configuration files which are on the server and not in the Git repository.</p>

<p>Here is the cleanest solution which we are using:</p>

<pre class="lang-bash prettyprint-override"><code># Fetch the newest code
git fetch

# Delete all files which are being added, so there
# are no conflicts with untracked files
for file in `git diff HEAD..origin/master --name-status | awk '/^A/ {print $2}'`
do
    rm -f -- "$file"
done

# Checkout all files which were locally modified
for file in `git diff --name-status | awk '/^[CDMRTUX]/ {print $2}'`
do
    git checkout -- "$file"
done

# Finally pull all the changes
# (you could merge as well e.g. 'merge origin/master')
git pull
</code></pre>

<ul>
<li><p>The first command fetches newest data.</p></li>
<li><p>The second command checks if there are any files which are being added to the repository and deletes those untracked files from the local repository which would cause conflicts.</p></li>
<li><p>The third command checks-out all the files which were locally modified.</p></li>
<li><p>Finally we do a pull to update to the newest version, but this time without any conflicts, since untracked files which are in the repo don't exist anymore and all the locally modified files are already the same as in the repository.</p></li>
</ul>

<p>New answer after 6 years and 5 months (procrastination).</p>

<p>While <code>string</code> is a reserved C# keyword that always has a fixed meaning, <code>String</code> is just an ordinary <em>identifier</em> which could refer to anything. Depending on members of the current type, the current namespace and the applied <code>using</code> directives and their placement, <code>String</code> could be a value or a type distinct from <code>global::System.String</code>.</p>

<p>I shall provide two examples where <em><code>using</code> directives will not help</em>.</p>

<hr>

<p>First, when <code>String</code> is a <strong><em>value</em></strong> of the current type (or a local variable):</p>

<pre><code>class MySequence&lt;TElement&gt;
{
  public IEnumerable&lt;TElement&gt; String { get; set; }

  void Example()
  {
    var test = String.Format("Hello {0}.", DateTime.Today.DayOfWeek);
  }
}
</code></pre>

<p>The above will not compile because <code>IEnumerable&lt;&gt;</code> does not have a non-static member called <code>Format</code>, and no extension methods apply. In the above case, it may still be possible to use <code>String</code> in other contexts where a <em>type</em> is the only possibility syntactically. For example <code>String local = "Hi mum!";</code> could be OK (depending on namespace and <code>using</code> directives).</p>

<p>Worse: Saying <code>String.Concat(someSequence)</code> will likely (depending on <code>using</code>s) go to the Linq extension method <code>Enumerable.Concat</code>. It will not go to the static method <code>string.Concat</code>.</p>

<hr>

<p>Secondly, when <code>String</code> is another <strong><em>type</em></strong>, nested inside the current type:</p>

<pre><code>class MyPiano
{
  protected class String
  {
  }

  void Example()
  {
    var test1 = String.Format("Hello {0}.", DateTime.Today.DayOfWeek);
    String test2 = "Goodbye";
  }
}
</code></pre>

<p>Neither statement in the <code>Example</code> method compiles. Here <code>String</code> is always a piano <a href="http://en.wikipedia.org/wiki/String_(music)" rel="noreferrer">string</a>, <code>MyPiano.String</code>. No member (<code>static</code> or not) <code>Format</code> exists on it (or is inherited from its base class). And the value <code>"Goodbye"</code> cannot be converted into it.</p>

<p>A lot of answers are correct as concepts, but we must note that a stack is needed by the hardware (i.e. microprocessor) to allow calling subroutines (CALL in assembly language..). (OOP guys will call it <em>methods</em>)</p>

<p>On the stack you save return addresses and call → push / ret → pop is managed directly in hardware.</p>

<p>You can use the stack to pass parameters.. even if it is slower than using registers (would a microprocessor guru say or a good 1980s BIOS book...)</p>

<ul>
<li>Without stack <strong>no</strong> microprocessor can work. (we can't imagine a program, even in assembly language, without subroutines/functions)</li>
<li>Without the heap it can. (An assembly language program can work without, as the heap is a OS concept, as malloc, that is a OS/Lib call.</li>
</ul>

<p>Stack usage is faster as:</p>

<ul>
<li>Is hardware, and even push/pop are very efficient.</li>
<li>malloc requires entering kernel mode, use lock/semaphore (or other synchronization primitives) executing some code and manage some structures needed to keep track of allocation.</li>
</ul>

<p>Another alternative is <a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" rel="noreferrer">KMP</a> (Knuth–Morris–Pratt).</p>

<p>The KMP algorithm searches for a length-<em>m</em> substring in a length-<em>n</em> string in worst-case O(<em>n</em>+<em>m</em>) time, compared to a worst case of O(<em>n</em>⋅<em>m</em>) for the naive algorithm, so using KMP may be reasonable if you care about worst-case time complexity.</p>

<p>Here's a JavaScript implementation by Project Nayuki, taken from <a href="https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js" rel="noreferrer">https://www.nayuki.io/res/knuth-morris-pratt-string-matching/kmp-string-matcher.js</a>:</p>

<pre><code>// Searches for the given pattern string in the given text string using the Knuth-Morris-Pratt string matching algorithm.
// If the pattern is found, this returns the index of the start of the earliest match in 'text'. Otherwise -1 is returned.
</code></pre>

<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>function kmpSearch(pattern, text) {
  if (pattern.length == 0)
    return 0; // Immediate match

  // Compute longest suffix-prefix table
  var lsp = [0]; // Base case
  for (var i = 1; i &lt; pattern.length; i++) {
    var j = lsp[i - 1]; // Start by assuming we're extending the previous LSP
    while (j &gt; 0 &amp;&amp; pattern.charAt(i) != pattern.charAt(j))
      j = lsp[j - 1];
    if (pattern.charAt(i) == pattern.charAt(j))
      j++;
    lsp.push(j);
  }

  // Walk through text string
  var j = 0; // Number of chars matched in pattern
  for (var i = 0; i &lt; text.length; i++) {
    while (j &gt; 0 &amp;&amp; text.charAt(i) != pattern.charAt(j))
      j = lsp[j - 1]; // Fall back in the pattern
    if (text.charAt(i) == pattern.charAt(j)) {
      j++; // Next char matched, increment position
      if (j == pattern.length)
        return i - (j - 1);
    }
  }
  return -1; // Not found
}

console.log(kmpSearch('ays', 'haystack') != -1) // true
console.log(kmpSearch('asdf', 'haystack') != -1) // false</code></pre>
</div>
</div>
</p>

<blockquote>
  <p>A closure is a function having access to the parent scope, even after the parent function has closed.</p>
</blockquote>

<pre><code>var add = (function() {
  var counter = 0;
  return function() {
    return counter += 1;
  }
})();

add();
add();
add();
// The counter is now 3
</code></pre>

<p>Example explained:</p>

<ul>
<li>The variable <code>add</code> is assigned the return value of a self-invoking function.</li>
<li>The self-invoking function only runs once. It sets the counter to zero (0), and returns a function expression.</li>
<li>This way add becomes a function. The "wonderful" part is that it can access the counter in the parent scope.</li>
<li>This is called a JavaScript closure. It makes it possible for a function to have "private" variables.</li>
<li>The counter is protected by the scope of the anonymous function, and can only be changed using the add function.</li>
</ul>

<p><a href="http://www.w3schools.com/js/js_function_closures.asp" rel="noreferrer">Source</a></p>

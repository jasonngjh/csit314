<p>I have something to share, although the major points are already covered.</p>

<p><strong>Stack</strong>  </p>

<ul>
<li>Very fast access.</li>
<li>Stored in RAM.</li>
<li>Function calls are loaded here along with the local variables and function parameters passed.</li>
<li>Space is freed automatically when program goes out of a scope.</li>
<li>Stored in sequential memory.</li>
</ul>

<p><strong>Heap</strong></p>

<ul>
<li>Slow access comparatively to Stack.</li>
<li>Stored in RAM.</li>
<li>Dynamically created variables are stored here, which later requires freeing the allocated memory after use.</li>
<li>Stored wherever memory allocation is done, accessed by pointer always.</li>
</ul>

<p><strong>Interesting note:</strong></p>

<ul>
<li>Should the function calls had been stored in heap, it would had resulted in 2 messy points:  

<ol>
<li>Due to sequential storage in stack, execution is faster. Storage in heap would have resulted in huge time consumption thus making the whole program execute slower.</li>
<li>If functions were stored in heap (messy storage pointed by pointer), there would have been no way to return to the caller address back (which stack gives due to sequential storage in memory).</li>
</ol></li>
</ul>

<h1>The difference between git reset --mixed, --soft and --hard</h1>

<blockquote>
  <p>Prerequisite: When a modification to an existing file in your
  repository is made, this change is initially considered as unstaged.
  In order to commit the changes, it needs to be staged which means
  adding it to the index using <code>git add</code>. During a commit operation, the
  files that are staged gets added to an index.</p>
</blockquote>

<p>Let's take an example: </p>

<pre><code>- A - B - C (master)
</code></pre>

<p><code>HEAD</code> points to <code>C</code> and the index matches <code>C</code>.</p>

<h2>--soft</h2>

<ul>
<li>When we execute <code>git reset --soft B</code> with the intention of <strong>removing the commit C</strong> and <strong>pointing the master/HEAD to B</strong>. </li>
<li>The master/HEAD will now point to B, but the <strong>index still has changed from C</strong>. </li>
<li>When executing <code>git status</code> you could see the files indexed in <strong>commit C</strong> as <strong>staged</strong>. </li>
<li>Executing a <code>git commit</code> at this point will create a new commit with <strong>the same changes as C</strong></li>
</ul>

<h2>--mixed</h2>

<ul>
<li>Execute <code>git reset --mixed B</code>. </li>
<li>On execution, master/HEAD will point to B and the <strong>index is also modified to match B</strong> because of the mixed flag used.  </li>
<li>If we run git commit at this point, nothing will happen since the <strong>index matches HEAD</strong>.</li>
<li>We still have the changes in the working directory, but since they're not in the index, <strong>git status shows them as unstaged</strong>. </li>
<li>To commit them, you would <code>git add</code> and then commit as usual.</li>
</ul>

<h2>--hard</h2>

<ul>
<li>Execute <code>git reset --hard B</code></li>
<li>On execution, master/HEAD will point to B <strong>and modifies your working directory</strong></li>
<li>The <strong>changes added in C</strong> and <strong>all the uncommitted changes</strong> will be <strong>removed</strong>.</li>
<li>Files in the working copy will match the commit B, this will result in loosing permanently all changes which were made in commit C plus uncommitted changes</li>
</ul>

<p>Hope this comparison of flags that are available to use with <code>git reset</code> command will help someone to use them wisely. Refer these for further details <a href="https://gist.github.com/tnguyen14/0827ae6eefdff39e452b" rel="noreferrer">link1</a> &amp; <a href="https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard">link2</a></p>

<h3>How to <em>edit</em> an earlier commit</h3>

<p>Generally I don't want to undo a bunch of commits, but rather edit an earlier commit to how I wish I had committed it in the first place.</p>

<p>I found myself fixing a past commit frequently enough that I wrote a script for it.</p>

<p>Here's the workflow:</p>

<ol>
<li><pre><code>git commit-edit &lt;commit-hash&gt;
</code></pre>

<p>This will drop you at the commit you want to edit.</p>

<p>The changes of the commit will be <strong>un</strong>staged, ready to be staged as you wish it was the first time.</p></li>
<li><p>Fix and stage the commit as you wish it had been in the first place.</p>

<p>(You may want to use <code>git stash save --keep-index</code> to squirrel away any files you're not committing)</p></li>
<li><p>Redo the commit with <code>--amend</code>, eg:</p>

<pre><code>git commit --amend
</code></pre></li>
<li><p>Complete the rebase:</p>

<pre><code>git rebase --continue
</code></pre></li>
</ol>

<hr>

<p>Call this following <code>git-commit-edit</code> and put it in your <code>$PATH</code>:</p>



<pre class="lang-bash prettyprint-override"><code>#!/bin/bash

# Do an automatic git rebase --interactive, editing the specified commit
# Revert the index and working tree to the point before the commit was staged
# https://stackoverflow.com/a/52324605/5353461

set -euo pipefail

script_name=${0##*/}

warn () { printf '%s: %s\n' "$script_name" "$*" &gt;&amp;2; }
die () { warn "$@"; exit 1; }

[[ $# -ge 2 ]] &amp;&amp; die "Expected single commit to edit. Defaults to HEAD~"

# Default to editing the parent of the most recent commit
# The most recent commit can be edited with `git commit --amend`
commit=$(git rev-parse --short "${1:-HEAD~}")

# Be able to show what commit we're editing to the user
if git config --get alias.print-commit-1 &amp;&gt;/dev/null; then
  message=$(git print-commit-1 "$commit")
else
  message=$(git log -1 --format='%h %s' "$commit")
fi

if [[ $OSTYPE =~ ^darwin ]]; then
  sed_inplace=(sed -Ei "")
else
  sed_inplace=(sed -Ei)
fi

export GIT_SEQUENCE_EDITOR="${sed_inplace[*]} "' "s/^pick ('"$commit"' .*)/edit \\1/"'
git rebase --quiet --interactive --autostash --autosquash "$commit"~
git reset --quiet @~ "$(git rev-parse --show-toplevel)"  # Reset the cache of the toplevel directory to the previous commit
git commit --quiet --amend --no-edit --allow-empty  #  Commit an empty commit so that that cache diffs are un-reversed

echo
echo "Editing commit: $message" &gt;&amp;2
echo
</code></pre>

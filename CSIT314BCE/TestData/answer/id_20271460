<p>Git allows chronologically older commits to be applied after newer commits.
Because of this, the act of transferring commits between repositories is split into two steps:</p>

<ol>
<li><p>Copying new commits from remote branch to copy of this remote branch inside local repo.  </p>

<p>(repo to repo operation) <code>master@remote &gt;&gt; remote/origin/master@local</code></p></li>
<li><p>Integrating new commits to local branch</p>

<p>(inside-repo operation) <code>remote/origin/master@local &gt;&gt; master@local</code></p></li>
</ol>

<p>There are two ways of doing step 2. You can:</p>

<ol>
<li>Fork local branch after last common ancestor and add new commits parallel to commits which are unique to local repository, finalized by merging commit, closing the fork. </li>
<li>Insert new commits after last common ancestor and reapply commits unique to local repository.</li>
</ol>

<p>In <code>git</code> terminology, step 1 is <code>git fetch</code>, step 2 is <code>git merge</code> or <code>git rebase</code></p>

<p><code>git pull</code> is <code>git fetch</code> and <code>git merge</code></p>

<h2>To change the last commit</h2>

<p>Replace the files in the index:</p>

<pre><code>git rm --cached *.class
git add *.java
</code></pre>

<p>Then, if it's a private branch, <strong>amend</strong> the commit:</p>

<pre><code>git commit --amend
</code></pre>

<p>Or, if it's a shared branch, make a new commit:</p>

<pre><code>git commit -m 'Replace .class files with .java files'
</code></pre>

<p><br/></p>

<p><em>(<strong>To change a previous commit</strong>, use the awesome <a href="https://stackoverflow.com/a/28421811/405550">interactive rebase</a>.)</em></p>

<hr>

<p>ProTipâ„¢: Add <code>*.class</code> to a <a href="https://help.github.com/articles/ignoring-files" rel="noreferrer">gitignore</a> to stop this happening again.</p>

<hr>

<h2>To revert a commit</h2>

<p>Amending a commit is the ideal solution if you need to change the last commit, but a more general solution is <code>reset</code>.</p>

<p>You can reset Git to any commit with:</p>

<pre><code>git reset @~N
</code></pre>

<p>Where <code>N</code> is the number of commits before <code>HEAD</code>, and <code>@~</code> resets to the previous commit.</p>

<p>So, instead of amending the commit, you could use:</p>

<pre><code>git reset @~
git add *.java
git commit -m "Add .java files"
</code></pre>

<p>Check out <code>git help reset</code>, specifically the sections on <code>--soft</code> <code>--mixed</code> and <code>--hard</code>, for a better understanding of what this does.</p>

<h2>Reflog</h2>

<p>If you mess up, you can always use the reflog to find dropped commits:</p>

<pre><code>$ git reset @~
$ git reflog
c4f708b HEAD@{0}: reset: moving to @~
2c52489 HEAD@{1}: commit: added some .class files
$ git reset 2c52489
... and you're back where you started
</code></pre>

<p><br/></p>

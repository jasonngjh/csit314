<p>When your script is run by passing it as a command to the Python interpreter,</p>

<pre><code>python myscript.py
</code></pre>

<p>all of the code that is at indentation level 0 gets executed.  Functions and classes that are defined are, well, defined, but none of their code gets run.  Unlike other languages, there's no <code>main()</code> function that gets run automatically - the <code>main()</code> function is implicitly all the code at the top level.</p>

<p>In this case, the top-level code is an <code>if</code> block.  <code>__name__</code> is a built-in variable which evaluates to the name of the current module.  However, if a module is being run directly (as in <code>myscript.py</code> above), then <code>__name__</code> instead is set to the string <code>"__main__"</code>.  Thus, you can test whether your script is being run directly or being imported by something else by testing</p>

<pre><code>if __name__ == "__main__":
    ...
</code></pre>

<p>If your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the <code>if</code> clause above won't get run as the condition is not met. As a basic example, consider the following two scripts:</p>

<pre><code># file one.py
def func():
    print("func() in one.py")

print("top-level in one.py")

if __name__ == "__main__":
    print("one.py is being run directly")
else:
    print("one.py is being imported into another module")
</code></pre>



<pre><code># file two.py
import one

print("top-level in two.py")
one.func()

if __name__ == "__main__":
    print("two.py is being run directly")
else:
    print("two.py is being imported into another module")
</code></pre>

<p>Now, if you invoke the interpreter as</p>

<pre><code>python one.py
</code></pre>

<p>The output will be</p>

<pre><code>top-level in one.py
one.py is being run directly
</code></pre>

<p>If you run <code>two.py</code> instead:</p>

<pre><code>python two.py
</code></pre>

<p>You get</p>

<pre><code>top-level in one.py
one.py is being imported into another module
top-level in two.py
func() in one.py
two.py is being run directly
</code></pre>

<p>Thus, when module <code>one</code> gets loaded, its <code>__name__</code> equals <code>"one"</code> instead of <code>"__main__"</code>.</p>

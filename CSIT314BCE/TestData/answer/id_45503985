<p><strong>Branch-prediction gain!</strong></p>

<p>It is important to understand that branch misprediction doesn't slow down programs. The cost of a missed prediction is just as if branch prediction didn't exist and you waited for the evaluation of the expression to decide what code to run (further explanation in the next paragraph).</p>

<pre><code>if (expression)
{
    // Run 1
} else {
    // Run 2
}
</code></pre>

<p>Whenever there's an <code>if-else</code> \ <code>switch</code> statement, the expression has to be evaluated to determine which block should be executed. In the assembly code generated by the compiler, conditional <a href="https://en.wikipedia.org/wiki/Branch_(computer_science)" rel="noreferrer">branch</a> instructions are inserted.</p>

<p>A branch instruction can cause a computer to begin executing a different instruction sequence and thus deviate from its default behavior of executing instructions in order (i.e. if the expression is false, the program skips the code of the <code>if</code> block) depending on some condition, which is the expression evaluation in our case.</p>

<p>That being said, the compiler tries to predict the outcome prior to it being actually evaluated. It will fetch instructions from the <code>if</code> block, and if the expression turns out to be true, then wonderful! We gained the time it took to evaluate it and made progress in the code; if not then we are running the wrong code, the pipeline is flushed, and the correct block is run.</p>

<h3>Visualization:</h3>

<p>Let's say you need to pick route 1 or route 2. Waiting for your partner to check the map, you have stopped at ## and waited, or you could just pick route1 and if you were lucky (route 1 is the correct route), then great you didn't have to wait for your partner to check the map (you saved the time it would have taken him to check the map), otherwise you will just turn back.</p>

<p>While flushing pipelines is super fast, nowadays taking this gamble is worth it. Predicting sorted data or a data that changes slowly is always easier and better than predicting fast changes.</p>

<pre><code> O      Route 1  /-------------------------------
/|\             /
 |  ---------##/
/ \            \
                \
        Route 2  \--------------------------------
</code></pre>

<p>Java is only passed by value. there is no pass by reference, for example, you can see the following example.</p>

<pre><code>package com.asok.cop.example.task;
public class Example {
    int data = 50;

    void change(int data) {
        data = data + 100;// changes will be in the local variable 
        System.out.println("after add " + data);
        }

    public static void main(String args[]) {
        Example op = new Example();
        System.out.println("before change " + op.data);
        op.change(500);
        System.out.println("after change " + op.data);
    }
}
</code></pre>

<p>Output:</p>

<pre><code>before change 50
after add 600
after change 50
</code></pre>

<p>as Michael says in the comments:</p>

<blockquote>
  <p>objects are still passed by value even though operations on them behave like pass-by-reference. Consider <code>void changePerson(Person person){ person = new Person(); }</code> the callers reference to the person object will remain unchanged. Objects themselves are passed by value but their members can be affected by changes. To be true pass-by-reference, we would have to be able to reassign the argument to a new object and have the change be reflected in the caller.</p>
</blockquote>

<p>You can use ES6 destructuring with rest operator.</p>

<p>Properties can be removed using <strong>destructuring</strong> in combination with the <strong>rest operator</strong>. In your example regex is destructured out (ignored) and the rest of the properties are returned as rest.</p>

<pre><code>const noRegex = ({ regex, ...rest }) =&gt; rest;
const myObject = {
  "ircEvent": "PRIVMSG",
  "method": "newURI",
  "regex": "^http://.*"
};

console.log(noRegex(myObjext)) //=&gt; {  "ircEvent": "PRIVMSG","method": "newURI" }
</code></pre>

<p>Or you can dynamically exclude properties like this,</p>

<pre><code>const myObject = {
  "ircEvent": "PRIVMSG",
  "method": "newURI",
  "regex": "^http://.*"
};
const removeProperty = prop =&gt; ({ [prop]: _, ...rest }) =&gt; rest

const removeRegex = removeProperty('regex') //=&gt; {  "ircEvent": "PRIVMSG","method":"newURI" }
const removeMethod = removeProperty('method') //=&gt; {  "ircEvent": "PRIVMSG", "regex":"^http://.*" }
</code></pre>

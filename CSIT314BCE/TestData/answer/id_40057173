<p>Put simply, <code>__name__</code> is a variable defined for each script that defines whether the script is being run as the main module or it is being run as an imported module.</p>

<p>So if we have two scripts;</p>

<pre><code>#script1.py
print "Script 1's name: {}".format(__name__)
</code></pre>

<p>and</p>

<pre><code>#script2.py
import script1
print "Script 2's name: {}".format(__name__)
</code></pre>

<p>The output from executing script1 is</p>

<pre><code>Script 1's name: __main__
</code></pre>

<p>And the output from executing script2 is:</p>

<pre><code>Script1's name is script1
Script 2's name: __main__
</code></pre>

<p>As you can see, <code>__name__</code> tells us which code is the 'main' module.
This is great, because you can just write code and not have to worry about structural issues like in C/C++, where, if a file does not implement a 'main' function then it cannot be compiled as an executable and if it does, it cannot then be used as a library.</p>

<p>Say you write a Python script that does something great and you implement a boatload of functions that are useful for other purposes. If I want to use them I can just import your script and use them without executing your program (given that your code only executes within the  <code>if __name__ == "__main__":</code> context). Whereas in C/C++ you would have to portion out those pieces into a separate module that then includes the file. Picture the situation below;</p>

<p><a href="https://i.stack.imgur.com/hWLqr.png" rel="noreferrer"><img src="https://i.stack.imgur.com/hWLqr.png" alt="Complicated importing in C"></a></p>

<p>The arrows are import links. For three modules each trying to include the previous modules code there are six files (nine, counting the implementation files) and five links. This makes it difficult to include other code into a C project unless it is compiled specifically as a library. Now picture it for Python:</p>

<p><a href="https://i.stack.imgur.com/Eql0u.png" rel="noreferrer"><img src="https://i.stack.imgur.com/Eql0u.png" alt="Elegant importing in Python"></a></p>

<p>You write a module, and if someone wants to use your code they just import it and the <code>__name__</code> variable can help to separate the executable portion of the program from the library part.</p>

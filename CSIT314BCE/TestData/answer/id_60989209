<h1>ES10 Update</h1>

<p>This post summarizes common approaches to element removal from array as of ECMAScript 2019 (ES10).</p>

<h2>1. General cases</h2>

<h3>1.1. Removing Array element by value using <code>.splice()</code></h3>

<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: Yes(loop), No(indexOf) | <br/>
| <strong>By value / index</strong>: By index |</p>

<p>If you know the value you want to remove from an array you can use the splice method. First you must identify the index of the target item. You then use the index as the start element and remove just one element.</p>

<pre class="lang-js prettyprint-override"><code>// With a 'for' loop
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
for( let i = 0; i &lt; arr.length; i++){
  if ( arr[i] === 5) {
    arr.splice(i, 1);
  }
} // =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]

// With the .indexOf() method
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
const i = arr.indexOf(5);
arr.splice(i, 1); // =&gt; [1, 2, 3, 4, 6, 7, 8, 9, 0]
</code></pre>

<h3>1.2. Removing Array element using the <code>.filter()</code> method</h3>

<p>| <strong>In-place</strong>: No | <br/>
| <strong>Removes duplicates</strong>: Yes | <br/>
| <strong>By value / index</strong>: By value | <br/></p>

<p>Specific element can be <strong><em>filtered out</em></strong> from array, by providing filtering function. Such function is then called for every element in array.</p>

<pre class="lang-js prettyprint-override"><code>const value = 3
let arr = [1, 2, 3, 4, 5, 3]
arr = arr.filter(item =&gt; item !== value)
console.log(arr)
// [ 1, 2, 4, 5 ]
</code></pre>

<h3>1.3. Removing Array element by extending <code>Array.prototype</code></h3>

<p>| <strong>In-place</strong>: Yes/No (Depends on implementation) | <br/>
| <strong>Removes duplicates</strong>: Yes/No (Depends on implementation) | <br/>
| <strong>By value / index</strong>: By index / By value (Depends on implementation) |</p>

<p>Prototype of Array can be extended with additional methods. Such methods will be then available to use on created arrays.</p>

<p><strong>Note:</strong> Extending prototypes of objects from standard library of JavaScript (like Array) is considered by some as an antipattern.</p>

<pre class="lang-js prettyprint-override"><code>// In-place, removes all, by value implementation
Array.prototype.remove = function(item) {
    for (let i = 0; i &lt; this.length; i++) {
        if (this[i] === item) {
            this.splice(i, 1);
        }
    }
}
const arr1 = [1,2,3,1];
arr1.remove(1) // arr1 equals [2,3]

// Non-stationary, removes first, by value implementation
Array.prototype.remove = function(item) {
    const arr = this.slice();
    for (let i = 0; i &lt; this.length; i++) {
        if (arr[i] === item) {
            arr.splice(i, 1);
            return arr;
        }
    }
    return arr;
}
let arr2 = [1,2,3,1];
arr2 = arr2.remove(1) // arr2 equals [2,3,1]
</code></pre>

<h3>1.4. Removing Array element using the <code>delete</code> operator</h3>

<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: By index |</p>

<p>Using the delete operator does not affect the length property. Nor does it affect the indexes of subsequent elements. The array becomes sparse, which is a fancy way of saying the deleted item is not removed but becomes undefined.</p>

<pre class="lang-js prettyprint-override"><code>const arr = [1, 2, 3, 4, 5, 6];
delete arr[4]; // Delete element with index 4
console.log( arr ); // [1, 2, 3, 4, undefined, 6]
</code></pre>

<p>The delete operator is designed to remove properties from JavaScript objects, which arrays are objects.</p>

<h3>1.5. Removing Array element using <code>Object</code> utilities (>= ES10)</h3>

<p>| <strong>In-place</strong>: No | <br/>
| <strong>Removes duplicates</strong>: Yes | <br/>
| <strong>By value / index</strong>: By value |</p>

<p>ES10 introduced <code>Object.fromEntries</code>, which can be used to create desired Array from any Array-like object and filter unwanted elements during the process.</p>

<pre class="lang-js prettyprint-override"><code>const object = [1,2,3,4];
const valueToRemove = 3;
const arr = Object.values(Object.fromEntries(
  Object.entries(object)
  .filter(([ key, val ]) =&gt; val !== valueToRemove)
));
console.log(arr); // [1,2,4]
</code></pre>

<h2>2. Special cases</h2>

<h3>2.1 Removing element if it's at the end of the Array</h3>

<strong>2.1.1. Changing Array <code>length</code></strong>

<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: N/A |</p>

<p>JavaScript Array elements can be removed from the end of an array by setting the length property to a value less than the current value. Any element whose index is greater than or equal to the new length will be removed.</p>

<pre class="lang-js prettyprint-override"><code>const arr = [1, 2, 3, 4, 5, 6];
arr.length = 5; // Set length to remove element
console.log( arr ); // [1, 2, 3, 4, 5]
</code></pre>

<strong>2.1.2. Using <code>.pop()</code> method</strong>

<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: N/A |</p>

<p>The pop method removes the last element of the array, returns that element, and updates the length property. The pop method modifies the array on which it is invoked, This means unlike using delete the last element is removed completely and the array length reduced.</p>

<pre class="lang-js prettyprint-override"><code>const arr = [1, 2, 3, 4, 5, 6];
arr.pop(); // returns 6
console.log( arr ); // [1, 2, 3, 4, 5]
</code></pre>

<h3>2.2. Removing element if it's at the beginning of the Array</h3>

<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: No | <br/>
| <strong>By value / index</strong>: N/A |</p>

<p>The <code>.shift()</code> method works much like the pop method except it removes the first element of a JavaScript array instead of the last. When the element is removed the remaining elements are shifted down.</p>

<pre class="lang-js prettyprint-override"><code>const arr = [1, 2, 3, 4];
arr.shift(); // returns 1
console.log( arr ); // [2, 3, 4]
</code></pre>

<h3>2.3. Removing element if it's the only element in the Array</h3>

<p>| <strong>In-place</strong>: Yes | <br/>
| <strong>Removes duplicates</strong>: N/A | <br/>
| <strong>By value / index</strong>: N/A |</p>

<p>The fastest technique is to set an array variable to an empty array.</p>

<pre class="lang-js prettyprint-override"><code>let arr = [1];
arr = []; //empty array
</code></pre>

<p>Alternatively technique from 2.1.1 can be used by setting length to 0.</p>

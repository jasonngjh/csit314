<blockquote>
  <h1>What does <code>if __name__ == "__main__":</code> do?</h1>
</blockquote>

<p><code>__name__</code> is a global variable (in Python, global actually means on the <a href="https://docs.python.org/tutorial/modules.html#modules">module level</a>) that exists in all namespaces. It is typically the module's name (as a <code>str</code> type).</p>

<p>As the only special case, however, in whatever Python process you run, as in mycode.py:</p>

<pre><code>python mycode.py
</code></pre>

<p>the otherwise anonymous global namespace is assigned the value of <code>'__main__'</code> to its <code>__name__</code>. </p>

<p>Thus, including <a href="https://docs.python.org/library/__main__.html">the final lines</a></p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>

<ul>
<li>at the end of your mycode.py script,</li>
<li>when it is the primary, entry-point module that is run by a Python process, </li>
</ul>

<p>will cause your script's uniquely defined <code>main</code> function to run. </p>

<p>Another benefit of using this construct: you can also import your code as a module in another script and then run the main function if and when your program decides:</p>

<pre><code>import mycode
# ... any amount of other code
mycode.main()
</code></pre>

<p>The first one (function doSomething(x)) should be part of an object notation.</p>

<p>The second one (<code>var doSomething = function(x){ alert(x);}</code>) is simply creating an anonymous function and assigning it to a variable, <code>doSomething</code>. So doSomething() will call the function.</p>

<p>You may want to know what a <em>function declaration</em> and <em>function expression</em> is.</p>

<p>A function declaration defines a named function variable without requiring variable assignment. Function declarations occur as standalone constructs and cannot be nested within non-function blocks.</p>

<pre><code>function foo() {
    return 3;
}
</code></pre>

<blockquote>
  <p>ECMA 5 (13.0) defines the syntax as <br/>
  function Identifier ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>
</blockquote>

<p>In above condition the function name is visible within its scope and the scope of its parent (otherwise it would be unreachable).</p>

<p>And in a function expression</p>

<p>A function expression defines a function as a part of a larger expression syntax (typically a variable assignment ). Functions defined via functions expressions can be named or anonymous. Function expressions should not start with “function”.</p>

<pre><code>// Anonymous function expression
var a = function() {
    return 3;
}

// Named function expression
var a = function foo() {
    return 3;
}

// Self-invoking function expression
(function foo() {
    alert("hello!");
})();
</code></pre>

<blockquote>
  <p>ECMA 5 (13.0) defines the syntax as <br/>
  function Identifier<sub>opt</sub> ( FormalParameterList<sub>opt</sub> ) { FunctionBody }</p>
</blockquote>

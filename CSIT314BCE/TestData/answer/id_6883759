<p><a href="http://en.wikipedia.org/wiki/Closure_(computer_science)" rel="noreferrer">Wikipedia on closures</a>:</p>

<blockquote>
  <p>In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.</p>
</blockquote>

<p>Technically, in <a href="http://en.wikipedia.org/wiki/JavaScript" rel="noreferrer">JavaScript</a>, <strong>every function is a closure</strong>. It always has an access to variables defined in the surrounding scope.</p>

<p>Since <strong>scope-defining construction in JavaScript is a function</strong>, not a code block like in many other languages, <strong>what we usually mean by <em>closure</em> in JavaScript</strong> is a <strong>function working with nonlocal variables defined in already executed surrounding function</strong>.</p>

<p>Closures are often used for creating functions with some hidden private data (but it's not always the case).</p>

<pre><code>var db = (function() {
    // Create a hidden object, which will hold the data
    // it's inaccessible from the outside.
    var data = {};

    // Make a function, which will provide some access to the data.
    return function(key, val) {
        if (val === undefined) { return data[key] } // Get
        else { return data[key] = val } // Set
    }
    // We are calling the anonymous surrounding function,
    // returning the above inner function, which is a closure.
})();

db('x')    // -&gt; undefined
db('x', 1) // Set x to 1
db('x')    // -&gt; 1
// It's impossible to access the data object itself.
// We are able to get or set individual it.
</code></pre>

<p>ems</p>

<p>The example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. <code>mkdb</code>) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don't return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.</p>

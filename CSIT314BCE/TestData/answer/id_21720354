<p>The term you have used in your question title <code>Remove a property from a JavaScript object</code>, can be interpreted in some different ways. The one is to remove it for whole the memory and the list of object keys or the other is just to remove it from your object. As it has been mentioned in some other answers, the <code>delete</code> keyword is the main part. Let's say you have your object like:</p>

<pre><code>myJSONObject = {"ircEvent": "PRIVMSG", "method": "newURI", "regex": "^http://.*"};
</code></pre>

<p>If you do:</p>

<pre><code>console.log(Object.keys(myJSONObject));
</code></pre>

<p>the result would be:</p>

<pre><code>["ircEvent", "method", "regex"]
</code></pre>

<p>You can delete that specific key from your object keys like:</p>

<pre><code>delete myJSONObject["regex"];
</code></pre>

<p>Then your objects key using <code>Object.keys(myJSONObject)</code> would be:</p>

<pre><code>["ircEvent", "method"]
</code></pre>

<p>But the point is if you care about memory and you want to whole the object gets removed from the memory, it is recommended to set it to null before you delete the key:</p>

<pre><code>myJSONObject["regex"] = null;
delete myJSONObject["regex"];
</code></pre>

<p>The other important point here is to be careful about your other references to the same object. For instance, if you create a variable like:</p>

<pre><code>var regex = myJSONObject["regex"];
</code></pre>

<p>Or add it as a new pointer to another object like:</p>

<pre><code>var myOtherObject = {};
myOtherObject["regex"] = myJSONObject["regex"];
</code></pre>

<p>Then even if you remove it from your object <code>myJSONObject</code>, that specific object won't get deleted from the memory, since the <code>regex</code> variable and <code>myOtherObject["regex"]</code> still have their values. Then how could we remove the object from the memory for sure?</p>

<p>The answer would be to <strong>delete all the references you have in your code, pointed to that very object</strong> and also <strong>not use <code>var</code> statements to create new references to that object</strong>. This last point regarding <code>var</code> statements, is one of the most crucial issues that we are usually faced with, because using <code>var</code> statements would prevent the created object from getting removed.</p>

<p>Which means in this case you won't be able to remove that object because you have created the <code>regex</code> variable via a <code>var</code> statement, and if you do:</p>

<pre><code>delete regex; //False
</code></pre>

<p>The result would be <code>false</code>, which means that your delete statement haven't been executed as you expected. But if you had not created that variable before, and you only had <code>myOtherObject["regex"]</code> as your last existing reference, you could have done this just by removing it like:</p>

<pre><code>myOtherObject["regex"] = null;
delete myOtherObject["regex"];
</code></pre>

<p><strong>In other words, a JavaScript object gets killed as soon as there is no reference left in your code pointed to that object.</strong></p>

<hr>

<p><strong>Update:</strong>
Thanks to @AgentME:</p>

<blockquote>
  <p>Setting a property to null before deleting it doesn't accomplish
  anything (unless the object has been sealed by Object.seal and the
  delete fails. That's not usually the case unless you specifically
  try).</p>
</blockquote>

<p>To get more info on <code>Object.seal</code>: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal" rel="noreferrer">Object.seal()</a></p>

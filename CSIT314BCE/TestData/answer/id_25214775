<p>A better explanation to <a href="https://stackoverflow.com/a/336868/2351696">Greg's answer</a></p>

<pre><code>functionTwo();
function functionTwo() {
}
</code></pre>

<p><strong>Why no error? We were always taught that expressions are executed from top to bottom(??)</strong></p>

<h2>Because:</h2>

<blockquote>
  <p>Function declarations and variable declarations are always moved (<code>hoisted</code>) invisibly to the top of their containing scope by the JavaScript interpreter. Function parameters and language-defined names are, obviously, already there. <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting" rel="noreferrer">ben cherry</a></p>
</blockquote>

<p>This means that code like this:</p>

<pre><code>functionOne();                  ---------------      var functionOne;
                                | is actually |      functionOne();
var functionOne = function(){   | interpreted |--&gt;
};                              |    like     |      functionOne = function(){
                                ---------------      };
</code></pre>

<p>Notice that the assignment portion of the declarations were not hoisted. Only the name is hoisted.</p>

<p><em>But in the case with function declarations, the entire function body will be hoisted as well</em>:</p>

<pre><code>functionTwo();              ---------------      function functionTwo() {
                            | is actually |      };
function functionTwo() {    | interpreted |--&gt;
}                           |    like     |      functionTwo();
                            ---------------
</code></pre>

<p>Although @zeller said it already here is an example how to use <code>tasklist</code>. As I was just looking for <strong>vanilla</strong> python alternatives...</p>

<pre><code>import subprocess

def process_exists(process_name):
    call = 'TASKLIST', '/FI', 'imagename eq %s' % process_name
    # use buildin check_output right away
    output = subprocess.check_output(call).decode()
    # check in last line for process name
    last_line = output.strip().split('\r\n')[-1]
    # because Fail message could be translated
    return last_line.lower().startswith(process_name.lower())
</code></pre>

<p>and now you can do:</p>

<pre><code>&gt;&gt;&gt; process_exists('eclipse.exe')
True

&gt;&gt;&gt; process_exists('AJKGVSJGSCSeclipse.exe')
False
</code></pre>

<p>To avoid calling this multiple times and have an overview of all the processes this way you could do something like:</p>

<pre><code># get info dict about all running processes
import subprocess
output = subprocess.check_output(('TASKLIST', '/FO', 'CSV')).decode()
# get rid of extra " and split into lines
output = output.replace('"', '').split('\r\n')
keys = output[0].split(',')
proc_list = [i.split(',') for i in output[1:] if i]
# make dict with proc names as keys and dicts with the extra nfo as values
proc_dict = dict((i[0], dict(zip(keys[1:], i[1:]))) for i in proc_list)
for name, values in sorted(proc_dict.items(), key=lambda x: x[0].lower()):
    print('%s: %s' % (name, values))
</code></pre>

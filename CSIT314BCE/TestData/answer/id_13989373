<p>There are two major approaches:</p>

<ol>
<li><p><strong>splice()</strong>: <code>anArray.splice(index, 1);</code></p></li>
<li><p><strong>delete</strong>: <code>delete anArray[index];</code></p></li>
</ol>

<p>Be careful when you use delete for an array. It is good for deleting attributes of objects, but not so good for arrays. It is better to use <code>splice</code> for arrays.</p>

<p>Keep in mind that when you use <code>delete</code> for an array you could get wrong results for <code>anArray.length</code>. In other words, <code>delete</code> would remove the element, but it wouldn't update the value of length property.</p>

<p>You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1, 3, 4, 8, 9, and 11 and length as it was before using delete. In that case, all indexed <code>for</code> loops would crash, since indexes are no longer sequential.</p>

<p>If you are forced to use <code>delete</code> for some reason, then you should use <a href="https://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript"><code>for each</code></a> loops when you need to loop through arrays. As the matter of fact, always avoid using indexed <code>for</code> loops, if possible. That way the code would be more robust and less prone to problems with indexes.</p>

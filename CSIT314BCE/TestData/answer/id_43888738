<p><strong>OK,</strong> for example you have the array below:</p>

<pre><code>var num = [1, 2, 3, 4, 5];
</code></pre>

<p>And we want to delete number 4. You can simply use the below code:</p>

<pre><code>num.splice(num.indexOf(4), 1); // num will be [1, 2, 3, 5];
</code></pre>

<p>If you are reusing this function, you write a reusable function which will be attached to the <em>native</em> array function like below:</p>

<pre><code>Array.prototype.remove = Array.prototype.remove || function(x) {
  const i = this.indexOf(x);
  if(i===-1)
      return;
  this.splice(i, 1); // num.remove(5) === [1, 2, 3];
}
</code></pre>

<p>But how about if you have the below array instead with a few [5]s in the array?</p>

<pre><code>var num = [5, 6, 5, 4, 5, 1, 5];
</code></pre>

<p>We need a loop to check them all, but an easier and more efficient way is using built-in JavaScript functions, so we write a function which use a filter like below instead:</p>

<pre><code>const _removeValue = (arr, x) =&gt; arr.filter(n =&gt; n!==x);
//_removeValue([1, 2, 3, 4, 5, 5, 6, 5], 5) // Return [1, 2, 3, 4, 6]
</code></pre>

<p>Also there are third-party libraries which do help you to do this, like Lodash or Underscore. For more information, look at lodash _.pull, _.pullAt or _.without.</p>

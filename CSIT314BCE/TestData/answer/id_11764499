<p>It's really quite, quite simple:</p>

<p>For a variable of primitive type (eg. <code>int</code>, <code>boolean</code>, <code>char</code>, etc...), when you use its name for a method argument, you are passing the value contained in it (<code>5</code>, <code>true</code>, or <code>'c'</code>). This value gets "copied", and the variable retains its value even after the method invocation.</p>

<p>For a variable of reference type (eg. <code>String</code>, <code>Object</code>, etc...), when you use its name for a method argument, you are passing the value contained in it (<em>the <strong>reference value</strong> that "points" to the object</em>). This <strong><em>reference value</em></strong> gets "copied", and the variable retains its value even after the method invocation. <strong><em>The reference variable keeps "pointing" to the same object.</em></strong></p>

<p>Either way, you're always passing stuff by value.</p>

<hr>

<p>Compare this to say C++ where you can have a method to take an <code>int&amp;</code>, or in C# where you could have take a <code>ref int</code> (although, in this case, you also have to use the <code>ref</code> modifier when passing the variable's name to the method.)</p>

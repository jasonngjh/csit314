<p>I found very clear chapter 8 section 6, "Closures," of <em>JavaScript: The Definitive Guide</em> by David Flanagan, 6th edition, O'Reilly, 2011. I'll try to paraphrase.  </p>

<ol>
<li><p>When a function is invoked, a new object is created to hold the local variables for that invocation.  </p></li>
<li><p>A function's scope depends on its declaration location, not its execution location.</p></li>
</ol>

<p>Now, assume an inner function declared within an outer function and referring to variables of that outer function. Further assume the outer function returns the inner function, as a function. Now there is an external reference to whatever values were in the inner function's scope (which, by our assumptions, includes values from the outer function).</p>

<p>JavaScript will preserve those values, as they have remained in scope of the current execution thanks to being passed out of the completed outer function. All functions are closures, but the closures of interest are the inner functions which, in our assumed scenario, preserve outer function values within their "enclosure" (I hope I'm using language correctly here) when they (the inner functions) are returned from outer functions. I know this doesn't meet the six-year-old requirement, but hopefully it is still helpful.</p>

<blockquote>
  <h2>What does the <code>if __name__ == "__main__":</code> do?</h2>
</blockquote>

<p>To outline the basics:</p>

<ul>
<li><p>The global variable, <code>__name__</code>, in the module that is the entry point to your program, is <code>'__main__'</code>. Otherwise, it's the name you import the module by.</p></li>
<li><p>So, code under the <code>if</code> block will only run if the module is the entry point to your program.</p></li>
<li><p>It allows the code in the module to be importable by other modules, without executing the code block beneath on import.</p></li>
</ul>

<hr>

<p>Why do we need this?</p>

<h2>Developing and Testing Your Code</h2>

<p>Say you're writing a Python script designed to be used as a module:</p>

<pre><code>def do_important():
    """This function does something very important"""
</code></pre>

<p>You <em>could</em> test the module by adding this call of the function to the bottom:</p>

<pre><code>do_important()
</code></pre>

<p>and running it (on a command prompt) with something like:</p>

<pre><code>~$ python important.py
</code></pre>

<h2>The Problem</h2>

<p>However, if you want to import the module to another script:</p>

<pre><code>import important
</code></pre>

<p>On import, the <code>do_important</code> function would be called, so you'd probably comment out your function call, <code>do_important()</code>, at the bottom. </p>

<pre><code># do_important() # I must remember to uncomment to execute this!
</code></pre>

<p>And then you'll have to remember whether or not you've commented out your test function call. And this extra complexity would mean you're likely to forget, making your development process more troublesome.</p>

<h2>A Better Way</h2>

<p>The <code>__name__</code> variable points to the namespace wherever the Python interpreter happens to be at the moment. </p>

<p>Inside an imported module, it's the name of that module. </p>

<p>But inside the primary module (or an interactive Python session, i.e. the interpreter's Read, Eval, Print Loop, or REPL) you are running everything from its <code>"__main__"</code>.</p>

<p>So if you check before executing:</p>

<pre><code>if __name__ == "__main__":
    do_important()
</code></pre>

<p>With the above, your code will only execute when you're running it as the primary module (or intentionally call it from another script). </p>

<h2>An Even Better Way</h2>

<p>There's a Pythonic way to improve on this, though. </p>

<p>What if we want to run this business process from outside the module?</p>

<p>If we put the code we want to exercise as we develop and test in a function like this and then do our check for <code>'__main__'</code> immediately after:</p>

<pre><code>def main():
    """business logic for when running this module as the primary one!"""
    setup()
    foo = do_important()
    bar = do_even_more_important(foo)
    for baz in bar:
        do_super_important(baz)
    teardown()

# Here's our payoff idiom!
if __name__ == '__main__':
    main()
</code></pre>

<p>We now have a final function for the end of our module that will run if we run the module as the primary module. </p>

<p>It will allow the module and its functions and classes to be imported into other scripts without running the <code>main</code> function, and will also allow the module (and its functions and classes) to be called when running from a different <code>'__main__'</code> module, i.e.</p>

<pre><code>import important
important.main()
</code></pre>

<p><a href="https://docs.python.org/2/library/__main__.html" rel="noreferrer">This idiom can also be found in the Python documentation in an explanation of the <code>__main__</code> module.</a> That text states:</p>

<blockquote>
  <p>This module represents the (otherwise anonymous) scope in which the
  interpreter’s main program executes — commands read either from
  standard input, from a script file, or from an interactive prompt. It
  is this environment in which the idiomatic “conditional script” stanza
  causes a script to run:</p>

<pre><code>if __name__ == '__main__':
    main()
</code></pre>
</blockquote>

<p>Usually, you want to <strong>undo</strong> a commit because you made a mistake and you want to fix it - essentially what the OP did when he asked the question. So really, you actually want to <strong>redo</strong> a commit.</p>

<p>Most of the answers here focus on the command line. While the command line is the best way to use Git when you're comfortable with it, its probably a bit alien to those coming from other version control systems to Git. </p>

<p>Here's how to do it using a GUI. If you have Git installed, you already have everything you need to follow these instructions.</p>

<p><strong>NOTE:</strong> I will assume here that you realised the commit was wrong before you pushed it. If you don't know what pushing means, then you probably haven't pushed. So carry on with the instructions. If you have pushed the faulty commit, the least risky way is just to follow up the faulty commit with a new commit that fixes things, the way you would do it in a version control system that does not allow you to rewrite history. </p>

<p>That said, here's how to fix your most recent fault commit using a GUI:</p>

<ol>
<li>Navigate to your repository on the command line and start the GUI with <code>git gui</code></li>
<li>Choose "Amend last commit". You will see your last commit message, the files you staged and the files you didn't.</li>
<li>Now change things to how you want them to look and click Commit. </li>
</ol>

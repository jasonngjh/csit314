<p>I just created a polyfill on the <code>Array.prototype</code> via <code>Object.defineProperty</code> to remove a desired element in an array without leading to errors when iterating over it later via <code>for .. in ..</code></p>

<pre><code>if (!Array.prototype.remove) {
  // Object.definedProperty is used here to avoid problems when iterating with "for .. in .." in Arrays
  // https://stackoverflow.com/questions/948358/adding-custom-functions-into-array-prototype
  Object.defineProperty(Array.prototype, 'remove', {
    value: function () {
      if (this == null) {
        throw new TypeError('Array.prototype.remove called on null or undefined')
      }

      for (var i = 0; i &lt; arguments.length; i++) {
        if (typeof arguments[i] === 'object') {
          if (Object.keys(arguments[i]).length &gt; 1) {
            throw new Error('This method does not support more than one key:value pair per object on the arguments')
          }
          var keyToCompare = Object.keys(arguments[i])[0]

          for (var j = 0; j &lt; this.length; j++) {
            if (this[j][keyToCompare] === arguments[i][keyToCompare]) {
              this.splice(j, 1)
              break
            }
          }
        } else {
          var index = this.indexOf(arguments[i])
          if (index !== -1) {
            this.splice(index, 1)
          }
        }
      }
      return this
    }
  })
} else {
  var errorMessage = 'DANGER ALERT! Array.prototype.remove has already been defined on this browser. '
  errorMessage += 'This may lead to unwanted results when remove() is executed.'
  console.log(errorMessage)
}
</code></pre>

<p><strong>Removing an integer value</strong></p>

<pre><code>var a = [1, 2, 3]
a.remove(2)
a // Output =&gt; [1, 3]
</code></pre>

<p><strong>Removing a string value</strong></p>

<pre><code>var a = ['a', 'ab', 'abc']
a.remove('abc')
a // Output =&gt; ['a', 'ab']
</code></pre>

<p><strong>Removing a boolean value</strong></p>

<pre><code>var a = [true, false, true]
a.remove(false)
a // Output =&gt; [true, true]
</code></pre>

<p>It is also possible to remove an object inside the array via this <code>Array.prototype.remove</code> method. You just need to specify the <code>key =&gt; value</code> of the <code>Object</code> you want to remove.</p>

<p><strong>Removing an object value</strong></p>

<pre><code>var a = [{a: 1, b: 2}, {a: 2, b: 2}, {a: 3, b: 2}]
a.remove({a: 1})
a // Output =&gt; [{a: 2, b: 2}, {a: 3, b: 2}]
</code></pre>

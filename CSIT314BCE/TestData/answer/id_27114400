<p>The statement <code>"use strict";</code> instructs the browser to use the Strict mode, which is a reduced and safer feature set of JavaScript. </p>

<h2>List of features (non-exhaustive)</h2>

<ol>
<li><p>Disallows global variables. (Catches missing <code>var</code> declarations and typos in variable names) </p></li>
<li><p>Silent failing assignments will throw error in strict mode (assigning <code>NaN = 5;</code>) </p></li>
<li><p>Attempts to delete undeletable properties will throw (<code>delete Object.prototype</code>) </p></li>
<li><p>Requires all property names in an object literal to be unique (<code>var x = {x1: "1", x1: "2"}</code>) </p></li>
<li><p>Function parameter names must be unique (<code>function sum (x, x) {...}</code>) </p></li>
<li><p>Forbids octal syntax (<code>var x = 023;</code> some devs assume wrongly that a preceding zero does nothing to change the number.) </p></li>
<li><p>Forbids the <code>with</code> keyword </p></li>
<li><p><code>eval</code> in strict mode does not introduce new variables  </p></li>
<li><p>Forbids deleting plain names (<code>delete x;</code>)</p></li>
<li><p>Forbids binding or assignment of the names <code>eval</code> and <code>arguments</code> in any form </p></li>
<li><p>Strict mode does not alias properties of the <code>arguments</code> object with the formal parameters. (i.e. in <code>function sum (a,b) { return arguments[0] + b;}</code> This works because <code>arguments[0]</code> is bound to <code>a</code> and so on. )</p></li>
<li><p><code>arguments.callee</code> is not supported</p></li>
</ol>

<p>[Ref: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="noreferrer">Strict mode</a>, <em>Mozilla Developer Network</em>]</p>

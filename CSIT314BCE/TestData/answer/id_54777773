<p>Wow! So many answers and I don't think one of them got it right...</p>

<p>1) Where and what are they (physically in a real computer's memory)?</p>

<p>The stack is memory that begins as the highest memory address allocated to your program image, and it then decrease in value from there. It is reserved for called function parameters and for all temporary variables used in functions.</p>

<p>There are two heaps: public and private.</p>

<p>The private heap begins on a 16-byte boundary (for 64-bit programs) or a 8-byte boundary (for 32-bit programs) after the last byte of code in your program, and then increases in value from there. It is also called the default heap.</p>

<p>If the private heap gets too large it will overlap the stack area, as will the stack overlap the heap if it gets too big. Because the stack starts at a higher address and works its way down to lower address, with proper hacking you can get make the stack so large that it will overrun the private heap area and overlap the code area. The trick then is to overlap enough of the code area that you can hook into the code. It's a little tricky to do and you risk a program crash, but it's easy and very effective.</p>

<p>The public heap resides in it's own memory space outside of your program image space. It is this memory that will be siphoned off onto the hard disk if memory resources get scarce.</p>

<p>2) To what extent are they controlled by the OS or language runtime?</p>

<p>The stack is controlled by the programmer, the private heap is managed by the OS, and the public heap is not controlled by anyone because it is an OS service -- you make requests and either they are granted or denied.</p>

<p>2b) What is their scope?</p>

<p>They are all global to the program, but their contents can be private, public, or global.</p>

<p>2c) What determines the size of each of them?</p>

<p>The size of the stack and the private heap are determined by your compiler runtime options. The public heap is initialized at runtime using a size parameter.</p>

<p>2d) What makes one faster?</p>

<p>They are not designed to be fast, they are designed to be useful. How the programmer utilizes them determines whether they are "fast" or "slow"</p>

<p>REF:</p>

<p><a href="https://norasandler.com/2019/02/18/Write-a-Compiler-10.html" rel="noreferrer">https://norasandler.com/2019/02/18/Write-a-Compiler-10.html</a></p>

<p><a href="https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap" rel="noreferrer">https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-getprocessheap</a></p>

<p><a href="https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate" rel="noreferrer">https://docs.microsoft.com/en-us/windows/desktop/api/heapapi/nf-heapapi-heapcreate</a></p>

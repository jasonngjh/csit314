<p>The two code snippets you've posted there will, for almost all purposes, behave the same way.</p>

<p>However, the difference in behaviour is that with the first variant (<code>var functionOne = function() {}</code>), that function can only be called after that point in the code.</p>

<p>With the second variant (<code>function functionTwo()</code>), the function is available to code that runs above where the function is declared.</p>

<p>This is because with the first variant, the function is assigned to the variable <code>foo</code> at run time. In the second, the function is assigned to that identifier, <code>foo</code>, at parse time.</p>

<p><strong>More technical information</strong></p>

<p>JavaScript has three ways of defining functions.</p>

<ol>
<li>Your first snippet shows a <strong>function expression</strong>. This involves using the <em>"function" operator</em> to create a function - the result of that operator can be stored in any variable or object property. The function expression is powerful that way. The function expression is often called an "anonymous function", because it does not have to have a name,</li>
<li>Your second example is a <strong>function declaration</strong>. This uses the <em>"function" statement</em> to create a function. The function is made available at parse time and can be called anywhere in that scope. You can still store it in a variable or object property later.</li>
<li>The third way of defining a function is the <strong>"Function()" constructor</strong>, which is not shown in your original post. It's not recommended to use this as it works the same way as <code>eval()</code>, which has its problems.</li>
</ol>

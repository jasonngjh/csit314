<p>It seems everything is call by value in java as i have tried to understand by the following program </p>

<p><strong>Class-S</strong></p>

<pre><code>class S{
String name="alam";
public void setName(String n){
this.name=n; 
}}
</code></pre>

<p><strong>Class-Sample</strong></p>

<pre><code>    public class Sample{
    public static void main(String args[]){
    S s=new S();
    S t=new S();
    System.out.println(s.name);
    System.out.println(t.name);
    t.setName("taleev");
    System.out.println(t.name);
    System.out.println(s.name);
    s.setName("Harry");
    System.out.println(t.name);
    System.out.println(s.name);
    }}
</code></pre>

<p><strong>Output</strong></p>

<blockquote>
  <p>alam</p>
  
  <p>alam</p>
  
  <p>taleev</p>
  
  <p>alam</p>
  
  <p>taleev</p>
  
  <p>harry</p>
</blockquote>

<p>As we have define class S with instance variable name with value <strong>taleev</strong> so for
all the objects that we initialize from it will have the name variable with value of <strong>taleev</strong> but if we change the name's value of any objects then it is changing the name of only that copy of the class(Object) not for every class so after that also when we do <strong>System.out.println(s.name)</strong> it is printing <strong>taleev</strong> only we can not change the name's value that we have defined originally, and the value that we are changing is the object's value not the instance variable value so once we have define instance variable we are unable to change it</p>

<p>So i think that is how it shows that java deals with <strong>values</strong> only not with the <strong>references</strong> </p>

<p>The memory allocation for the primitive variables can be understood by  <a href="http://www.informit.com/articles/article.aspx?p=31755&amp;seqNum=8" rel="nofollow noreferrer">this</a></p>

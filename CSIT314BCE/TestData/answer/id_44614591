<p>That's for sure!...</p>

<p><strong>Branch prediction</strong> makes the logic run slower, because of the switching which happens in your code! It's like you are going a straight street or a street with a lot of turnings, for sure the straight one is going to be done quicker!...</p>

<p>If the array is sorted, your condition is false at the first step: <code>data[c] &gt;= 128</code>, then becomes a true value for the whole way to the end of the street. That's how you get to the end of the logic faster. On the other hand, using an unsorted array, you need a lot of turning and processing which make your code run slower for sure...</p>

<p>Look at the image I created for you below. Which street is going to be finished faster?</p>

<p><a href="https://i.stack.imgur.com/cSmCa.jpg" rel="noreferrer"><img src="https://i.stack.imgur.com/cSmCa.jpg" alt="Branch Prediction"></a></p>

<p>So programmatically, <strong>branch prediction</strong> causes the process to be slower...</p>

<p>Also at the end, it's good to know we have two kinds of branch predictions that each is going to affect your code differently:</p>

<p><strong>1. Static</strong></p>

<p><strong>2. Dynamic</strong></p>

<p><a href="https://i.stack.imgur.com/ZfhDu.jpg" rel="noreferrer"><img src="https://i.stack.imgur.com/ZfhDu.jpg" alt="Branch Prediction"></a></p>

<blockquote>
  <p>Static branch prediction is used by the microprocessor the first time
  a conditional branch is encountered, and dynamic branch prediction is
  used for succeeding executions of the conditional branch code.</p>
  
  <p>In order to effectively write your code to take advantage of these
  rules, when writing <strong>if-else</strong> or <strong>switch</strong> statements, check the most
  common cases first and work progressively down to the least common.
  Loops do not necessarily require any special ordering of code for
  static branch prediction, as only the condition of the loop iterator
  is normally used.</p>
</blockquote>

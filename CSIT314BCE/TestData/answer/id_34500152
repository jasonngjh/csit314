<p>Both are different ways of defining a function. The difference is how the browser interprets and loads them into an execution context. </p>

<p>The first case is of function expressions which loads only when the interpreter reaches that line of code. So if you do it like the following, you will get an error that the <strong>functionOne is not a function</strong>.</p>

<pre><code>functionOne();
var functionOne = function() {
    // Some code
};
</code></pre>

<p>The reason is that on the first line no value is assigned to functionOne, and hence it is undefined. We are trying to call it as a function, and hence we are getting an error.</p>

<p>On the second line we are assigning the reference of an anonymous function to functionOne.</p>

<p>The second case is of function declarations that loads before any code is executed. So if you do like the following you won't get any error as the declaration loads before code execution.</p>

<pre><code>functionOne();
function functionOne() {
   // Some code
}
</code></pre>

<p>The <code>git reset</code> command helps you to modify either the staging area or the staging area and working tree. Git's ability to craft commits exactly like you want means that you sometimes need to undo changes to the changes you staged with <code>git add</code>.</p>

<p>You can do that by calling <code>git reset HEAD &lt;file to change&gt;</code>. You have two options to get rid of changes completely. <code>git checkout HEAD &lt;file(s) or path(s)&gt;</code> is a quick way to undo changes to your staging area and working tree.</p>

<p>Be careful with this command, however, because it removes all changes to your working tree. Git doesn't know about those changes since they've never been committed. There's no way to get those changes back once you run this command.</p>

<p>Another command at your disposal is <code>git reset --hard</code>. It is equally destructive to your working tree - any uncommitted changes or staged changes are lost after running it. Running <code>git reset -hard HEAD</code> does the same thing as <code>git checkout HEAD</code>. It just does not require a file or path to work.</p>

<p>You can use <code>--soft</code> with <code>git reset</code>. It resets the repository to the commit you specify and stages all of those changes. Any changes you have already staged are not affected, nor are the changes in your working tree.</p>

<p>Finally, you can use <code>--mixed</code> to reset the working tree without staging any changes. This also unstages any changes that are staged.</p>

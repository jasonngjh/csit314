<p>Throughout all the answers we see that Java pass-by-value or rather as @Gevorg 
wrote: "pass-by-copy-of-the-variable-value" and this is the idea that we should have in mind all the time. </p>

<p>I am focusing on examples that helped me understand the idea and it is rather addendum to previous answers.</p>

<p>From [1] In Java you always are passing arguments by copy; that is you're always creating a new instance of the value inside the function. But there are certain behaviors that can make you think you're passing by reference.</p>

<ul>
<li><p>Passing by copy: When a variable is passed to a method/function, a copy is made (sometimes we hear that when you pass primitives, you're making copies).</p></li>
<li><p>Passing by reference: When a variable is passed to a method/function, the code in the method/function operates on the original variable (You're still passing by copy, but references to values inside the complex object are parts of both versions of the variable, both the original and the version inside the function. The complex objects themselves are being copied, but the internal references are being retained)</p></li>
</ul>

<h2>Examples of Passing by copy/ by value</h2>

<p><strong>Example from [ref 1]</strong></p>

<pre><code>void incrementValue(int inFunction){
  inFunction ++;
  System.out.println("In function: " + inFunction);
}

int original = 10;
System.out.print("Original before: " + original);
incrementValue(original);
System.out.println("Original after: " + original);

We see in the console:
 &gt; Original before: 10
 &gt; In Function: 11
 &gt; Original after: 10 (NO CHANGE)
</code></pre>

<p><strong>Example from [ref 2]</strong></p>

<blockquote>
  <p>shows nicely the mechanism
  <a href="https://www.youtube.com/watch?v=W2ysz_6AyJE&amp;list=PL6C11012B1B464EC5#t=502" rel="noreferrer">watch max 5 min</a></p>
</blockquote>

<h2>(Passing by reference) pass-by-copy-of-the-variable-value</h2>

<p><strong>Example from [ref 1]</strong>
(remember that an array is an object)</p>

<pre><code>void incrementValu(int[] inFuncion){
  inFunction[0]++;
  System.out.println("In Function: " + inFunction[0]);
}

int[] arOriginal = {10, 20, 30};
System.out.println("Original before: " + arOriginal[0]);
incrementValue(arOriginal[]);
System.out.println("Original before: " + arOriginal[0]);

We see in the console:
  &gt;Original before: 10
  &gt;In Function: 11
  &gt;Original before: 11 (CHANGE)
</code></pre>

<p>The complex objects themselves are being copied, but the internal references are being retained.</p>

<p><strong>Example from[ref 3]</strong></p>

<pre><code>package com.pritesh.programs;

class Rectangle {
  int length;
  int width;

  Rectangle(int l, int b) {
    length = l;
    width = b;
  }

  void area(Rectangle r1) {
    int areaOfRectangle = r1.length * r1.width;
    System.out.println("Area of Rectangle : " 
                            + areaOfRectangle);
  }
}

class RectangleDemo {
  public static void main(String args[]) {
    Rectangle r1 = new Rectangle(10, 20);
    r1.area(r1);
  }
}
</code></pre>

<p>The area of the rectangle is 200 and the length=10 and width=20</p>

<p><strong>Last thing</strong> I would like to share was this moment of the lecture:
<strong><a href="https://www.youtube.com/watch?v=W8nNdNZ40EQ#t=1206" rel="noreferrer">Memory Allocation</a></strong>
which I found very helpful in understanding the Java passing by value or rather “pass-by-copy-of-the-variable-value” as @Gevorg has written.</p>

<ol>
<li><a href="http://www.lynda.com/Android-tutorials/Passing-arguments-reference-value/86005/94989-4.html" rel="noreferrer">REF 1 Lynda.com</a></li>
<li><a href="http://see.stanford.edu/see/courseinfo.aspx?coll=824a47e1-135f-4508-a5aa-866adcae1111" rel="noreferrer">REF 2 Professor Mehran Sahami</a>

<ul>
<li><a href="https://www.youtube.com/watch?v=W2ysz_6AyJE&amp;list=PL6C11012B1B464EC5#t=502" rel="noreferrer">watch max 5 min</a></li>
<li><a href="https://www.youtube.com/watch?v=W8nNdNZ40EQ#t=1206" rel="noreferrer">Memory Allocation</a></li>
</ul></li>
<li><a href="http://www.c4learn.com/" rel="noreferrer">REF 3 c4learn</a>

<ul>
<li><a href="http://www.c4learn.com/java/java-passing-object-as-parameter-to-method/" rel="noreferrer">passing-object-as-parameter-to-method</a></li>
</ul></li>
</ol>

<p>Like Hedgehog I think the answers are terrible. But though Hedgehog's answer might be better, I don't think it is as elegant as it could be.  The way I found to do this is by using "fetch" and "merge" with a defined strategy. Which should make it so that your local changes are preserved as long as they are not one of the files that you are trying to force an overwrite with. </p>

<h3>First do a commit of your changes</h3>

<pre><code> git add *
 git commit -a -m "local file server commit message"
</code></pre>

<h3>Then fetch the changes and overwrite if there is a conflict</h3>

<pre><code> git fetch origin master
 git merge -s recursive -X theirs origin/master
</code></pre>

<p>"-X" is an option name, and "theirs" is the value for that option. You're choosing to use "their" changes, instead of "your" changes if there is a conflict.</p>

<p>Meet the <strong>illustrated explanation</strong>: <em><a href="http://dmitryfrank.com/articles/js_closures">How do JavaScript closures work behind the scenes</a></em>.</p>

<p>The article explains how the scope objects (or <code>LexicalEnvironment</code>s) are allocated and used in an intuitive way. Like, for this simple script:</p>

<pre><code>"use strict";

var foo = 1;
var bar = 2;

function myFunc() {
  //-- Define local-to-function variables
  var a = 1;
  var b = 2;
  var foo = 3;
}

//-- And then, call it:
myFunc();
</code></pre>

<p>When executing the top-level code, we have the following arrangement of scope objects:</p>

<p><a href="https://i.stack.imgur.com/bwjyg.png"><img src="https://i.stack.imgur.com/bwjyg.png" alt="Enter image description here"></a></p>

<p>And when <code>myFunc()</code> is called, we have the following scope chain:</p>

<p><a href="https://i.stack.imgur.com/zRu5Z.png"><img src="https://i.stack.imgur.com/zRu5Z.png" alt="Enter image description here"></a></p>

<p>Understanding of how scope objects are created, used and deleted is a key to having a big picture and to understand how do closures work under the hood.</p>

<p>See the aforementioned article for all the details.</p>

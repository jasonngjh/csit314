<h2>Difference function declaration and function expression:</h2>

<p>Javascript has first class functions. This means that they can be treated just like any other variable. Functions can be passed as arguments in a function, be returned from a function, <strong>and can be stored in variables</strong>.</p>

<p>However storing function in a variable (<strong>function expression</strong>) isn't the only way to create a function, this can also be done via a <strong>function declaration</strong>. Here are the key differences:</p>

<ol>
<li>Function expressions can be anonymous whereas a function declaration must have a name. </li>
<li>Both have a name property which is used to identify the function. A function expression's name property is the name of the variable which it is bound to, whereas the name of a function declaration is simply the given name.</li>
<li>Function declarations are hoisted whereas, function expressions are not. Only the variable is hoisted to have the value of <code>undefined</code>.</li>
</ol>

<p>Here is an example:</p>

<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>try {
  functionOne();
} catch (e) {
  console.log('i cant run because im not hoisted');
}

functionTwo();

// function expression, does not get hoisted
let functionOne = function randomName() {
    // Some code
};

// function declaration, gets hoisted
function functionTwo() {
   console.log('I get hoisted');
}

try {
  randomName(); // this isn't the proper name, it is functionOne
} catch (e) {
  console.log('You cant call me with randomName my name is function one');
}</code></pre>
</div>
</div>
</p>

<p>:</p>

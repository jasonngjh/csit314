<p>The easiest use case I can think of to explain <strong>JavaScript closures</strong> is the Module Pattern. In the Module Pattern you define a function and call it immediately afterwards in what is called an Immediately Invoked Function Expression (IIFE). <strong>Everything that you write inside that function has private scope because it's defined inside the closure</strong>, thus allowing you to "simulate" privacy in JavaScript. Like so:</p>

<pre><code> var Closure = (function () {
    // This is a closure
    // Any methods, variables and properties you define here are "private"
    // and can't be accessed from outside the function.

    //This is a private variable
    var foo = "";

    //This is a private method
    var method = function(){

    }
})();
</code></pre>

<p>If, on the other hand, you'd like to make one or multiple variables or methods visible outside  the closure, you can return them inside an object literal. Like so:</p>

<pre><code>var Closure = (function () {
  // This is a closure
  // Any methods, variables and properties you define here are "private"
  // and can't be accessed from outside the function.

  //This is a private variable
  var foo = "";

  //This is a private method
  var method = function(){

  }

  //The method will be accessible from outside the closure
  return {
    method: method
  }

})();

Closure.method();
</code></pre>

<p>Hope it helps.
Regards,</p>

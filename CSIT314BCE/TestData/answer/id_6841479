<p>It's a time zone change on December 31st in Shanghai.</p>

<p>See <a href="http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;year=1927" rel="noreferrer">this page</a> for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So "1927-12-31 23:54:08" actually happened twice, and it looks like Java is parsing it as the <em>later</em> possible instant for that local date/time - hence the difference.</p>

<p>Just another episode in the often weird and wonderful world of time zones.</p>

<p><strong>EDIT:</strong> Stop press! History changes...</p>

<p>The original question would no longer demonstrate quite the same behaviour, if rebuilt with version 2013a of <a href="https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68" rel="noreferrer">TZDB</a>. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.</p>

<p>I only noticed this because I'm collecting questions like this in Noda Time, in the form of <a href="https://github.com/nodatime/nodatime/blob/master/src/NodaTime.Demo/StackOverflowExamples.cs#L68" rel="noreferrer">unit tests</a>... The test has now been changed, but it just goes to show - not even historical data is safe.</p>

<p><strong>EDIT:</strong> History has changed again...</p>

<p>In TZDB 2014f, the time of the change has moved to 1900-12-31, and it's now a mere 343 second change (so the time between <code>t</code> and <code>t+1</code> is 344 seconds, if you see what I mean).</p>

<p><strong>EDIT:</strong> To answer a question around a transition at 1900... it looks like the Java timezone implementation treats <em>all</em> time zones as simply being in their standard time for any instant before the start of 1900 UTC:</p>

<pre><code>import java.util.TimeZone;

public class Test {
    public static void main(String[] args) throws Exception {
        long startOf1900Utc = -2208988800000L;
        for (String id : TimeZone.getAvailableIDs()) {
            TimeZone zone = TimeZone.getTimeZone(id);
            if (zone.getRawOffset() != zone.getOffset(startOf1900Utc - 1)) {
                System.out.println(id);
            }
        }
    }
}
</code></pre>

<p>The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn't rely on any idea of a "fixed" standard time (which is what <code>getRawOffset</code> assumes to be a valid concept) so other libraries needn't introduce this artificial transition.</p>

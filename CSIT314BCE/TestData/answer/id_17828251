<p>In the sorted case, you can do better than relying on successful branch prediction or any branchless comparison trick: completely remove the branch.</p>

<p>Indeed, the array is partitioned in a contiguous zone with <code>data &lt; 128</code> and another with <code>data &gt;= 128</code>. So you should find the partition point with a <a href="https://en.wikipedia.org/wiki/Dichotomic_search" rel="noreferrer">dichotomic search</a> (using <code>Lg(arraySize) = 15</code> comparisons), then do a straight accumulation from that point.</p>

<p>Something like (unchecked)</p>

<pre><code>int i= 0, j, k= arraySize;
while (i &lt; k)
{
  j= (i + k) &gt;&gt; 1;
  if (data[j] &gt;= 128)
    k= j;
  else
    i= j;
}
sum= 0;
for (; i &lt; arraySize; i++)
  sum+= data[i];
</code></pre>

<p>or, slightly more obfuscated</p>

<pre><code>int i, k, j= (i + k) &gt;&gt; 1;
for (i= 0, k= arraySize; i &lt; k; (data[j] &gt;= 128 ? k : i)= j)
  j= (i + k) &gt;&gt; 1;
for (sum= 0; i &lt; arraySize; i++)
  sum+= data[i];
</code></pre>

<p>A yet faster approach, that gives an <strong>approximate</strong> solution for both sorted or unsorted is: <code>sum= 3137536;</code> (assuming a truly uniform distribution, 16384 samples with expected value 191.5) <strong>:-)</strong></p>

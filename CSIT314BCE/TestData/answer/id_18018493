<p>DISCLAIMER: YOUR WARRANTY IS VOID</p>

<p>As has been pointed out, this hack takes advantage of the implementation of the spec. Not all JSON parsers will understand this sort of JSON. Streaming parsers in particular will choke.</p>

<p>It's an interesting curiosity, but you <strong>should really not be using it for anything at all</strong>. Below is the original answer.</p>

<hr>

<p>I've found a little hack that allows you to place comments in a JSON file that will not affect the parsing, or alter the data being represented in any way.</p>

<p>It appears that when declaring an object literal you can specify two values with the same key, and the last one takes precedence. Believe it or not, it turns out that JSON parsers work the same way. So we can use this to create comments in the source JSON that will not be present in a parsed object representation. </p>

<pre><code>({a: 1, a: 2});
// =&gt; Object {a: 2}
Object.keys(JSON.parse('{"a": 1, "a": 2}')).length; 
// =&gt; 1
</code></pre>

<p>If we apply this technique, your commented JSON file might look like this:</p>

<pre><code>{
  "api_host" : "The hostname of your API server. You may also specify the port.",
  "api_host" : "hodorhodor.com",

  "retry_interval" : "The interval in seconds between retrying failed API calls",
  "retry_interval" : 10,

  "auth_token" : "The authentication token. It is available in your developer dashboard under 'Settings'",
  "auth_token" : "5ad0eb93697215bc0d48a7b69aa6fb8b",

  "favorite_numbers": "An array containing my all-time favorite numbers",
  "favorite_numbers": [19, 13, 53]
}
</code></pre>

<p>The above code is <a href="http://jsonlint.com/" rel="noreferrer">valid JSON</a>. If you parse it, you'll get an object like this:</p>

<pre><code>{
    "api_host": "hodorhodor.com",
    "retry_interval": 10,
    "auth_token": "5ad0eb93697215bc0d48a7b69aa6fb8b",
    "favorite_numbers": [19,13,53]
}
</code></pre>

<p>Which means there is no trace of the comments, and they won't have weird side-effects.</p>

<p>Happy hacking!</p>

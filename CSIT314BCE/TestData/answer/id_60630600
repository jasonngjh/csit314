<p>Python has a ternary form for assignments; however there may be even a shorter form that people should be aware of.</p>

<p>It's very common to need to assign to a variable one value or another depending on a condition.</p>

<pre><code>&gt;&gt;&gt; li1 = None
&gt;&gt;&gt; li2 = [1, 2, 3]
&gt;&gt;&gt; 
&gt;&gt;&gt; if li1:
...     a = li1
... else:
...     a = li2
...     
&gt;&gt;&gt; a
[1, 2, 3]
</code></pre>

<p>^ This is the long form for doing such assignments.</p>

<p>Below is the ternary form. But this isn't most succinct way - see last example.</p>

<pre><code>&gt;&gt;&gt; a = li1 if li1 else li2
&gt;&gt;&gt; 
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; 
</code></pre>

<p>With Python, you can simply use <code>or</code> for alternative assignments.</p>

<pre><code>&gt;&gt;&gt; a = li1 or li2
&gt;&gt;&gt; 
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; 
</code></pre>

<p>The above works since <code>li1</code> is <code>None</code> and the interp treats that as False in logic expressions. The interp then moves on and evaluates the second expression, which is not <code>None</code> and it's not an empty list - so it gets assigned to a.</p>

<p>This also works with empty lists. For instance, if you want to assign <code>a</code> whichever list has items.</p>

<pre><code>&gt;&gt;&gt; li1 = []
&gt;&gt;&gt; li2 = [1, 2, 3]
&gt;&gt;&gt; 
&gt;&gt;&gt; a = li1 or li2
&gt;&gt;&gt; 
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; 
</code></pre>

<p>Knowing this, you can simply such assignments whenever you encounter them. This also works with strings and other iterables. You could assign <code>a</code> whichever string isn't empty.</p>

<pre><code>&gt;&gt;&gt; s1 = ''
&gt;&gt;&gt; s2 = 'hello world'
&gt;&gt;&gt; 
&gt;&gt;&gt; a = s1 or s2
&gt;&gt;&gt; 
&gt;&gt;&gt; a
'hello world'
&gt;&gt;&gt; 
</code></pre>

<p>I always liked the C ternary syntax, but Python takes it a step further!</p>

<p>I understand that some may say this isn't a good stylistic choice because it relies on mechanics that aren't immediately apparent to all developers. I personally disagree with that viewpoint. Python is a syntax rich language with lots of idiomatic tricks that aren't immediately apparent to the dabler. But the more you learn and understand the mechanics of the underlying system, the more you appreciate it.</p>

<p>After changing the model architecture and the optimizer to Adagrad, I was able to improve the results to some extent. </p>

<p><strong>Reason for using Adagrad optimizer here is:</strong></p>

<p>It adapts the learning rate to the parameters, performing smaller updates
(i.e. low learning rates) for parameters associated with frequently occurring features, and larger updates (i.e. high learning rates) for parameters associated with infrequent features. For this reason, it is well-suited for dealing with sparse data.</p>

<p>Please refer to the <strong>code</strong> below:</p>

<pre class="lang-py prettyprint-override"><code>model = Sequential()
model.add(LSTM(units=100,return_sequences=True, kernel_initializer='random_uniform', input_shape=(x_train.shape[1], x_train.shape[2])))
model.add(Dropout(0.2))
model.add(LSTM(units=100,return_sequences=True, kernel_initializer='random_uniform'))
model.add(LSTM(units=100,return_sequences=True, kernel_initializer='random_uniform'))
model.add(Dropout(0.20))
model.add(Dense(units=25, activation='relu'))
model.add(Dense(y_train.shape[1]))

# compile model
model.compile(loss="mse", optimizer='adagrad', metrics=['accuracy'])
model.summary()
</code></pre>

<p>Stock prediction is a very challenging task so rather than sticking to a single model's prediction, we can have several models working together to make a prediction and then based on the maximum voted outcome take the call, similar to an ensemble learning approach. Also, we can stack a few models together like:</p>

<ol>
<li><p>Deep Feed-forward Auto-Encoder Neural Network to reduce dimension + Deep Recurrent Neural Network + ARIMA + Extreme Boosting Gradient Regressor</p></li>
<li><p>Adaboost + Bagging + Extra Trees + Gradient Boosting + Random Forest + XGB</p></li>
</ol>

<p>Reinforcement learning agents are doing pretty good in the Stock Prediction like:</p>

<ol>
<li>Turtle-trading agent</li>
<li>Moving-average agent</li>
<li>Signal rolling agent</li>
<li>Policy-gradient agent</li>
<li>Q-learning agent</li>
<li>Evolution-strategy agent</li>
</ol>

<p>Please find a very resourceful link <a href="https://github.com/huseinzol05/Stock-Prediction-Models" rel="nofollow noreferrer">here</a>.</p>

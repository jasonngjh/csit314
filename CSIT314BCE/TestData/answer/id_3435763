<p>Speaking about the global context, both, the <code>var</code> statement and a <code>FunctionDeclaration</code> at the end will create a <em>non-deleteable</em> property on the global object, but the value of both <em>can be overwritten</em>.</p>

<p>The subtle difference between the two ways is that when the <a href="http://bclary.com/2004/11/07/#a-10.1.3" rel="noreferrer">Variable Instantiation</a> process runs (before the actual code execution) all identifiers declared with <code>var</code> will be initialized with <code>undefined</code>, and the ones used by the <code>FunctionDeclaration</code>'s will be available since that moment, for example:</p>

<pre><code> alert(typeof foo); // 'function', it's already available
 alert(typeof bar); // 'undefined'
 function foo () {}
 var bar = function () {};
 alert(typeof bar); // 'function'
</code></pre>

<p>The assignment of the <code>bar</code> <code>FunctionExpression</code> takes place until runtime.</p>

<p>A global property created by a <code>FunctionDeclaration</code> can be overwritten without any problems just like a variable value, e.g.:</p>

<pre><code> function test () {}
 test = null;
</code></pre>

<p>Another obvious difference between your two examples is that the first function doesn't have a name, but the second has it, which can be really useful when debugging (i.e. inspecting a call stack).</p>

<p>About your edited first example (<code>foo = function() { alert('hello!'); };</code>), it is an undeclared assignment, I would highly encourage you to always use the <code>var</code> keyword.</p>

<p>With an assignment, without the <code>var</code> statement, if the referenced identifier is not found in the scope chain, it will become a <em>deleteable</em> property of the global object.</p>

<p>Also, undeclared assignments throw a <code>ReferenceError</code> on ECMAScript 5 under <a href="http://dmitrysoshnikov.com/ecmascript/es5-chapter-2-strict-mode/" rel="noreferrer">Strict Mode</a>.</p>

<p>A must read:</p>

<ul>
<li><a href="http://kangax.github.com/nfe/" rel="noreferrer">Named function expressions demystified</a></li>
</ul>

<p><strong>Note</strong>: This answer has been merged from <a href="https://stackoverflow.com/questions/3435709/why-are-functions-in-javascript-set-to-global-variables-instead-of-plain-function">another question</a>, in which the major doubt and misconception from the OP was that identifiers declared with a <code>FunctionDeclaration</code>, couldn't be overwritten which is not the case.</p>

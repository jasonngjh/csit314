<p>Many people use <code>return</code> rather than <code>yield</code>, but in some cases <code>yield</code> can be more efficient and easier to work with.</p>

<p>Here is an example which <code>yield</code> is definitely best for:</p>

<blockquote>
  <p><strong>return</strong> (in function)</p>
</blockquote>

<pre><code>import random

def return_dates():
    dates = [] # With 'return' you need to create a list then return it
    for i in range(5):
        date = random.choice(["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th"])
        dates.append(date)
    return dates
</code></pre>

<blockquote>
  <p><strong>yield</strong> (in function)</p>
</blockquote>

<pre><code>def yield_dates():
    for i in range(5):
        date = random.choice(["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th"])
        yield date # 'yield' makes a generator automatically which works
                   # in a similar way. This is much more efficient.
</code></pre>

<blockquote>
  <p><strong>Calling functions</strong></p>
</blockquote>

<pre><code>dates_list = return_dates()
print(dates_list)
for i in dates_list:
    print(i)

dates_generator = yield_dates()
print(dates_generator)
for i in dates_generator:
    print(i)
</code></pre>

<p>Both functions do the same thing, but <code>yield</code> uses three lines instead of five and has one less variable to worry about.</p>

<blockquote>
  <blockquote>
    <p><strong>This is the result from the code:</strong></p>
  </blockquote>
</blockquote>

<p><a href="https://i.stack.imgur.com/iUFNJ.png" rel="noreferrer"><img src="https://i.stack.imgur.com/iUFNJ.png" alt="Output"></a></p>

<p>As you can see both functions do the same thing. The only difference is <code>return_dates()</code> gives a list and <code>yield_dates()</code> gives a generator.</p>

<p>A real life example would be something like reading a file line by line or if you just want to make a generator.</p>

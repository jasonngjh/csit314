<p>You can imagine this declaration</p>

<pre><code>const char* a = "Anthony";
</code></pre>

<p>the following way</p>

<pre><code>const char string_literal[] = "Anthony";

const char *a = string_literal;
</code></pre>

<p>That is the compiler creates an array of characters with the static storage duration that stores the string <code>"Anthony"</code> and the address of the first character of the array (due to the implicit conversion of array designators to pointers to their first characters) is assigned to the pointer <code>a</code>.</p>

<p>Here is a demonstrative program that shows that string literals are character arrays.</p>

<pre><code>#include &lt;iostream&gt;
#include &lt;type_traits&gt;

decltype( auto ) f()
{
    return ( "Anthony" );
}

template &lt;size_t N&gt;
void g( const char ( &amp;s )[N] )
{
    std::cout &lt;&lt; s &lt;&lt; '\n';
}

int main() 
{
    decltype( auto ) r = f();

    std::cout &lt;&lt; "The size of the referenced array is "
              &lt;&lt; std::extent&lt;std::remove_reference&lt;decltype( r )&gt;::type&gt;::value
              &lt;&lt; '\n';

    g( r );

    return 0;
}
</code></pre>

<p>The program output is</p>

<pre><code>The size of the referenced array is 8
Anthony
</code></pre>

<p>The size of the string literal (of the array that stores the string literal) is equal to <code>8</code> because the string includes also the terminating zero character '<code>\0'</code>.</p>

<p>In the demonstrative program the expression </p>

<pre><code>std::extent&lt;std::remove_reference&lt;decltype( r )&gt;::type&gt;::value
</code></pre>

<p>may be substituted for just the expression</p>

<pre><code>sizeof( r )
</code></pre>

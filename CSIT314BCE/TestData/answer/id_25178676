<p>On this question there are a lot of answers, but none of them explains in super detail how to change older commit messages using <a href="http://en.wikipedia.org/wiki/Vim_%28text_editor%29" rel="nofollow noreferrer">Vim</a>. I was stuck trying to do this myself, so here I'll write down in detail how I did this especially for people who have no experience in Vim!</p>

<p>I wanted to change my five latest commits that I already pushed to the server. This is quite 'dangerous' because if someone else already pulled from this, you can mess things up by changing the commit messages. However, when you’re working on your own little branch and are sure no one pulled it you can change it like this:</p>

<p>Let's say you want to change your five latest commits, and then you type this in the terminal:</p>

<pre><code>git rebase -i HEAD~5
</code></pre>

<p>*Where 5 is the number of commit messages you want to change (so if you want to change the 10th to last commit, you type in 10).</p>

<p>This command will get you into Vim there you can ‘edit’ your commit history. You’ll see your last five commits at the top like this:</p>

<pre><code>pick &lt;commit hash&gt; commit message
</code></pre>

<p>Instead of <code>pick</code> you need to write <code>reword</code>. You can do this in Vim by typing in <code>i</code>. That makes you go in to <em>insert</em> mode. (You see that you’re in insert mode by the word <em>INSERT</em> at the bottom.) For the commits you want to change, type in <code>reword</code> instead of <code>pick</code>.</p>

<p>Then you need to save and quit this screen. You do that by first going in to ‘command-mode’ by pressing the <kbd>Esc</kbd>button (you can check that you’re in command-mode if the word <em>INSERT</em> at the bottom has disappeared). Then you can type in a command by typing <code>:</code>. The command to save and quit is <code>wq</code>. So if you type in <code>:wq</code> you’re on the right track.</p>

<p>Then Vim will go over every commit message you want to reword, and here you can actually change the commit messages. You’ll do this by going into insert mode, changing the commit message, going into the command-mode, and save and quit. Do this five times and you’re out of Vim!</p>

<p>Then, if you already pushed your wrong commits, you need to <code>git push --force</code> to overwrite them. Remember that <code>git push --force</code> is quite a dangerous thing to do, so make sure that no one pulled from the server since you pushed your wrong commits!</p>

<p>Now you have changed your commit messages!</p>

<p>(As you see, I'm not that experienced in Vim, so if I used the wrong 'lingo' to explain what's happening, feel free to correct me!)</p>

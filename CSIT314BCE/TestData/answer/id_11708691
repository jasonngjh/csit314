<p>I have tried a lot of ways to revert local changes in Git, and it seems that this works the best if you just want to revert to the latest commit state. </p>

<pre><code>git add . &amp;&amp; git checkout master -f
</code></pre>

<p>Short description: </p>

<ul>
<li>It will NOT create any commits as <code>git revert</code> does.</li>
<li>It will NOT detach your HEAD like <code>git checkout &lt;commithashcode&gt;</code> does.</li>
<li>It WILL override all your local changes and DELETE all added files since the last commit in the branch.</li>
<li>It works only with branches names, so you can revert only to latest commit in the branch this way.</li>
</ul>

<p>I found a much more convenient and simple way to achieve the results above: </p>

<pre><code>git add . &amp;&amp; git reset --hard HEAD
</code></pre>

<p>where HEAD points to the latest commit at you current branch.</p>

<p>It is the same code code as boulder_ruby suggested, but I have added <code>git add .</code> before  <code>git reset --hard HEAD</code> to erase all new files created since the last commit since this is what most people expect I believe when reverting to the latest commit.</p>

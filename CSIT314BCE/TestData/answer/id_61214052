<p>From the python 3 documentation:</p>

<blockquote>
  <p>Code that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection:</p>
</blockquote>

<p><strong>Iterate over a copy</strong></p>

<pre class="lang-py prettyprint-override"><code>s = {0}
s2 = s.copy()
for i in s2:
     s.add(i + 1)
     s.remove(i)
</code></pre>

<p>which should iterate only 1 time</p>

<pre><code>&gt;&gt;&gt; print(s)
{1}
&gt;&gt;&gt; print(s2)
{0}
</code></pre>

<p>Edit:
A Possible reason for this iteration is because a set is unordered, causing some kind of stack trace sort of thing. If you do it with a list and not a set, then it will just end, with <code>s = [1]</code> because lists are ordered so the for loop will start with index 0 and then move on to the next index, finding that there isn't one, and exiting the loop.</p>

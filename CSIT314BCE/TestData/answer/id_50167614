<p>Here are a few ways to <strong>remove an item from an array using JavaScript</strong>.</p>

<p>All the method described <strong>do not mutate the original array</strong>, and instead create a new one.</p>

<h2>If you know the index of an item</h2>

<p>Suppose you have an array, and you want to remove an item in position <code>i</code>.</p>

<p>One method is to use <code>slice()</code>:</p>

<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const i = 3
const filteredItems = items.slice(0, i).concat(items.slice(i+1, items.length))

console.log(filteredItems)</code></pre>
</div>
</div>
</p>

<p><code>slice()</code> creates a new array with the indexes it receives. We simply create a new array, from start to the index we want to remove, and concatenate another array from the first position following the one we removed to the end of the array.</p>

<h2>If you know the value</h2>

<p>In this case, one good option is to use <code>filter()</code>, which offers a more <em>declarative</em> approach:</p>

<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const valueToRemove = 'c'
const filteredItems = items.filter(item =&gt; item !== valueToRemove)

console.log(filteredItems)</code></pre>
</div>
</div>
</p>

<p>This uses the ES6 arrow functions. You can use the traditional functions to support older browsers:</p>

<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const valueToRemove = 'c'
const filteredItems = items.filter(function(item) {
  return item !== valueToRemove
})

console.log(filteredItems)</code></pre>
</div>
</div>
</p>

<p>or you can use Babel and transpile the ES6 code back to ES5 to make it more digestible to old browsers, yet write modern JavaScript in your code.</p>

<h2>Removing multiple items</h2>

<p>What if instead of a single item, you want to remove many items?</p>

<p>Let's find the simplest solution.</p>

<h3>By index</h3>

<p>You can just create a function and remove items in series:</p>

<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']

const removeItem = (items, i) =&gt;
  items.slice(0, i-1).concat(items.slice(i, items.length))

let filteredItems = removeItem(items, 3)
filteredItems = removeItem(filteredItems, 5)
//["a", "b", "c", "d"]

console.log(filteredItems)</code></pre>
</div>
</div>
</p>

<h3>By value</h3>

<p>You can search for inclusion inside the callback function:</p>

<p><div class="snippet" data-lang="js" data-hide="false" data-console="true" data-babel="false">
<div class="snippet-code">
<pre class="snippet-code-js lang-js prettyprint-override"><code>const items = ['a', 'b', 'c', 'd', 'e', 'f']
const valuesToRemove = ['c', 'd']
const filteredItems = items.filter(item =&gt; !valuesToRemove.includes(item))
//Â ["a", "b", "e", "f"]

console.log(filteredItems)</code></pre>
</div>
</div>
</p>

<h2>Avoid mutating the original array</h2>

<p><code>splice()</code> (not to be confused with <code>slice()</code>) mutates the original array, and should be avoided.</p>

<p>(originally posted at <a href="https://flaviocopes.com/how-to-remove-item-from-array/" rel="noreferrer">https://flaviocopes.com/how-to-remove-item-from-array/</a>)</p>

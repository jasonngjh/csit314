<p>Java always uses <strong>call by value</strong>. That means the method gets copy of all parameter values.</p>

<p>Consider next 3 situations:</p>

<h2>1) Trying to change primitive variable</h2>

<pre><code>public static void increment(int x) { x++; }

int a = 3;
increment(a);
</code></pre>

<p>x will copy value of a and will increment x, a remains the same</p>

<h2>2) Trying to change primitive field of an object</h2>

<pre><code>public static void increment(Person p) { p.age++; }

Person pers = new Person(20); // age = 20
increment(pers);
</code></pre>

<p>p will copy reference value of pers and will increment age field, variables are referencing to the same object so age is changed</p>

<h2>3) Trying to change reference value of reference variables</h2>

<pre><code>public static void swap(Person p1, Person p2) {
    Person temp = p1;
    p1 = p2;
    p2 = temp;
}

Person pers1 = new Person(10);
Person pers2 = new Person(20);
swap(pers1, pers2);
</code></pre>

<p>after calling swap p1, p2 copy reference values from pers1 and pers2, are swapping with values, so pers1 and pers2 remain the same</p>

<p>So. you can change only fields of objects in method passing copy of reference value to this object.</p>

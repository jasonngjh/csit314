<p>Ternary conditional operator simply allows testing a condition in a single line replacing the multiline if-else making the code compact.</p>

<h3>Syntax :</h3>

<blockquote>
  <p>[on_true] if [expression] else [on_false] </p>
</blockquote>

<h3>1- Simple Method to use ternary operator:</h3>

<pre><code># Program to demonstrate conditional operator
a, b = 10, 20
# Copy value of a in min if a &lt; b else copy b
min = a if a &lt; b else b
print(min)  # Output: 10
</code></pre>

<h3>2- Direct Method of using tuples, Dictionary, and lambda:</h3>

<pre><code># Python program to demonstrate ternary operator
a, b = 10, 20
# Use tuple for selecting an item
print( (b, a) [a &lt; b] )
# Use Dictionary for selecting an item
print({True: a, False: b} [a &lt; b])
# lamda is more efficient than above two methods
# because in lambda  we are assure that
# only one expression will be evaluated unlike in
# tuple and Dictionary
print((lambda: b, lambda: a)[a &lt; b]()) # in output you should see three 10
</code></pre>

<h3>3- Ternary operator can be written as nested if-else:</h3>

<pre><code># Python program to demonstrate nested ternary operator
a, b = 10, 20
print ("Both a and b are equal" if a == b else "a is greater than b"
        if a &gt; b else "b is greater than a")
</code></pre>

<p>Above approach can be written as:</p>

<pre><code># Python program to demonstrate nested ternary operator
a, b = 10, 20
if a != b:
    if a &gt; b:
        print("a is greater than b")
    else:
        print("b is greater than a")
else:
    print("Both a and b are equal") 
# Output: b is greater than a
</code></pre>

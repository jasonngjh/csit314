11227809><2017-11-16 04:45:37><Just for the record. On Windows / VS2017 / i7-6700K 4GHz there is NO difference between two versions. It takes 0.6s for both cases. If number of iterations in the external loop is increased 10 times the execution time increases 10 times too to 6s in both cases.><mp31415
11227809><2017-12-26 15:14:57><@user194715: any compiler that uses a <code>cmov</code> or other branchless implementation (like auto-vectorization with <code>pcmpgtd</code>) will have performance that&#39;s not data dependent on any CPU.  But if it&#39;s branchy, it will be sort-dependent on any CPU with out-of-order speculative execution.  (Even high-performance in-order CPUs use branch-prediction to avoid fetch/decode bubbles on taken branches; the miss penalty is smaller).><PeterCordes
11227809><2018-01-05 22:21:47><<a href="https://meltdownattack.com/" rel="nofollow noreferrer">Woops... re: Meltdown and Spectre</a>><KyleMit
11227809><2018-01-10 14:26:02><@KyleMit does it have something to do with both? I haven&#39;t read much on both><mohitmun
11227809><2018-01-10 22:26:37><@mohitmun, both of those security flaws fit into a broad category of vulnerabilities classified as <a href="https://security.googleblog.com/2018/01/more-details-about-mitigations-for-cpu_4.html" rel="nofollow noreferrer">“branch target injection” attacks</a>><KyleMit
11227809><2018-01-18 02:15:38><Tried it with 200M array on JVM hotspot 1.8. No difference for sorted and unsorted. Any explainations?><SachinVerma
11227809><2019-12-29 23:58:59><@KyleMit just to add clarification, I do not believe Meltdown classifies as a branch target injection attack, since Meltdown only deals with loading processor cache memory from some other process. Perhaps you meant just Spectre is a branch target injection attack, as in the paper you linked, it states that Spectre (alone) is a branch target injection attack.><dddJewelsbbb
11227877><2014-09-24 02:58:12><Does branch prediction work better on sorted arrays vs. arrays with different patterns?  For example, for the array --&gt; { 10, 5, 20, 10, 40, 20, ... } the next element in the array from the pattern is 80.  Would this kind of array be sped up by branch prediction in which the next element is 80 here if the pattern is followed?  Or does it usually only help with sorted arrays?><AdamFreeman
11227877><2014-10-30 15:51:58><So basically everything I conventionally learned about big-O is out of the window?  Better to incur a sorting cost than a branching cost?><AgrimPathak
11227877><2014-10-30 18:14:12><@AgrimPathak That depends. For not too large input, an algorithm with higher complexity is faster than an algorithm with lower complexity when the constants are smaller for the algorithm with higher complexity. Where the break-even point is can be hard to predict. Also, <a href="http://stackoverflow.com/questions/14023988/why-is-processing-a-sorted-array-slower-than-an-unsorted-array?lq=1">compare this</a>, locality is important. Big-O is important, but it is not the sole criterion for performance.><DanielFischer
11227877><2014-11-09 21:37:18><When does branch prediction takes place? When does language will know that array is sorted? I&#39;m thinking of situation of array that looks like: [1,2,3,4,5,...998,999,1000, 3, 10001, 10002] ? will this obscure 3 increase running time? Will it be as long as unsorted array?><FilipBartuzi
11227877><2014-11-09 21:49:37><@FilipBartuzi Branch prediction takes place in the processor, below the language level (but the language may offer ways to tell the compiler what&#39;s likely, so the compiler can emit code suited to that). In your example, the out-of-order 3 will lead to a branch-misprediction (for appropriate conditions, where 3 gives a different result than 1000), and thus processing that array will likely take a couple dozen or hundred nanoseconds longer than a sorted array would, hardly ever noticeable. What costs time is i high rate of mispredictions, one misprediction per 1000 isn&#39;t much.><DanielFischer
11227877><2015-05-01 12:02:56><@AdamFreeman - Sorting is relevant here only inasmuch as <i>in this code</i> it increases branch prediction to 100% success.><PeterWone
11227877><2017-05-26 01:51:33><I would recommend a look at: <a href="https://en.wikibooks.org/wiki/Optimizing_C%2B%2B/Writing_efficient_code/Performance_improving_features" rel="nofollow noreferrer">en.wikibooks.org/wiki/Optimizing_C%2B%2B/Writing_efficient_c&zwnj;&#8203;ode/&hellip;</a>  which provides a good discussion with examples of this topic including some that are not mentioned in any comments that i have seen regarding this question.><Drt
11227877><2017-09-15 22:16:54><@DanielFischer does compiler knows which array is sorted and which one is not?><IndianKing
11227877><2017-10-14 05:43:01><@AnandTyagi As Peter Wone noted, it&#39;s not that the compiler knows which array is sorted or not. Imagine an extremely simple branch predictor that takes the same path as the previous iteration, e.g. a train taking a left if it took a left last time, and vice versa. For a sorted array of 256 ints, (ignoring the undefined first iteration), the prediction would be correct from 2-128, wrong at 129, and then correct from 130-256. Now, that&#39;s a terrible branch predictor that would only work in this specific situation, but a really good predictor should still handle this capably.><knickum
11227902><2012-07-11 01:08:39><@phonetagger Take a look at this followup question: <a href="http://stackoverflow.com/questions/11276291/why-cant-or-doesnt-the-compiler-optimize-a-predictable-addition-loop-into-a" title="why cant or doesnt the compiler optimize a predictable addition loop into a">stackoverflow.com/questions/11276291/&hellip;</a> The Intel Compiler came pretty close to completely getting rid of the outer loop.><Mysticial
11227902><2013-08-06 17:07:38><@Mysticial How does the train/compiler know that it has enter the wrong path ?><onmyway133
11227902><2013-08-19 04:57:43><Under the modern C and C++ standards, the shifting hack is actually not implementation-defined behavior, but undefined behavior! Shifting a <code>1</code> in or out of the sign bit of a signed integer is no longer permissible.><PhilMiller
11227902><2013-08-19 05:04:38><@Novelocrat Only half of that is correct. Shifting a 1 into the sign-bit when it is zero is indeed UB. That&#39;s because it&#39;s signed integer overflow. But shifting a 1 out of the sign-bit is IB. Right-shifting a negative signed integer is IB. You can go into the argument that that C/C++ doesn&#39;t require that the top bit be the sign indicator. But implementation details are IB.><Mysticial
11227902><2014-01-24 18:15:57><@Mystical readability of the &#39;hack&#39; can be increased by introducing a method. E.g. in java <code>private int sumIfGreaterThan128(int curSum, int value)</code>. The JIT compiler will inline it at runtime anyway. I guess in other languages there are equal optimizations available.><Ren233
11237235><2012-10-11 11:12:02><@WiSaGaN The code demonstrates nothing, because your two pieces of code compile to the same machine code.  It&#39;s critically important that people don&#39;t get the idea that somehow the if statement in your example is different from the terenary in your example.  It&#39;s true that you own up to the similarity in your last paragraph, but that doesn&#39;t erase the fact that the rest of the example is harmful.><CodeGeek
11237235><2012-10-11 11:18:22><For example, I have no idea if the benchmarks at the top of your post are compiled with optimizations or not.  Obviously this is important.  If there&#39;s a difference in speed when compiled with optimizations, that would be interesting, especially if you could explain the difference by pointing to differences in the generated code.><Alice
11237235><2012-10-11 11:23:37><@JustinL. OP&#39;s code can not be optimized by VS2010 compiler, the test was done in release mode.><AgrimPathak
11237235><2012-10-11 12:13:03><@WiSaGaN My downvote would definitely turn into an upvote if you modified your answer to remove the misleading <code>-O0</code> example and to show the difference in <i>optimized</i> asm on your two testcases.><rahs
11237235><2013-09-14 04:12:16><@WiSaGaN What do you mean it can&#39;t be optimized it was done in release mode? You can specify the optimization to be used in your solution/proejct configuration regardless of what &quot;mode&quot; you build unless they magically removed that from VS2010... <a href="http://msdn.microsoft.com/en-us/library/fwkeyyhe.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/fwkeyyhe.aspx</a>><SachinVerma
11237235><2013-09-14 23:18:02><@UpAndAdam At the moment of the test, VS2010 can&#39;t optimize the original branch into a conditional move even when specifying high optimization level, while gcc can.><IndianKing
11237235><2013-09-16 22:43:48><@WiSaGaN gotcha, thanks didn&#39;t realize it was just a short coming of the optimizations VS can make as a whole. From your comment it sounded like it had to do with the compilation mode. As you can guess I&#39;m not a very heavy windows and VS user anymore><Drt
11237235><2015-09-01 13:51:20><This ternary operator trick works beautifully for Java. After reading Mystical&#39;s answer, I was wondering what could be done for Java to avoid false branch prediction since Java doesn&#39;t have anything equivalent to -O3. ternary operator: 2.1943s and original: 6.0303s.><rahs
11303693><2012-10-11 09:48:01><If you want to cheat, you might as well take the multiplication outside the loop and do sum*=100000 after the loop.><SachinVerma
11303693><2013-03-04 20:59:11><@Michael - I believe that this example is actually an example of <a href="http://en.wikipedia.org/wiki/Loop-invariant_code_motion" rel="nofollow noreferrer">loop-invariant hoisting</a> (LIH) optimization, and NOT <a href="http://en.wikipedia.org/wiki/Loop_interchange" rel="nofollow noreferrer">loop swap</a>. In this case, the entire inner loop is independent of the outer loop and can therefore be hoisted out of the outer loop, whereupon the result is simply multiplied by a sum over <code>i</code> of one unit =1e5. It makes no difference to the end result, but I just wanted to set the record straight since this is such a frequented page.><AdamFreeman
11303693><2013-05-15 19:57:16><Although not in the simple spirit of swapping loops, the inner <code>if</code> at this point could be converted to:  <code>sum += (data[j] &gt;= 128) ? data[j] * 100000 : 0;</code> which the compiler may be able to reduce to <code>cmovge</code> or equivalent.><AndonM.Coleman
11303693><2016-06-22 23:45:19><The outer loop is to make the time taken by inner loop large enough to profile. So why would you loop swap. At the end, that loop will be removed anyways.><AdamFreeman
11303693><2016-12-29 21:58:53><@saurabheights: Wrong question: why would the compiler NOT loop swap. Microbenchmarks is hard ;)><woojoo666
11303693><2016-12-29 22:53:48><@MatthieuM.: I agree with you but to the extent that compiler may optimize it. Not sure if it will, but I am no expert at Compiler Optimizations. But if you are right, wouldn&#39;t this invalidate the remark &quot;That one is 100,000x faster than before&quot; by vulcan.><IndianKing
11303693><2018-11-10 20:24:36><If you make &#39;i&#39; volatile, the compiler will have hard time optimizing anything that involves the outer loop. The inner contents will still be optimized though.><ChristopheRoussy
12853037><2013-12-09 12:00:09><This is scary, in the unsorted list, there should be 50% chance of hitting the add.  Somehow the branch prediction only has a 25% miss rate, how can it do better than 50% miss?><ChristopheRoussy
12853037><2013-12-09 12:29:25><@tall.b.lo: The 25% is of all branches - there are <i>two</i> branches in the loop, one for <code>data[c] &gt;= 128</code> (which has a 50% miss rate as you suggest) and one for the loop condition <code>c &lt; arraySize</code> which has ~0% miss rate.><Atul
14092288><2013-05-18 03:53:00><Just for the sake of completeness, this is probably not how you&#39;d implement that in Matlab. I bet it&#39;d be much faster if done after vectorizing the problem.><PhilMiller
14092288><2013-05-18 07:50:24><Matlab does automatic parallelization / vectorization in many situations but the issue here is to check the effect of branch prediction. Matlab is not immune in anyway!><IsmaelLuceno
14092288><2013-08-25 00:34:32><Does matlab use native numbers or a mat lab specific implementation (infinite amount of digits or so?)><MalusJan
14889969><2016-03-28 20:58:51><@MooingDuck &#39;Cause it won&#39;t make a difference - that value can be anything, but it still will be in the bounds of these thresholds. So why show a random value when you already know the limits? Although I agree that you could show one for the sake of completeness, and &#39;just for the heck of it&#39;.><mohitmun
14889969><2016-03-29 02:27:16><@cst1992: Right now his slowest timing is TTFFTTFFTTFF, which seems, to my human eye, quite predictable. Random is inherently unpredictable, so it&#39;s entirely possible it would be slower still, and thus outside the limits shown here.  OTOH, it could be that TTFFTTFF perfectly hits the pathological case.  Can&#39;t tell, since he didn&#39;t show the timings for random.><Alice
14889969><2016-07-21 05:07:37><@MooingDuck To a human eye, &quot;TTFFTTFFTTFF&quot; is a predictable sequence, but what we are talking about here is the behavior of the branch predictor built into a CPU.  The branch predictor is not AI-level pattern recognition; it&#39;s very simple.  When you just alternate branches it doesn&#39;t predict well.  In most code, branches go the same way almost all the time; consider a loop that executes a thousand times.  The branch at the end of the loop goes back to the start of the loop 999 times, and then the thousandth time does something different.  A very simple branch predictor works well, usually.><knickum
14889969><2016-07-21 05:10:18><@steveha: I think you&#39;re making assumptions about how the CPU branch predictor works, and I disagree with that methodology. I don&#39;t know how advanced that branch predictor is, but I seem to think it&#39;s far more advanced than you do. You&#39;re probably right, but measurements would definitely be good.><Drt
14889969><2016-07-26 11:49:15><@MooingDuck It is true that I am not an expert in processor design.  But I invite you to read the Wikipedia page about branch predictors.  Not one of the discussed designs could lock on to the pattern TTFFTTFF... and predict correctly.  (Except maybe for the neural net one, with a sufficiently advanced neural net, and I&#39;ll bet you cash money that you don&#39;t own a computing device that has such a branch predictor in its processor.)  <a href="https://en.wikipedia.org/wiki/Branch_predictor" rel="nofollow noreferrer">en.wikipedia.org/wiki/Branch_predictor</a>><SazzadHissainKhan
14889969><2016-07-26 12:33:55><@steveha: The Two-level adaptive predictor could lock onto the TTFFTTFF pattern with no issue whatsoever. &quot;Variants of this prediction method are used in most modern microprocessors&quot;. Local branch prediction and Global branch prediction are based on a two level adaptive predictor, they can as well. &quot;Global branch prediction is used in AMD processors, and in Intel Pentium M, Core, Core 2, and Silvermont-based Atom processors&quot;  Also add Agree predictor, Hybrid predictor, Prediction of indirect jumps, to that list. Loop predictor wont lock on, but hits 75%. That leaves only 2 that can&#39;t lock on><TomasAndrle
14889969><2016-12-24 06:32:07><@MooingDuck : The diagram in Surt&#39;s <a href="http://stackoverflow.com/a/33070112/4509583">answer below</a> I think explains why TTFFTTFF is in fact the &quot;pathological case&quot; in Saqlain&#39;s example.><IsmaelLuceno
16184827><2013-04-25 01:50:33><You want to bypass the branch-predictor, why? It&#39;s an optimization.><Sandeep
16184827><2013-04-25 05:57:13><Because no branch is better than a branch :-) In a lot of situations this is simply a lot faster... if you&#39;re optimizing, it&#39;s definitely worth a try. They also use it quite a bit in f.ex. <a href="http://graphics.stanford.edu/~seander/bithacks.html" rel="nofollow noreferrer">graphics.stanford.edu/~seander/bithacks.html</a>><GManNickG
17782979><2013-07-29 20:05:24><Right, you can also just use the bit directly and multiply (<code>data[c]&gt;&gt;7</code> - which is discussed somewhere here as well); I intentionally left this solution out, but of course you are correct. Just a small note: The rule of thumb for lookup tables is that if it fits in 4KB (because of caching), it&#39;ll work - preferably make the table as small as possible. For managed languages I&#39;d push that to 64KB, for low-level languages like C++ and C, I&#39;d probably reconsider (that&#39;s just my experience). Since <code>typeof(int) = 4</code>, I&#39;d try to stick to max 10 bits.><Sandeep
17782979><2013-07-30 06:02:13><I think indexing with the 0/1 value will probably be faster than an integer multiply, but I guess if performance is really critical you should profile it.  I agree that small lookup tables are essential to avoid cache pressure, but clearly if you have a bigger cache you can get away with a bigger lookup table, so 4KB is more a rule of thumb than a hard rule.  I think you meant <code>sizeof(int) == 4</code>?  That would be true for 32-bit.  My two-year-old cell phone has a 32KB L1 cache, so even a 4K lookup table might work, especially if the lookup values were a byte instead of an int.><AdamFreeman
17782979><2014-03-04 23:38:24><Possibly I&#39;m missing something but in your <code>j</code> equals 0 or 1 method why don&#39;t you just multiply your value by <code>j</code> before adding it rather than using the array indexing (possibly should be multiplied by <code>1-j</code> rather than <code>j</code>)><woojoo666
17782979><2014-03-18 16:45:05><@steveha Multiplication should be faster, I tried looking it up in the Intel books, but couldn&#39;t find it... either way, benchmarking also gives me that result here.><AdamFreeman
17782979><2014-03-18 16:52:11><@steveha P.S.: another possible answer would be <code>int c = data[j]; sum += c &amp; -(c &gt;&gt; 7);</code> which requires no multiplications at all.><Veve
17782979><2014-04-02 23:15:02><Good answer - since a lookup-table can also handle complex cases, where we cannot easily cheat with bit-manipulation><rahs
17828251><2013-07-25 00:31:30><<code>sum= 3137536</code> - clever. That&#39;s kinda obviously not the point of the question. The question is clearly about explaining surprising performance characteristics. I&#39;m inclined to say that the addition of doing <code>std::partition</code> instead of <code>std::sort</code> is valuable. Though the actual question extends to more than just the synthetic benchmark given.><mohitmun
17828251><2013-07-25 04:37:31><@DeadMG: this is indeed not the standard dichotomic search for a given key, but a search for the partitioning index; it requires a single compare per iteration. But don&#39;t rely on this code, I have not checked it. If you are interested in a guaranteed correct implementation, let me know.><PrajwalDhatwalia
31210295><2017-10-11 22:49:42><how are two instructions executed together? is this done with separate cpu cores or is pipeline instruction is integrated in single cpu core?><RenatoOliveira
31210295><2017-11-03 15:45:12><@M.kazemAkhgary It&#39;s all inside one logical core. If you&#39;re interested, this is nicely described for example in <a href="https://software.intel.com/en-us/articles/intel-sdm" rel="nofollow noreferrer">Intel Software Developer Manual</a>><DanielFischer
41603849><2018-03-16 20:47:19><That is a very interesting article (in fact, I have just read all of it), but how does it answer the question?><Unheilig
41603849><2018-03-16 23:37:16><@PeterMortensen I am a bit flummoxed by your question. For example here is one relevant line from that piece:  <code>When the input is unsorted, all the rest of the loop takes substantial time. But with sorted input, the processor is somehow able to spend not just less time in the body of the loop, meaning the buckets at offsets 0x18 and 0x1C, but vanishingly little time on the mechanism of looping.</code>  Author is trying to discuss profiling in the context of code posted here and in the process trying to explain why the sorted case is so much more faster.><MalusJan
45503985><2020-02-10 12:07:48><<i>While flushing pipelines is super fast</i>  Not really.  It&#39;s fast compared to a cache miss all the way to DRAM, but on a modern high-performance x86 (like Intel Sandybridge-family) it&#39;s about a dozen cycles.  Although fast recovery does allow it to avoid waiting for all older independent instructions to reach retirement before starting recovery, you still lose a lot of front-end cycles on a mispredict.  <a href="//stackoverflow.com/q/50984007">What exactly happens when a skylake CPU mispredicts a branch?</a>.  (And each cycle can be about 4 instructions of work.)  Bad for high-throughput code.><demonkoryu
47141245><2019-07-29 13:14:16><Almost as good as the Intel marketing animations, and they were obsessed not just with branch prediction but out of order execution, both strategies being &quot;speculative&quot;. Reading ahead in memory and storage (sequential pre-fetch to buffer) is also speculative. It all adds up.><PrajwalDhatwalia
47141245><2020-02-10 12:03:19><@mckenzm: out-of-order speculative exec makes branch prediction even more valuable; as well as hiding fetch/decode bubbles, branch prediction + speculative exec removes control dependencies from critical path latency.  Code inside or after an <code>if()</code> block can execute <i>before</i> the branch condition is known.  Or for a search loop like <code>strlen</code> or <code>memchr</code>, interations can overlap.  If you had to wait for the match-or-not result to be known before running any of the next iteration, you&#39;d bottleneck on cache load + ALU latency instead of throughput.><Mysticial
47457772><2018-11-06 20:28:29><Right, but the setup cost of sorting the array is O(N log N), so breaking early doesn&#39;t help you if the only reason you are sorting the array is to be able to break early. If, however, you have other reasons to pre-sort the array, then yes, this is valuable.><dddJewelsbbb
47457772><2019-02-27 20:23:22><Depends how many times you sort the data compared to how many times you loop on it. The sort in this example is just an example, it doesn&#39;t have to be just before the loop><dddJewelsbbb
47457772><2019-02-28 20:28:14><Yes, that&#39;s exactly the point I made in my first comment :-) You say &quot;The branch prediction will miss only once.&quot; But you are not counting the O(N log N) branch prediction misses inside the sort algorithm, which is actually greater than the O(N) branch prediction misses in the unsorted case. So you would need to use the entirety of the sorted data O(log N) times to break even (probably actually closer to O(10 log N), depending on the sort algorithm, e.g. for quicksort, due to cache misses -- mergesort is more cache-coherent, so you would need closer to O(2 log N) usages to break even.)><jdero
47457772><2019-02-28 20:34:48><One significant optimization though would be to do only &quot;half a quicksort&quot;, sorting only items less than the target pivot value of 127 (assuming everything less than <i>or equal to</i> the pivot is sorted after the pivot). Once you reach the pivot, sum the elements before the pivot. This would run in O(N) startup time rather than O(N log N), although there will still be a lot of branch prediction misses, probably of the order of O(5 N) based on the numbers I gave before, since it&#39;s half a quicksort.><Atul
47942152><2018-05-14 22:04:03><Are you saying that every instruction can be conditional? So, multiple instructions with the <code>GE</code> suffix could be performed sequentially, without changing the value of <code>R3</code> in between?><PeterWone
53689911><2019-02-28 20:18:29><I don&#39;t really see how this proves anything? The only thing you have shown is that &quot;not doing all the work of sorting the whole array takes less time than sorting the whole array&quot;. Your claim that this &quot;also runs fastest&quot; is very architecture-dependent. See my answer about how this works on ARM. PS you could make your code faster on non-ARM architectures by putting the summation inside the 200-element block loop, sorting in reverse, and then using Yochai Timmer&#39;s suggestion of breaking once you get an out-of range value. That way each 200-element block summation can be terminated early.><LutzPrechelt
53689911><2019-12-13 22:44:53><If you just want to implement the algorithm efficiently over unsorted data, you would do that operation branchlessly (and with SIMD, e.g. with x86 <code>pcmpgtb</code> to find elements with their high bit set, then AND to zero smaller elements).  Spending any time actually sorting chunks would be slower.  A branchless version would have data-independent performance, also proving that the cost came from branch misprediction.  Or just use performance counters to observe that directly, like Skylake <code>int_misc.clear_resteer_cycles</code> or <code>int_misc.recovery_cycles</code> to count front-end idle cycles from mispredicts><TheGuyWithTheFace
53689911><2020-04-03 14:44:26><Both comments above seem to ignore the general algorithmic issues and complexity, in favor of advocating specialized hardware with special machine instructions. I find the first one particularly petty in that it blithely dismisses the important general insights in this answer in blind favor of specialized machine instructions.><LutzPrechelt
58531294><2019-12-13 22:29:22><The instructions stay hot in the CPU&#39;s L1 instruction cache regardless of mispredicts.  The problem is fetching them into the <i>pipeline</i> in the right order, before the immediately-previous instructions have decoded and finished executing.><Alice
59837525><2020-01-21 18:28:26><What C++ compiler / hardware did you test this with, and with what compiler options?  I&#39;m surprised the original version didn&#39;t auto-vectorize to nice branchless SIMD code.  Did you enable full optimization?><LewisKelsey
927358><2017-02-27 11:53:19><See this guide for Git commits undo on Local, Public and Git Branch <a href="http://justcode.me/git/undo-git-commits/" rel="nofollow noreferrer">How to undo Git Commits like pro</a>><jdero
927358><2017-06-15 23:26:36><Before you post a new answer, consider there are already 65+ answers for this question. Make sure that your answer contributes what is not among existing answers.><Unheilig
927358><2017-11-02 21:21:44><What @thSoft said is correct, pushing your commits and then <code>git reset --bla foo</code> requires you a <code>git --force push [--all] [somewhere-else-than-origin]</code>. Note that this is a &quot;forced-push&quot; which requires other people do a &quot;forced-update&quot;. They should <b>not</b> use <code>git pull</code> as this implies a merge, but use <code>git fetch [--all]</code> and then <code>git rebase origin&#47;master</code> (assume that the forced-update came from <code>origin</code>). All <code>[bla]</code> are optional parameters but sometimes needed, for example when you push to more than just one remote repository.><TomasAndrle
927358><2017-11-02 21:23:23><The reason for <code>git fetch [--all]</code> + <code>git rebase origin&#47;master</code> is that this fixes your local history avoiding a merge making the history easier for GIT to handle.><Ren233
927358><2018-03-20 09:45:28><You know what git needs? <code>git undo</code>, that&#39;s it. Then the reputation git has for handling mistakes made by us mere mortals disappears. Implement by pushing the current state on a git stack before executing any <code>git</code> command. It would affect performance, so it would be best to add a config flag as to whether to enable it.><SazzadHissainKhan
927358><2018-07-04 20:17:08><A nice explanation I have encountered: <a href="https://www.git-tower.com/learn/git/faq/undo-last-commit" rel="nofollow noreferrer">git-tower.com/learn/git/faq/undo-last-commit</a>><rahs
927358><2018-10-05 22:50:08><@YiminRong That can be done with Git&#39;s <code>alias</code> feature: <a href="https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases" rel="nofollow noreferrer">git-scm.com/book/en/v2/Git-Basics-Git-Aliases</a>><demonkoryu
927358><2019-04-08 20:15:40><For VsCode users , just type ctrl +shift +G and then click on three dot ,ie , more options and then click on undo Last Commit><NathanOliver
927358><2020-03-24 22:27:03><@YiminRong Undo <i>what</i> exactly? There are dozens of very different functional cases where &quot;undoing&quot; means something <b>completely</b> different. I&#39;d bet adding a new fancy &quot;magic wand&quot; would only confuse things more.><naveejr
927358><2020-03-25 20:35:56><@RomainValeri - Same way undo works everywhere else.><FilipBartuzi
927378><2014-06-22 00:31:59><<code>git commit -a -m &quot;&quot;</code> or <code>git commit -am &quot;&quot;</code> naturally! :]><Atul
927378><2015-12-09 06:30:29><Another &#39;shortcut&#39; use of stash; if you want to unstage everything (undo git add), just <code>git stash</code>, then <code>git stash pop</code>><MarianSpanik
927386><2010-10-05 23:44:20><And if the commit was to the wrong branch, you may <code>git checkout theRightBranch</code> with all the changes stages. As I just had to do.><Ren233
927386><2011-04-13 22:15:10><If you&#39;re working in DOS, instead of <code>git reset --soft HEAD^</code> you&#39;ll need to use <code>git reset --soft HEAD~1</code>.  The ^ is a continuation character in DOS so it won&#39;t work properly.  Also, <code>--soft</code> is the default, so you can omit it if you like and just say <code>git reset HEAD~1</code>.><screwnut
927386><2013-02-22 01:47:56><zsh users might get: <code>zsh: no matches found: HEAD^</code> - you need to escape ^ i.e. <code>git reset --soft HEAD\^</code>><Atul
927386><2014-07-03 05:19:30><The answer is not correct if, say by accident, <code>git commit -a</code> was issued when the <code>-a</code> should have been left out.  In which case, it&#39;s better no leave out the <code>--soft</code> (which will result in <code>--mixed</code> which is the default) and then you can restage the changes you meant to commit.><Drt
927386><2016-09-16 13:56:25><In more recent versions of git <code>HEAD~</code> can be replaced with <code>@~</code>.><screwnut
927386><2017-01-17 01:55:07><git add ... is not correct command, git add documentation never has a pattern for three dots, also I tried this command in my local, it does not work><jdero
927386><2017-02-21 01:34:27><@IcyBrk git add is a command.  <code>git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p] 	  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]] 	  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] 	  [--chmod=(+|-)x] [--] [&lt;pathspec&gt;…​]</code>><TheGuyWithTheFace
3377569><2018-08-08 15:11:00><For those reading in future - please note that <code>git revert</code> is a separate command - which basically &#39;resets&#39; a single commimt.><Atul
6376039><2011-07-14 16:32:53><I found this answer the clearest. <code>git revert HEAD^</code> is not the previous, is the previous of the previous. I did : <code>git revert HEAD</code> and then push again and it worked :)><onmyway133
6376039><2020-03-05 23:50:09><If Git asks you &quot;More?&quot; when you try these commands, use the alternate syntax on this answer: <a href="https://stackoverflow.com/a/14204318/823470">stackoverflow.com/a/14204318/823470</a>><woojoo666
6866485><2012-02-25 21:31:31><@Kyralessa: If I do <code>git reset --hard HEAD^</code> twice, will the state shift to <code>(A)</code>?><onmyway133
6866485><2012-06-22 18:53:40><Doesn&#39;t work with OS x. - I get &quot;ambiguous argument &#39;HEAD^&#39; ... Unknow revision or  path not in the working tree&quot;. Using he tilde version makes no difference. But git log and git status both appear to show there is a valid commit in place><mohitmun
6866485><2012-06-22 20:35:31><@Kyralessa - yes, I think that might be the problem. In this case, I committed something I thought was small - and when I tried to Push, I found it was 400 MB of data (!) (a deep nested Resources folder containing video and music files). So, I need to undo the commit, but keep the source files, and I&#39;ll commit them later, when I have better net connection - or to a different repo.><doug65536
6866485><2012-10-30 14:09:49><My thanks also for the explanation. Question about this statement though (re --hard) : &quot;your files are reset to their state at commit B&quot;. Say I had only committed some of my modifications, other files being intended for future commits. How much am I resetting?  Just the committed files? Or do I reset my whole working set?><NicholasHamilton
6866485><2013-02-02 03:39:49><Since so many people are supportive of the answer, I offer this feedback: write a quickly-readable and easily-executed set of instructions that I can run to fix my problem.  The other answer has it; this one does not.><TomasAndrle
6866485><2013-02-21 02:46:35><BEWARE! This might not do what you expect if your erroneous commit was a (fast-forward) merge! If your head is on a merge commit (ex: merged branch feature into master), <code>git reset --hard~1</code> will point the master branch to the last commit inside the feature branch. In this case the specific commit ID should be used instead of the relative command.><AndonM.Coleman
6866485><2013-02-21 22:05:28><Upon further thought this behaviour nay have been a result of merging the master branch into the feature branch first, testing and then (fast-forward) merging the feature branch into the master.><chaws
6866485><2013-08-13 22:37:26><Consider noting that the number in <code>HEAD~1</code> can be substituted to any positive integer, e.g. <code>HEAD~3</code>. It may seem obvious, but beginners (like me) are very careful when running git commands, so they may not want to risk messing something up by testing this stuff themselves.><PeterWone
6866485><2013-09-05 11:10:54><Could someone comment on &quot;what if you have already pushed the commit?&quot;.  Is this answer still valid, or does that make it all more difficult?><mohitmun
10044540><2012-12-08 00:02:12><Rewriting history on a shared repository is generally a very bad idea.  I assume you know what you&#39;re doing, I just hope future readers do too.><RenatoOliveira
10757800><2015-01-14 06:05:57><What does that mean, cherry pick the commit? In my case, I was on the wrong branch when I edited a file. I committed it then realized I was in the wrong branch. Using &quot;git reset --soft HEAD~1&quot; got me back to just before the commit, but now if I checkout the correct branch, how do I undo the changes to the file in wrong branch but instead make them (in the same named file) in the correct branch?><matec
10757800><2016-01-26 05:07:16><I just utilized <code>git revert commit-id</code> worked like a charm.  Of course then you will need to push your changes.><NathanOliver
10757800><2016-10-21 02:19:50><I believe that would be <code>git cherry-pick &lt;&lt;erroneous-commit-sha&gt;&gt;</code> @astronomerdave. From, Mr. Almost-2-Years-Late-to-the-Party.><SachinVerma
10757800><2018-11-10 17:38:58><@Kris: Instead of cherry-pick use rebase. Because it is advanced cherry-picking><AndonM.Coleman
14620228><2015-12-14 23:34:11><@SMR, In your example, all are pointing into current HEAD only. HEAD^ = HEAD^1. As well as HEAD^1 = HEAD~1.  When you use HEAD~2, there is a difference between ~ and ^ symbols. If you use ~2 means “the first parent of the first parent,” or “the grandparent”.><SlippD.Thompson
16175525><2014-10-19 07:38:11><<code>gitk --all $(git reflog | cut -c1-7)&amp;</code> may be helpful for finding the previous revision if you want to undo an &#39;--amend&#39; commit.><PeterCordes
16175525><2015-09-04 12:52:01><It should be noted that if you&#39;re attempting to remove secret information before pushing to a shared repository, doing a revert won&#39;t help you, because the information will still be in the history in the previous commit.  If you want to ensure the change is never visible to others you need to use <code>git reset</code>><SazzadHissainKhan
16175525><2018-03-28 22:59:27><I think &#39;private&#39;/&#39;public&#39; would more correctly be &#39;local&#39;/&#39;remote&#39;.><FilipBartuzi
16609755><2017-09-28 07:30:18><What if you do not use &quot;&lt;commit_id&gt;&quot; and simply use &quot;git reset --hard&quot;? I typically just want to get rid of my latest updates that I have not committed yet and got back to the latest commit I made, and I always use &quot;git reset --hard&quot;.><NathanOliver
16609755><2017-09-28 21:10:31><@JaimeMontoya To undo latest changes you can use <code>git reset --hard</code> , but if you have to hard remove last &quot;n&quot; commits you specify a SHA><RenatoOliveira
22199804><2014-04-23 17:13:35><I needed to write git reset --soft &quot;HEAD^&quot; with double quotes, because I write it from Windows command prompt.><AgrimPathak
25553225><2014-11-25 06:35:29><Maybe you could at a note/warning that his command will throw away the commit <b>and the changes in the working directory</b> without asking any further.><dddJewelsbbb
25553225><2014-11-25 06:40:57><If you happen to do this by accident, not all is lost, though. See <a href="http://stackoverflow.com/questions/10099258/how-can-i-recover-a-lost-commit-in-git" title="how can i recover a lost commit in git">stackoverflow.com/questions/10099258/&hellip;</a>, <a href="http://stackoverflow.com/questions/15479501/git-commit-lost-after-reset-hard-not-found-by-fsck-not-in-reflog" title="git commit lost after reset hard not found by fsck not in reflog">stackoverflow.com/questions/15479501/&hellip;</a> and <a href="http://stackoverflow.com/questions/7374069/undo-git-reset-hard/7376959" title="undo git reset hard">stackoverflow.com/questions/7374069/undo-git-reset-hard/7376&zwnj;&#8203;959</a>.><NicholasHamilton
25553225><2015-03-09 17:11:06><Use <code>--soft</code> to keep your changes as <code>uncommitted changes</code>, <code>--hard</code> to nuke the commit completely and revert back by one. Remember to do such operations only on changes, that are not pushed yet.><LewisKelsey
25553225><2016-09-14 05:17:10><@Zaz: You are right; maybe I should have clarified that. Only files/changes that have been either added to index (/staged) or have been committed can possibly be recovered. Uncommitted, unstaged changes <i>are</i>, as you said, completely thrown away by <code>git reset --hard</code>.><SimonHrabec
25553225><2016-09-14 05:22:52><As a sidenote: Everytime a file is staged, <code>git</code> stores its contents in its object database. The stored contents are only removed when garbage collection is executed. It is therefore possible to recover the last staged version of a file that was not currently staged when <code>git reset --hard</code> was executed (see the posts linked above for more information).><Atul
25553225><2019-01-26 06:41:32><This is terrible advice. This doesn&#39;t just reset your remote, this deletes the actual files from the folder you are doing. This was not clear at all to me, and I thought you were saying you were simply resetting the git head, not resetting your current files to what is in the repository. If my notebooks from yesterday were not in my RAM I would have lost everything I did yesterday.><naveejr
25638420><2014-11-13 03:36:02><I&#39;m in the 2nd case, but when I do &quot;git revert HEAD&quot; it says &quot;error: Commit [ID] is a merge but no -m option was given.  fatal: revert failed&quot;.  Any suggestions?><mohitmun
25638420><2014-12-07 08:38:49><Probably worth mentioning that instead of <code>HEAD~1</code> you could use the actual hash as displayed by <code>git log --stat</code> or by <code>git reflog</code> - useful when you need to &#39;undo&#39; more than one commit.><AdamFreeman
34547846><2018-10-31 03:18:27><What if I am working on a fork, so basically I have 2 remotes actual repo e.g. incubator-mxnet and my forked repo ChaiBapchya/incubator-mxnet  So in such a case, how can I solve merge conflicts from local to my forked repo branch><ChristopheRoussy
34583071><2016-12-16 00:25:41><Be <b>extra</b> careful when reverting merge commits. You may lose your commits. Read about what Linus says about that: <a href="https://www.kernel.org/pub/software/scm/git/docs/howto/revert-a-faulty-merge.html" rel="nofollow noreferrer">kernel.org/pub/software/scm/git/docs/howto/&hellip;</a>><chaws
35472255><2017-03-21 20:09:47><<code>git reset --hard HEAD~1</code> is <b>too dangerous</b>! This will not just &#39;cancel last commit&#39;, but will revert repo completely back to the previous commit. So you will LOOSE all changes committed in the last commit!><rahs
35472255><2017-04-24 21:07:03><You right, to undo this you can use <code>git push -f &lt;remote&gt; HEAD@{1}:&lt;branch&gt;</code>><knickum
35472255><2018-08-19 21:53:17><Unfortunately, I use --hard, and my files are deleted! I did not check the comment first because it is collapsed. Do not use --hard if you do not know what you are doing!><NathanOliver
36040444><2019-05-22 22:02:25><Note: checking out &#39;5456cea9&#39;.  You are in &#39;detached HEAD&#39; state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout.  If you want to create a new branch to retain commits you create, you may do so (now or later) by using -b with the checkout command again. Example:    git checkout -b &lt;new-branch-name&gt;  HEAD is now at 5456cea... Need to delete Exclusions.xslt from Documentation folder. - Delete What should i do after this><matec
38091882><2016-08-04 16:36:50><Or <code>git reset @~</code>><naveejr
38629666><2016-12-16 00:29:21><The very useful description about differences <code>--soft</code> VS <code>--hard</code> <a href="https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting/" rel="nofollow noreferrer">atlassian.com/git/tutorials/&hellip;</a>><DanielFischer
38629666><2017-09-11 22:10:59><One doesn&#39;t really lose the commits on a <code>--hard</code> reset as they will be available in the ref log for 30 days <code>git reflog</code>.><matec
43826836><2019-05-07 04:36:37><this worked for me the best, since I had already pushed the bad commit up to github><woojoo666
46210590><2018-01-29 05:36:56><&quot;Working copy&quot;? Is this a Git concept? Isn&#39;t it an SVN concept?><rahs
46210590><2018-05-05 03:46:45><@PeterMortensen yes working copy, its a git concept though><Ren233
53254732><2018-11-21 21:05:23><What is the difference with @JacoPretorius answer ?><Drt
59620663><2020-03-14 19:58:44><But keep in mind that --hard will completely discard all the changes that were made in the last commit as well as the content of the index.><NicholasHamilton
2003505><2014-06-12 00:10:42><<b><i>Moderator note: If you intend to answer this question, do note that there are already 40 answers posted.  Will your new answer add any substantial value?</i></b>><TomasAndrle
2003505><2015-05-25 22:57:35><Note: for Git 2.5+ (Q2 2015), the exact message will be &quot;<b><code>deleted remote-tracking branch</code></b>&quot;: see <a href="https://github.com/git/git/commit/ccd593cffaa020ff767860ec211462b8dbd727a6#diff-d18f86ea14e2f1e5bff391b2e54438cbR268" rel="nofollow noreferrer">github.com/git/git/commit/&hellip;</a>><MalusJan
2003505><2019-09-12 18:11:40><You may be interested in this script which simplifies the difference between deleting a local branch AND a remote one: <a href="https://www.tlbx.app/blog/delete-any-git-branch-the-easy-way" rel="nofollow noreferrer">tlbx.app/blog/delete-any-git-branch-the-easy-way</a>><LutzPrechelt
2003515><2015-05-28 00:51:36><Don&#39;t forget to do a <code>git fetch --all --prune</code> on other machines after deleting the remote branch on the server. ||| After deleting the local branch with <code>git branch -d</code> and deleting the remote branch with <code>git push origin --delete</code> other machines may still have &quot;obsolete tracking branches&quot; (to see them do <code>git branch -a</code>). To get rid of these do <code>git fetch --all --prune</code>.><Alice
2003515><2015-09-09 17:53:18><in addition to @TrevorBoydSmith&#39;s <code>git branch -a</code> to view all branches, you can also use <code>git branch -r</code> to view remote branches only. see also <code>git remote show origin</code> - source: <a href="http://gitready.com/intermediate/2009/02/13/list-remote-branches.html" rel="nofollow noreferrer">gitready.com/intermediate/2009/02/13/list-remote-branches.ht&zwnj;&#8203;ml</a>><TheGuyWithTheFace
2003515><2016-03-10 09:32:06><I had to run <code>git branch -D Branch_Name</code> to get rid of the local branch><LutzPrechelt
2003515><2016-04-06 00:27:15><@KolobCanyon You only have to use -D if the branch has not been merged into another branch.><IsmaelLuceno
2003515><2016-06-07 10:15:38><The question was <b><i>&quot;What do I need to do differently to successfully delete the remotes/origin/bugfix branch both locally and on GitHub?&quot;</i></b> After running the commands in your updated answer, the local branch is still present. It would be nice if the accepted answer was a <b><i>complete</i></b> answer. Its absolutely amazing at how difficult Git makes simple tasks...><jdero
2003515><2017-01-04 23:33:29><Really appreciate the executive summary at the beginning. I&#39;ll add that I also had to change the second command to <code>-D</code> to confirm I wanted to delete while there were unmerged changes.><SazzadHissainKhan
2003515><2017-01-19 18:00:02><I am getting <code>error: Cannot delete the branch &#39;19_jan_improvements_post_v1&#39; which you are currently on.</code> when I am trying to delete a local branch, which I am working on that branch. I am not able to checkout to a different branch also, because I have to merge some files and so it gives this error - <code>error: you need to resolve your current index first</code>. What to do if I just don&#39;t care about merging those files and anyway want to get rid of the local branch.><AndonM.Coleman
2003515><2017-05-16 11:08:29><Doesn&#39;t work if you in the branch. Need to to do a git checkout master or whatever to get out of the branch prior.><SlippD.Thompson
7923161><2017-11-29 15:31:21><...and safer to use :O><Atul
10999165><2014-11-07 03:04:59><@megido well <code>-D</code> force deletes, <code>-d</code> gives you a warning if it&#39;s not already merged in.><knickum
10999165><2015-10-31 20:59:14><If your local branch is not merge with master and ran <code>&#39;git branch -d your_branch</code> then you will error like <code>error: The branch &#39;your_branch&#39; is not fully merged. If you are sure you want to delete it, run &#39;git branch -D your_branch&#39;.</code>><demonkoryu
10999165><2016-02-02 11:47:57><I would suggest using -d instead of -D because it is safer. If -d fails due to unmerged commits then you need to assess that and if it is definitely OK to remove then use -D.><SachinVerma
10999165><2016-04-19 07:07:39><Others with repository clones where remote branches have been removed should run <code>git remote prune &lt;name&gt;</code> (e.g. <code>git remote prune origin</code>) in order to locally remove stale branches that no longer exist in the remote.><SimonHrabec
10999165><2016-05-19 08:53:21><If your branch in your fork (not always origin), use the proper repository. e.g. git push myRepo :mrbranchtodelete><Sandeep
10999165><2016-09-21 04:31:51><If you&#39;re deleting a branch, both locally and remotely, why does it matter if there are un-merged commits? You&#39;re blowing it away anyway...><NathanOliver
10999165><2016-12-13 06:20:55><@ganders The point is that you might not realize there were unmerged commits, and might not want to delete the branch anymore after you learned that. <code>-d</code> protects you from accidentally losing work.><PrajwalDhatwalia
13270340><2013-05-21 21:51:46><You should clarify that the above <code>git push</code> operation deletes the local branch <i>and</i> the remote branch.><Atul
13270340><2014-12-05 22:27:38><@RRMadhav, indeed you won&#39;t see the deleted branch after deleting it since the reference to the remote branch will be removed for you locally. Anyone else on your team that has checked out that branch will still have that reference and will still see it unless they prune the branch.><demonkoryu
13437928><2015-10-09 00:46:25><git push --prune origin didn&#39;t do anything for me on gitlab: git clone git://repo.git; git branch -d -r origin/some-branches; git push --prune origin; yields: Everything up-to-date; git fetch; brings locally deleted branches back; git push --mirror; now they are really gone!><LewisKelsey
14345010><2014-12-16 16:55:29><This is what I was looking for. My own shell function alias didn&#39;t work (Unexpected EOF) and I couldn&#39;t figure out why, but this works great! The only change I made was replacing <code>&amp;&amp;</code> with <code>;</code> so that even if the first command fails the second will still execute (sometimes only local or only remote exists).><PhilMiller
15775364><2014-12-05 02:06:37><I ended up just add the alias &quot;shoot&quot; into my .gitconfig shoot = push origin --delete><LewisKelsey
15775364><2014-12-12 08:29:35><If your origin is a Atlassian Stash and the branch is set as the default, you will get an error &quot;By default, deleting the current branch is denied...&quot;. I had to change the default branch in Stash to point to another branch before I could delete.><LutzPrechelt
15775364><2015-10-14 15:09:31><This is perfectly simple as you&#39;ve done it, but fyi git also lets you make custom commands. Put <code>git push origin --delete $1</code> in a file on your path called <code>git-shoot</code> and <code>git shoot branchname</code> will work too.><mp31415
16276586><2013-09-11 20:18:54><I only started using Github this year, so I was wondering why this was such a highly rated question, and why none of the top answers were suggesting to just delete it from the Github web interface! Interesting that it&#39;s only a recent addition.><MarianSpanik
16276586><2013-10-29 22:02:45><I was going to point this one out. Note that the button won&#39;t delete your local branch... see this answer for how to do that: <a href="http://stackoverflow.com/a/10999165/901641">stackoverflow.com/a/10999165/901641</a>><jdero
19572740><2015-01-10 09:08:57><Note that <code>-D</code> <i>forces</i> the deletion. It&#39;s always better to use <code>-d</code>, which will remind if you need to do something dangerous.><Drt
19572740><2015-02-13 19:21:07><ahahah :) it&#39;s up to you: use -d if you want to see git crying or -D if you want to cry.><DanielFischer
20081966><2014-12-06 00:44:44><@chhh then you need to extend this functionality to make this a variable instead of an assumption.><FilipBartuzi
20081966><2015-05-22 03:37:04><sorry, but install Ruby for that kind of work ? More logical is implementation on bash, which will work out of box.><demonkoryu
25011664><2014-07-30 19:59:10><Well, my scenario was that I was converting a branch to a tag and it made sense for the tag to have the same name as the branch. By converting I mean merging branch B to A and tagging the last commit in branch B with tag B so that after deleting branch B it can still be easily restored by simply checking out tag B.><LutzPrechelt
29831148><2016-07-01 06:23:07><This works if its your own branch. But if you are pruning all unneeded branches in the repo (some of which aren&#39;t yours) it wouldn&#39;t suffice><AdamFreeman
33275647><2015-11-06 19:51:15><I didn&#39;t downvote, but my thinking is that it isn&#39;t substantively helping. The question is obviously asking for a more commandline type answer without having to use an external program, if people were clicking into here, they likely won&#39;t be looking for a github for desktop ways.><Sandeep
33275647><2015-11-07 00:00:39><@Daemedeor , I dissagree.  In 2010 when the OP asked the question, the UI way of doing it didn&#39;t exist and the only option was command line.  To indicate that you want a command line only option it should be stated in the question or with the tag, <a href="https://stackoverflow.com/questions/tagged/command-line-interface">command-line-interface</a>, which in this case is no present.><Veve
33275647><2016-03-26 05:59:21><The git command for deleting a remote branch sucks and I tend to forget it (both new and old). Luckily there are GUI tools that have the option. Git Gui, TortoiseGit and GitHub Desktop have it - I wish Git Extensions had this functionality too. Anyway, what I remember is to start Git Gui from within Git Extensions when I need to delete a remote branch.><IndianKing
34544089><2016-02-17 16:32:54><Does the remote branch deletion requires &quot;git push&quot; afterwards ?><Alice
34544089><2017-06-10 06:20:55><@SamithaChathuranga no, <code>git push origin :&lt;branchname&gt;</code> already pushes an &#39;empty` branch to the remote (hence deletes the remote branch)><LewisKelsey
35324551><2016-06-27 21:15:19><expanding on this, <code>--delete &quot;$@&quot;</code> and <code>-D &quot;$@&quot;</code> instead of <code>$1</code> will handle it for multiple branches.><SachinVerma
36980415><2020-04-11 19:34:35><What new does this answer add compared to previous answers? E.g., to <a href="https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely/28527604#28527604">Syeful Islam&#39;s answer</a>?><Veve
38776671><2019-03-28 20:02:35><How do I run this script? Thanks><Sandeep
40645071><2017-03-13 22:05:07><⚠️  Use <code>git branch -D</code> carefully in a script, since it force-deletes a branch without checking it has been merged. Use <code>-d</code> to be safe.><woojoo666
42193447><2017-08-01 17:00:06><I don&#39;t see these <code>Overview</code>, <code>Yours</code>, <code>Active</code>, <code>State</code> and <code>All branches</code> tab on GitHub website. Looks like this is an old snapshot. Under the <code>Code</code> tab, I see sub-tabs like commits, branches, releases and contributors. When I am the owner of a repository then I see an additional tab named MIT.><SazzadHissainKhan
42398224><2017-03-04 19:41:41><Be careful with de <code>-D</code> option. In a batch consider using lower <code>-d</code>><PeterCordes
42398224><2017-03-05 13:45:30><In my case, I&#39;m almost always deleting after merging (or without the need to merge).  Using lower <code>-d</code> will require the branch be <a href="https://git-scm.com/docs/git-branch#git-branch--d" rel="nofollow noreferrer">merged</a> before deleting, using <code>-D</code> forces the branch deletion.><PeterCordes
44781228><2017-07-27 11:01:39><<code>git branch -a</code> will display local and remote branches.It will be help for you diagram introduce.><matec
44781228><2018-05-28 16:43:55><note that if you are setting on the branch you want to delete, you need to checkout a branch other than the one you need to delete (eg: master) before deleting the local branch.><Sandeep
44781228><2019-05-08 14:33:45><When branches get deleted on origin, your local repository won&#39;t take notice of that.  You&#39;ll still have your locally cached versions of those branches (which is actually good) but git branch -a will still list them as remote branches.  You can clean up that information locally like this:  <code>git remote prune origin</code> Your local copies of deleted branches are not removed by this.  The same effect is achieved by using <code>git fetch --prune</code>><jdero
44781228><2019-09-06 18:31:50><The image is distracting and very large and adds nothing to the answer. I hope this does not become a trend on SO.><DanielFischer
47696235><2017-12-11 07:22:24><I needed to use <code>--delete</code> instead of <code>-d</code> to delete remote branch.><SlippD.Thompson
57772662><2020-01-02 11:19:57><Installing <b>Python</b> to do something <b>git</b> does well by itself, is not really a solution. More like an programming exercise.><TheGuyWithTheFace
57772662><2020-01-02 19:24:54><@Mogens Python is already preinstalled in most sane distributions. With git only you can&#39;t for example: 1) customize the output (e.g. make it more consistent) 2) combine multiple commands in desired way 3) easily customize the logic. Besides, entering the same commands over and over again is pretty boring.><Ren233
292357><2010-09-16 14:57:47><I found this well written article about git fetch and git pull it&#39;s worth the reading: <a href="http://longair.net/blog/2009/04/16/git-fetch-and-merge/" rel="nofollow noreferrer">longair.net/blog/2009/04/16/git-fetch-and-merge</a>><PhilMiller
292357><2014-05-04 22:32:18><Our alternative approach has become <code>git fetch; git reset --hard origin&#47;master</code> as part of our workflow.  It blows away local changes, keeps you up to date with master BUT makes sure you don&#39;t just pull in new changes on top on current changes and make a mess.  We&#39;ve used it for a while and it basically feels a lot safer in practice.  Just be sure to add/commit/stash any work-in-progress first !><screwnut
292359><2009-11-10 20:13:21><&quot;A &quot;git pull&quot; is what you would do to bring your repository up to date&quot; &lt;- isn&#39;t the repository update already done by fetch? don&#39;t you mean it brings your local branches up-to-date with the remote branches?  To the merge: It merges the remote branches with your local copies of those branches, or what exactly does it merge here?><AgrimPathak
292359><2010-06-06 18:10:08><@Albert: Yeah, it&#39;s weirdly worded.  <code>git pull</code> will always merge into the <b>current branch</b>.  So you select which branch you want to pull <i>from</i>, and it pulls it into the current branch.  The <i>from</i> branch can be local or remote; it can even be a remote branch that&#39;s not a registered <code>git remote</code> (meaning you pass a URL on the <code>git pull</code> command line).><mp31415
292359><2011-03-17 07:51:52><Is a &quot;git push&quot; also a &quot;git fetch&quot; (in the other direction) followed by a &quot;git merge&quot;?><RenatoOliveira
292359><2011-03-17 08:41:04><@espertus: No. Pushing never automatically does a merge. The user is expected to pull, resolving any merge conflicts locally, <i>then</i> push back to the remote.><NathanOliver
292360><2010-03-28 00:21:55><Very interesting, but I can&#39;t really see a use case where you want &quot;just the code&quot;. Et what happen with your code when you fetch? Is it erased? What happen whith the remote changes? How does it goes into your repo whithout erasing your code if you don&#39;t merge?><PeterCordes
292360><2011-10-31 12:23:36><@e-satis: The remote branch is also stored locally on your machine. So when you do <code>git fetch</code> it fetches changes from the repository and updates your local remote branch. It does not affect your local branch which tracks the local remote branch, so does not affect your working copy. Now, when you do a <code>merge</code> it will merge the fetched changes with your local branch.><rahs
292360><2013-09-19 18:25:33><A simple use case for the fetch command: perform time consuming operations involving other people&#39;s recent commits, such as a merge or a code review, accessing only your up-to-date local repository without network connectivity requirements, because you previously used fetch to download everything you need quickly (e.g. while you are visiting some other developer and connected to some other repository&#39;s network). The pull command would download the same commits, but the merging it performs can be undesirable.><MalusJan
2791156><2012-02-13 07:47:33><why not <code>git diff ..origin</code>?><SimonHrabec
2791156><2013-01-09 03:32:06><git diff origin and git diff ..origin seem to work but not this weird ... stuff><RenatoOliveira
5376768><2012-09-01 04:02:48><You probably want to skip the pull and just do a &quot;git rebase origin&quot; as the last step since you already fetched the changes.    The reason is that someone could have pushed changes in the time since you did the fetch and these would not have been in fetch that you did the diff review on.><AdamFreeman
6011169><2013-05-24 05:56:38><@JustinOhms If <code>git pull --rebase</code> is not the right thing in the given situation, is it right if it is done in two steps? If it is the right thing to do, what is extra the benefit to doing it in two steps?><GManNickG
6011169><2013-05-25 05:11:52><@Kaz - because the rebase is not automatic. Fetching the changes first allows you to make the judgement call.  It doesn&#39;t fix the problem with rebasing history you&#39;ve already pushed.  It will allow you to see if it is safe to rebase changes you have not already pushed.><doug65536
6011169><2013-05-25 14:14:19><@JustinOhms How would you decide whether it is safe to rebase changes? I would just try git rebase, and backtrack if it made a mess, in which case I might as well do git pull --rebase. But maybe you have some other way?><MarianSpanik
6011169><2013-05-29 03:18:02><@KaZ gitk allows you to see the branch structure visually. It will show your the position of your local head, remotes, and your branch structures in relation to what you have fetched. This way you can ensure that you are not rebasing fetched changes that are based on an ancestor that is prior to what you have already pushed to your remote(s).><PeterWone
6011169><2014-12-01 16:39:57><Use <code>rebase</code> when you are working on a local branch not already pushed. If you are working on a branch that exists in the remote, <code>rebase</code> can result in some nasty issues so you should prefer a regular <code>merge</code>.><onmyway133
6011169><2020-01-19 22:57:06><git pull --rebase is fine if you are working with exactly one remote, so your changes are either local only (in which case they are fine to rebase) or are already one the remote (in which case they won&#39;t be rebased). The time when git pull --rebase becomes risky is when you are working with multiple remotes.><matec
7104747><2013-05-14 02:44:23><Agreed, great comment.  Which is why I hate git pull.  When would it ever make sense to let a revision tool make code edits for you?  And isn&#39;t that what merging two files is doing?  What if those two edits are physically separated in the file, but LOGICALLY at odds?><TomasAndrle
7104747><2013-06-06 03:15:45><I&#39;m not sure if I understand this correctly. Let me know if I&#39;m right:  Lets say I have two branches, master and test. test is a branch that I&#39;m working on to experiment something. If I do git fetch, it updates master with the target branch. If I do git pull, it tries to update test with the target branch. Is this right? If not, I think I don&#39;t understand what &#39;local repository&#39; means - I assumed it means my local master.><mohitmun
10556826><2013-05-29 00:00:14><origin/master is a local branch that is a COPY of master on origin. When you fetch, you update local:/origin/master. Once you really grok that everything in git is a branch, this makes a lot of sense and is a very powerful way to maintain different changesets, make quick local branches, merge and rebase, and generally get a lot of value out of the cheap branching model.><AgrimPathak
10556826><2015-02-26 22:57:50><Still confusing.  I thought <code>git fetch</code> was to literally download changes on the remote repo into your local repo, but NOT commit them - ie, they still need to be added/committed to your local repo.><CodeGeek
10556826><2015-02-27 03:45:36><fetch only pulls from remote/origin (github) to your local origin. But it doesn&#39;t merge it to your actual working files. if you do a pull it will fetch and the merge to your current working files><Sandeep
11527075><2017-08-30 15:57:02><Not that hard to read: the boxes represent the status of a  repo, that in each row changes in time left-to-right after the reported operation in row 2 of the box. The labels R0n are tags in git, and a tag with a + is yet uncommited stuff. Sanbox is used for your working folder, which is different from the repo folder, where commited stuff is stored.><NathanOliver
15003413><2013-06-07 18:38:29><I&#39;d rather say <code>git pull == git fetch + git merge</code> :)><Unheilig
15003413><2013-07-17 15:06:50><But <code>git pull --rebase = git fetch + git rebase</code>><chaws
15733096><2013-08-14 17:51:05><Technically, the local and remote repositories are really one and the same. In Git, a repository is a <a href="http://en.wikipedia.org/wiki/Directed_acyclic_graph" rel="nofollow noreferrer">DAG</a> of commits pointing to their parents. Branches are, technically, nothing more than meaningful names of commits. The only difference between local and remote branches is that remote ones are prefixed with <code>remoteName&#47;</code>  <a href="http://newartisans.com/2008/04/git-from-the-bottom-up/" rel="nofollow noreferrer">Git from the ground up</a> is a very good read. Once you get an understanding of how Git works - and it&#39;s beautifully <i>simple</i>, really - everything just makes sense.><MarianSpanik
15733096><2013-08-15 10:17:04><Thanks much for the explanation. I didn&#39;t really understand until now that Git was designed so you didn&#39;t have to have a central repository. Everyone always says &quot;DVCS&quot; when describing Git, but as a relatively new programmer, that means nothing to me. I&#39;ve never <b>seen</b> a CVCS, and I&#39;ve also never not worked with a cental remote repository when collaborating with others (i.e. Github), so until now I&#39;ve yet to understand what made Git special.><AdamFreeman
15733096><2013-08-15 10:23:38><So, based on this, why ISN&#39;T it a good idea to git-fetch with a cron job? Always keeping a copy of the remote you&#39;re working with on your local machine seems like a good idea. In fact, I feel like writing a script that checks to see if I&#39;ve updated my remote in the past 24 hours and linking it up with a udev hook for internet connection.><SachinVerma
15733096><2013-09-14 20:47:34><Silly question - Are these &quot;three copies&quot; maintained by Git and I never see it? or I have downloaded one copy and created two branches?><PeterCordes
15733096><2013-09-17 10:55:49><@Nabheet: I believe the additional copies are not stored as ordinary files on your file system, but instead as alternate histories (changesets) inside your git repository files.><dddJewelsbbb
15733096><2014-07-23 19:47:01><One reason why it ISN&#39;T a good idea to have a cron job:  often when working on either a new ticket, or on updates to a branch, I like to see the changes being fetched.  If the changes don&#39;t come in during a fetch, I&#39;ll be more confident in asking my fellow programmer &#39;hey did you push?&#39;.  I also get a sense of how much &#39;churn&#39; in the repository since I last fetched.  This also help to give me sense of the amount and speed of changes currently being made to this repository.><rahs
15733096><2016-11-05 17:43:18><@Nabheet Thing is that, Git is content-oriented. It stores data only once, and points to it multiple times. That&#39;s why in Git, even multiple commits on top of an original don&#39;t affect the size of the repo much, since most of the objects are the same.><demonkoryu
15733096><2016-11-20 03:28:12><@EmilLundberg &quot;Git from the ground up&quot; site has a broken link to the pdf file. You may want to update your comment to point to another location for the file.><GManNickG
15733096><2018-02-24 10:52:10><this is the most clarifying answer. I like to keep it simple but I would just add some technical names in parenthesis like Head, index and working tree/dir along with the simple explanations/analogies (e.g. where I keep my own code)><FilipBartuzi
15990759><2013-09-12 16:27:15><Sounds to me like if someone just wants the local code to reflect &quot;the tip&quot;, they should use <code>git clone</code>. I put the tip in quotes, as I assume it would mean whatever master is and what someone would &quot;Download as zip&quot; from github.com><Mysticial
15990759><2015-03-24 14:06:37><what if you&#39;re not happy with the changes after you git fetch? what to do next?><GManNickG
15990759><2016-03-03 08:01:20><Your paragraph on rebase was just what I was looking for. The whole idea about zeroing out of everything, updating from remote, then <b>replaying your changes on top of previous commits</b> that happened while you were working. Perfect explanation assuming it&#39;s correct. ;)><IndianKing
16920037><2013-09-12 06:01:21><And neither help if git thinks you are behind by commits and can &quot;fast-forward&quot;, which upon I ended up <code>rm -rf</code>ing the whole thing and starting over. Stupid Git, please just let me get current so I can go back to work?><Veve
21892643><2014-03-25 01:28:47><Doesn&#39;t a <code>git pull</code> also perform a merge, i.e. going all the way to the working copy?><ChristopheRoussy
21892643><2014-03-25 15:50:20><Good point, yes it will put all the changes in your working copy, and then you can commit it yourself into the local repo. I will update the visual.><IndianKing
21892643><2015-01-08 17:34:07><@JustusRomijn Doesn&#39;t a pull also update the local repository? Shouldn&#39;t there be an asterisk between the origin and working copy asterisks?><MalusJan
21892643><2015-01-12 15:17:24><@user764754 When you pull, your working copy get the changes (there can also be some conflicts which you might need to resolve). You still have to commit it into your local repository.><PeterWone
28365125><2016-10-04 08:41:48><People, click on the link to interact with the different columns. This cheatsheet is the best resource I&#39;ve seen to fully understand the differences between each command.><onmyway133
28365125><2019-10-26 14:12:44><THis Answer must go to the top><DanielFischer
30733500><2015-09-08 22:23:51><An updated image with <code>git clone</code> and <code>git merge</code> would be very helpful!><SlippD.Thompson
30733500><2015-10-22 03:57:33><Yes, please add <code>git merge</code> - it should clearly show that <code>merge</code> called separately is NOT the same as calling <code>pull</code> because <code>pull</code> is merging from remote only and ignores your local commits in your local branch which is tracking the remote branch being pulled from.><mp31415
30733500><2015-11-25 08:27:05><A picture is worth a thousand words! Is the updated image with clone and merge data flow ready somewhere? Any other data flow besides what&#39;s already in the diagram?><AdamFreeman
30733500><2016-01-16 00:02:32><@Contango please add clone and merge. Would be helpful for newbies like me.><SimonHrabec
34438903><2016-09-20 20:57:00><Nice tip, though it&#39;s worth mentioning to new git users that rebase modifies commit hashes (I found that surprising coming from subversion).><SlippD.Thompson
34438903><2018-01-17 15:02:10><Can you explain what is difference between <code>git pull</code> and <code>git pull --rebase</code> ?><Alice
34998582><2016-02-15 02:51:46><I think the picture got to show that it affects the local repo too.  That&#39;s is, Git pull is a combination of affecting the local repo and working copy.  Right now it seems it just affect the working copy.><NathanOliver
34998582><2016-08-20 23:33:23><@太極者無極而生 Agreed -- this image is pretty misleading, because it makes it look like <code>git pull</code> is <i>skipping</i> the fetch, which of course is inaccurate.><woojoo666
34998582><2017-11-16 11:12:58><whats a difference between a &#39;Local Repository&#39; and a &#39;Working Copy&#39;? Aren&#39;t they both local on the computer?><knickum
42092094><2018-06-04 08:17:05><if you could change &#39;Main Branch&#39; to &#39;Remote Repo&#39;, it would be a great answer.><woojoo666
44672602><2018-05-21 00:42:23><If you like the image then take a look at the git cheat sheet, which is the same sort of things for all git commands... <a href="http://ndpsoftware.com/git-cheatsheet.html" rel="nofollow noreferrer">ndpsoftware.com/git-cheatsheet.html</a>><Unheilig
44672602><2018-07-04 12:38:54><Doesn&#39;t clone also affect the local repository (copying all the history from remote)?><matec
45049899><2018-10-10 17:33:37><Nice graph, but you might want to explain why you use &quot;rebase&quot; when the graph says &quot;merge&quot;.><screwnut
45049899><2018-10-10 19:00:51><merge will represent another branch commit and produce new commit which contains commits as a reference. but rebase will replicate commits from another branch it wont create new commit rather than it replicate><knickum
54657340><2019-05-17 02:58:47><I like this answer><PeterCordes
477819><2017-04-04 13:08:21><<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types" rel="nofollow noreferrer">Complete list of MIME types</a>><TomasAndrle
477819><2017-07-24 03:42:07><Can I send file together Json text?><ChristopheRoussy
477819><2017-08-23 20:00:00><does it really matter what mime type it has? it&#39;s text that gets parsed into an object. wouldn&#39;t it be more natural to pass it as text/plain if you want it to be openable in browser without force download, and application/octet-stream if you want it to be automatically downloaded(useful if you&#39;re generating it on a webpage intended to be saved locally). Is there really that many people that will need to know the mime type so the downloader can view it with a special json viewer? What am I missing that warrants it a special mime type?><Ren233
477819><2017-11-22 05:27:46><Using &quot;text/plain&quot; is a bad practice in general. There are, for instance, attacks in the web platform that would allow cross-origin data theft if you fail to send an appropriate MIME type value.><PeterCordes
477819><2018-06-04 11:59:07><Internet Explorer sometimes has issues with application/json - blog is offline><FilipBartuzi
477821><2010-03-19 03:30:13><jQuery seems to work with at least  &#39;application/json&#39; and &#39;text/plain&#39;... I haven&#39;t tried all the others though.><GManNickG
477821><2017-07-27 19:13:43><jQuery is capable of working with <code>content-Type: text&#47;plain</code>, <code>content-Type: application&#47;json</code>, <code>content-Type: application&#47;json; charset=UTF-8</code>,  <code>contentType: &quot;application&#47;x-www-form-urlencoded; charset=UTF-8&quot;</code>><doug65536
1532020><2012-10-31 05:10:05><server response must go as text/html. This is true for the ExtJS variant as well.><PhilMiller
2590013><2011-07-06 04:47:12><A lot of stuff got put into the <code>text&#47;*</code> section in the early days that would probably be put into the <code>application&#47;*</code> section these days.><MarianSpanik
2590013><2018-01-17 04:59:19><@Rohmer - You &quot;can&quot; open anything in a text editor, but a binary format like JPEG or a Windows .exe or a .zip will contain non-printable characters which can actually break many text editors or cause undesired behavior. Try running <code>cat file.jpg</code> for example. Whereas any xml or json file is 100% printable. So I think Stijn de Witt&#39;s point is a valid one, despite the fact that yes, it&#39;s too late to change now.><screwnut
2590013><2018-04-05 19:55:44><@XP84 You can open any binary with a text editor in HEX form. And all the different characters (the 16 of them) are 100% printable. So, by that logic... <i>are all binaries text?</i> <b>Json is not text.</b> Json is <i>(warning: informal loose definition ahead)</i> a text representation of an object (or array of objects)><Mysticial
2590013><2018-05-22 05:53:54><There is no meaning to the phrase &quot;a text editor in HEX form&quot;. A Hex editor shows each byte as its hexadecimal value, for example, the byte 1111000 as &quot;78&quot;. While there may be some text editors which also happen to have a hex editing mode, this is neither common nor useful for anything but the most technical users doing the most technical tasks. Text, by comparison, means ASCII or Unicode, and in text, the byte 1111000 means lower-case <code>x</code> character. Not 78. JSON is text in exactly the same way as HTML (text/html). It contains only readable text characters, with structured meaning in them.><SimonHrabec
2590013><2018-09-01 23:59:36><I tend to agree with Stijn de Witt. JSON is meant to be viewed and edited with a text-editor.><dddJewelsbbb
4199917><2011-01-20 01:37:04><usually a reload is enough (faster than restart). Also, note that you can now do &quot;sudo service apache2 reload&quot;.><Veve
4199917><2012-05-26 01:52:09><Ubuntu 12.04 has this by default><onmyway133
7328339><2012-02-16 10:05:08><Tools that don&#39;t adhere to standards should be avoided whenever possible; use <code>application&#47;json</code> per spec.><Unheilig
7328339><2012-02-24 23:54:58><@one.beat.consumer while that is true, it&#39;s not specific to ExtJs per se. It&#39;s a browser limitation (or rather, perhaps, a &quot;security measure&quot;).><Unheilig
7328339><2012-08-10 20:34:46><Surely it would be better to use text/plain so it doesn&#39;t apply any HTML semantics to non-HTML content? Or don&#39;t browsers let you extract a frame&#39;s content if it&#39;s got no DOM?><TheGuyWithTheFace
11112320><2013-09-08 14:44:30><JSONP is not really JSON though, it&#39;s a technique for passing a JavaScript object literal><SazzadHissainKhan
15676686><2014-01-29 09:37:32><The definition of JSON is wrong. It does not need to be dynamically generated or respect query parameters. You can serve a static JSON file. Also, the most upvoted answer has a link to the RFC.><TomasAndrle
15676686><2014-01-30 21:16:57><Also JSONP can be json data assigned to a var.><dddJewelsbbb
15762612><2013-04-02 20:23:12><When did <code>text&#47;javascript</code> become obsolete? I&#39;m still filling up HTML documents with <code>&lt;script type=&quot;text&#47;javascript&quot; ...</code> tags.><PhilMiller
15762612><2013-04-02 20:34:43><It makes no difference for browsers, really. It&#39;s just obsolete for RFC standards: <a href="http://www.rfc-editor.org/rfc/rfc4329.txt" rel="nofollow noreferrer">rfc-editor.org/rfc/rfc4329.txt</a>><Atul
15762612><2013-06-28 05:41:03><@Oli you can safely drop <code>type=&quot;text&#47;javascript&quot;</code> and just do <code>&lt;script&gt;...&lt;&#47;script&gt;</code> at least according to HTML5.><AgrimPathak
16363110><2014-06-05 03:29:55><Example of such a situation?><TheGuyWithTheFace
17238862><2013-08-31 00:14:44><The first part of your answer is wrong. &quot;application/jsonp&quot; is not a valid MIME type. The response body of a JSONP is just JavaScript, so one of the MIME-types for JavaScript has to be used.><Ren233
17378317><2014-02-28 11:01:06><That&#39;s Java EE too :: <a href="http://docs.oracle.com/javaee/6/api/javax/ws/rs/core/MediaType.html#APPLICATION_JSON" rel="nofollow noreferrer">javax.ws.rs.core.MediaType</a>><jdero
30740848><2016-07-26 06:49:12><<code>application&#47;vnd.api+json</code> seems to be specifically for apis using <a href="http://jsonapi.org/" rel="nofollow noreferrer">json:api</a>, a very narrow specification with its own expectations and format, I don&#39;t understand it to be for <i>any</i> API that returns json. Please correct me if I&#39;m wrong><NathanOliver
39315895><2019-11-29 13:26:52><If I may start an argument here: The accept header in the request does not make the server reply in that format. As you said, it&#39;s the desired format. The q qualifier is a wieghtage. The server app can go ahead and reply in whatever format it desires if it doesn&#39;t do as the request says. Along the same vein, if the server app only supports xml, specifying json won&#39;t do any auto-convert; you&#39;ll get an xml response.><AdamFreeman
45558981><2019-09-03 22:40:13><For JSON text:     application/json     Content-Type: application/json><LewisKelsey
55581410><2019-08-20 23:44:20><Don&#39;t forget <code>text&#47;plain</code>><NicholasHamilton
231778><2008-10-25 02:11:04><This is close, but not correct.  Every time you call a function with a yield statement in it, it returns a brand new generator object.  It&#39;s only when you call that generator&#39;s .next() method that execution resumes after the last yield.><FilipBartuzi
231801><2008-10-25 10:03:38><<code>__getitem__</code> could be defined instead of <code>__iter__</code>. For example: <code>class it: pass; it.__getitem__ = lambda self, i: i*10 if i &lt; 10 else [][0]; for i in it(): print(i)</code>, It will print: 0, 10, 20, ..., 90><mp31415
231801><2017-05-06 22:37:55><I tried this example in Python 3.6 and if I create <code>iterator = some_function()</code>, the variable <code>iterator</code> does not have a function called <code>next()</code> anymore, but only a <code>__next__()</code> function. Thought I&#39;d mention it.><Ren233
231855><2017-05-24 05:41:53><<code>yield</code> is not as magical this answer suggests. When you call a function that contains a <code>yield</code> statement anywhere, you get a generator object, but no code runs. Then each time you extract an object from the generator, Python executes code in the function until it comes to a <code>yield</code> statement, then pauses and delivers the object. When you extract another object, Python resumes just after the <code>yield</code> and continues until it reaches another <code>yield</code> (often the same one, but one iteration later). This continues until the function runs off the end, at which point the generator is deemed exhausted.><FilipBartuzi
231855><2018-02-16 03:21:11><&quot;These iterables are handy... but you store all the values in memory and this is not always what you want&quot;, is either wrong or confusing. An iterable returns an iterator upon calling the iter() on the iterable, and an iterator doesn&#39;t always have to store its values in memory, depending on the implementation of the <b>iter</b> method, it can also generate values in the sequence on demand.><knickum
237028><2017-06-18 06:41:34><<i>&quot;When you see a function with yield statements, apply this easy trick to understand what will happen&quot;</i> Doesn&#39;t this completely ignore the fact that you can <code>send</code> into a generator, which is a huge part of the point of generators?><AndonM.Coleman
237028><2017-09-14 22:48:17><&quot;it could be a for loop, but it could also be code like <code>otherlist.extend(mylist)</code>&quot; -&gt; This is incorrect. <code>extend()</code> modifies the list in-place and does not return an iterable. Trying to loop over <code>otherlist.extend(mylist)</code> will fail with a <code>TypeError</code> because <code>extend()</code> implicitly returns <code>None</code>, and you can&#39;t loop over <code>None</code>.><SlippD.Thompson
237028><2017-12-27 02:53:57><@pedro You have misunderstood that sentence. It means that python performs the two mentioned steps on <code>mylist</code> (not on <code>otherlist</code>) when executing <code>otherlist.extend(mylist)</code>.><demonkoryu
14352675><2019-03-22 02:33:13><Just a note - in Python 3, <code>range</code> also returns a generator instead of a list, so you&#39;d also see a similar idea, except that <code>__repr__</code>/<code>__str__</code> are overridden to show a nicer result, in this case <code>range(1, 10, 2)</code>.><KyleMit
20704301><2018-07-02 09:44:08><You are correct. But what is the effect on flow which is to see the behaviour of &quot;yield&quot; ? I can change the algorithm in the name of mathmatics. Will it help to get different assessment of &quot;yield&quot; ?><MalusJan
21541902><2015-12-05 02:31:17><Cute! A <a href="https://en.wikipedia.org/wiki/Trampoline_(computing)" rel="nofollow noreferrer">trampoline</a> (in the Lisp sense). Not often one sees those!><MarianSpanik
41426583><2020-02-05 12:05:56><are you sure about that output?  wouldnt that only be printed on a single line if you ran that print statement using <code>print(i, end=&#39; &#39;)</code>?  Otherwise, i believe the default behavior would put each number on a new line><jdero
41426583><2020-02-05 22:58:14><@user9074332, You&#39;re right, but it is written on one line to facilitate understanding><LewisKelsey
47285378><2018-08-23 21:27:21><This is understandable, but one major difference is that you can have multiple yields in a function/method. The analogy totally breaks down at that point. Yield remembers its place in a function, so the next time you call next(), your function continues on to the next <code>yield</code>. This is important, I think, and should be expressed.><PhilMiller
59785342><2020-05-01 02:03:47><If you try to run this code, the <code>print(fun())</code> does not print numbers. Instead, it prints the representation of the generator object returned by <code>fun()</code> (something along the lines of <code>&lt;generator object fun at 0x6fffffe795c8&gt;</code>)><FilipBartuzi
348170><2014-04-26 20:09:03><I made a little summery which shows all ways to unstage a file: <a href="http://stackoverflow.com/questions/6919121/why-are-there-2-ways-to-unstage-a-file-in-git/16044987#16044987" title="why are there 2 ways to unstage a file in git">stackoverflow.com/questions/6919121/&hellip;</a>><AdamFreeman
348170><2016-09-05 22:57:00><Why not git checkout?><LewisKelsey
348170><2016-09-07 05:08:58><@ErikReppen <code>git checkout</code> does not remove staged changes from the commit index. It only reverts un-staged changes to the last committed revision - which by the way is not what I want either, I want those changes, I just want them in a later commit.><Alice
348170><2016-11-17 20:49:17><If you use Eclipse, it is as simple as unchecking the files in the commit dialogue box><Alice
348170><2017-02-04 05:13:30><This is a great resource straight from Github: <a href="https://github.com/blog/2019-how-to-undo-almost-anything-with-git" rel="nofollow noreferrer">How to undo &#40;almost&#41; anything with Git</a>><naveejr
348170><2017-06-15 23:29:32><Before you post a new answer, consider there are already 25+ answers for this question. Make sure that your answer contributes what is not among existing answers><DanielFischer
348170><2018-02-03 06:59:46><I wish I could upvote this every time I have to come back here to refer to it><onmyway133
348170><2018-02-13 19:48:01><git remove myfile.txt><TheGuyWithTheFace
348179><2015-08-26 13:29:10><Isn&#39;t this going to remove the file altogether?><Ren233
348234><2013-05-07 03:10:43><Of course, this is not a true undo, because if the wrong <code>git add</code> overwrote a previous staged uncommited version, we can&#39;t recover it. I tried to clarify this in my answer below.><ChristopheRoussy
348234><2013-11-26 22:25:19><<code>git reset HEAD *.ext</code> where <code>ext</code> is the files of the given extension you want to unadd. For me it was <code>*.bmp</code> &amp; <code>*.zip</code>><RenatoOliveira
348234><2015-10-16 11:39:48><git reset said it undid the changes but when I proceeded to do another git status, they still showed modified><MarianSpanik
348234><2016-02-17 13:53:02><So the opposite of &quot;add&quot; is &quot;reset&quot;? What about &quot;remove&quot;?><mp31415
348234><2016-03-16 20:27:34><@Jonny, the index (aka staging area) contains <i>all</i> the files, not just changed files.  It &quot;starts life&quot; (when you check out a commit or clone a repo) as a copy of all the files in the commit pointed to by HEAD.  So if you <i>remove</i> a file from the index (<code>git rm --cached</code>) it means you are preparing to make a commit that <i>deletes</i> that file.  <code>git reset HEAD &lt;filename&gt;</code> on the other hand will copy the file from HEAD to the index, so that the next commit won&#39;t show any changes being made to that file.><jdero
348234><2016-07-18 07:23:05><I just discovered that there is a <code>git reset -p</code> just like <code>git add -p</code>. This is awesome!><FilipBartuzi
348234><2016-12-16 02:33:19><<code>-p</code> most definitely is awesome, and it&#39;s used in a lot of git commands (not just reset and add).  But to answer @WeDoTDD.com and @Johnny, <code>git reset</code> by itself just clears whether Git &quot;knows about&quot; the changes; it doesn&#39;t clear the changes themselves.  To do that you need to do <code>git checkout someFile.txt</code> (for individual files) or <code>git reset --hard</code> (to wipe everything clean).  There&#39;s no going back from either of these commands though, so be very careful when using them.><dddJewelsbbb
348303><2013-05-07 02:25:26><The message will be different depending on whether the <code>add</code>ed file was already being tracked (the <code>add</code> only saved a new version to the cache -  here it will show your message). Elsewhere, if the file was not previously staged, it will display <code>use &quot;git rm --cached &lt;file&gt;...&quot; to unstage</code>><Sandeep
348303><2018-02-24 08:25:25><Great! The <code>git reset HEAD &lt;file&gt;</code> one is the only one that will work in case you want to unstage a file delete><onmyway133
682343><2009-11-11 20:21:03><Doesn&#39;t just &quot;git reset&quot; without . do what you want, or am I missing something?><doug65536
682343><2011-03-29 11:45:18><Hah. I followed this same process. Except I gave up and said <code>rm -rf .git</code>, <code>git init</code> because I didn&#39;t trust <code>git rm --cached</code> to keep my working copy. It says a little for how git is still overly complex in some places. <code>git unstage</code> should just be a stock standard command, I don&#39;t care if I can add it as an alias.><FilipBartuzi
1026792><2013-04-12 20:21:46><Mind that the <code>--cached</code> is a really important part here.><TomasAndrle
1026792><2015-10-31 07:42:05><-1; no, this doesn&#39;t un-stage the file, it stages a deletion of the file (without actually deleting it from your work tree).><FilipBartuzi
1764679><2013-05-15 21:36:21><Sure, but then you have the followup question of how one should unadd one of <i>two</i> (or more) files added.  The &quot;git reset&quot; manual does mention that &quot;git reset &lt;paths&gt;&quot; is the opposite of &quot;git add &lt;paths&gt;&quot;, however.><GManNickG
1764694><2010-03-09 07:15:52><One tip is to copy your .git/config file if you have added remote origin, before deleting the folder.><NathanOliver
1876958><2009-12-10 06:35:27><I wasn&#39;t looking to un-add everything, just ONE specific file.><IsmaelLuceno
2862736><2013-02-01 00:21:37><As it happens, there was a last commit... but I was specifically asking about removing a single file from the commit, not every file from the commit.><dddJewelsbbb
3688108><2017-06-08 17:18:33><&quot;moves&quot;? This would indicate it has gone from the working directory. That&#39;s not the case.><woojoo666
3688108><2017-06-24 02:25:52><Why is it obvious?><NicholasHamilton
3688108><2018-09-13 02:13:20><Actually, <code>git stage</code> is the alias for <code>git add</code>, which is the historic command, both on Git and other SCM. It has been added in december 2008 with commit 11920d28da in the &quot;Git&#39;s git repository&quot;, if I can say.><ChristopheRoussy
3688108><2019-07-12 18:21:02><This might be unrelated, but I&#39;ve found validating the file before even adding to be a useful idea, something like check-command filename &amp;&amp; git add filename, I replaced git with a shorter g in my machine, and so far it has worked ok for me:  <a href="https://github.com/dataf3l/g" rel="nofollow noreferrer">github.com/dataf3l/g</a> , I don&#39;t know if this will be useful to somebody, but I&#39;ll put it here in the hopes it saves some people&#39;s time.><onmyway133
6049090><2017-12-06 21:07:37><Strictly speaking there is a way to recover an already staged file that was replaced with git add. As you mention git add creates an git object for that file that will become a loose object not only when removing the file completely but also when being overwritten with new content. But there is no command to automatically recover it. Instead the file has to be identified and extracted manually or with tools written only for this case (libgit2 will allow this). But this will only pay out if the file is very important and big and could not be rebuild by editing the previous version.><knickum
6049090><2017-12-06 21:22:17><To correct myself: Once the loose object file is found (use meta-data like creation date/time) <code>git cat-file</code> could be used to recover its content.><Drt
6049090><2018-04-27 23:29:46><Another way to <b>recover changes that were staged but not committed and then overwritten</b> by e.g. another <code>git add</code> is via <code>git fsck --unreachable</code> that will list all unreachable obj, which you can then inspect by <code>git show SHA-1_ID</code> or <code>git fsck --lost-found</code> that will &gt;Write dangling objects into <code>.git&#47;lost-found&#47;commit&#47;</code> or <code>.git&#47;lost-found&#47;other&#47;</code>, depending on type. See also <code>git fsck --help</code>><SachinVerma
7542639><2012-10-04 05:32:16><Confirmed! Tried a git reset after a git add . and git was complaining about corrupt HEAD. Following your advice, I could git add &amp; reset back and forth with no problems :)><naveejr
7542639><2013-03-29 19:26:58><The second part works, but it is a bit clumsy. How line endings are handled, depends on <code>autocrlf</code> value... This won&#39;t work in every project, depending the settings.><AndonM.Coleman
7542639><2015-10-31 07:38:32><This answer was reasonable at the time it was posted, but is now obsolete; <code>git reset somefile</code> and <code>git reset</code> both work prior to making the first commit, now. This has been the case since several Git releases back.><KyleMit
7542639><2015-11-01 04:01:14><@MarkAmery, you may be right (it&#39;d be cool if you posted a source for your assertion), but there&#39;s still value in starting your repo with a clean commit or two.><AgrimPathak
7734259><2014-08-02 00:11:05><Yes I understand that. I only wanted to implicitly suggest that your indicate that on your answer like &quot;You can use <code>git-gui</code>....&quot; :)><Veve
7734259><2017-09-13 12:19:18><It says, &quot;git-gui: command not found&quot;. I&#39;m not sure if this works.><chaws
7734259><2019-04-11 12:27:43><Wow, this is much simple then doing command lines which you don&#39;t understood. <b>This is definitely recommended for a beginner like me.</b> Thanks for writing this up!><NathanOliver
11664712><2014-05-05 07:20:01><Actually, this does not reset every file because * uses shell expansion and it ignores dotfiles (and dot-directories).><dddJewelsbbb
11664712><2014-05-07 23:23:55><You can run <code>git status</code> to see anything remaining and reset it manually i.e. <code>git reset file</code>.><screwnut
15702135><2013-08-14 08:39:07><I can&#39;t under stand the difference of &#39;git reset head &lt;file&gt;&#39; and &#39;git rm --cached &lt;file&gt;. Could you explain it?><LutzPrechelt
15702135><2013-08-15 23:09:40><@jeswang files are either &#39;known&#39; to git (changes in them are being tracked.), or they are not &#39;versioned&#39;. <code>reset head</code> undoes your current changes, but the file is still being monitored by git. <code>rm --cached</code> takes the file out of versioning, so git no longer checks it for changes (and also removes eventually indexed present changes, told to git by the prior <code>add</code>), but the changed file will be kept in your working copy, that is in you file folder on the HDD.><PhilMiller
15702135><2014-08-11 03:54:43><The difference is <code>git reset HEAD &lt;file&gt;</code> is temporary - the command will be applied to the next commit only, but <code>git rm --cached &lt;file&gt;</code> will unstage untill it gets added again with <code>git add &lt;file&gt;</code>. Also, <code>git rm --cached &lt;file&gt;</code> means if you push that branch to the remote, anyone pulling the branch will get the file ACTUALLY deleted from their folder.><Alice
18475609><2014-05-05 07:21:06><Mind that * will usually not include dotfiles or &#39;dot-directories&#39; unless you explicitly specify <code>.*</code> or <code>.*.prj</code>><woojoo666
21171527><2015-10-31 07:44:32><+1. An extraordinary number of highly-upvoted answers and comments on this page are just flat-out wrong about the behaviour of <code>git rm --cached somefile</code>. I hope this answer makes its way up the page to a prominent position where it can protect newbies from being misled by all the false claims.><Unheilig
21171527><2019-06-10 09:10:36><one of the best answers on here, sadly it is quite low on the list><jdero
33281737><2015-10-31 07:52:13><<i>&quot;I&#39;m surprised that no one mention interactive mode&quot;</i> - they did: <a href="http://stackoverflow.com/a/10209776/1709587">stackoverflow.com/a/10209776/1709587</a>><jdero
34152896><2019-11-03 21:43:01><Yes, the same technique can be used with <a href="http://en.wikipedia.org/wiki/TortoiseGit" rel="nofollow noreferrer">TortoiseGit</a>, getting the Git commands for the common use cases.><PeterCordes
39850612><2017-03-26 08:59:40><Suppose I am at 1st pic meaning meaning I have not even did &quot;git.add&quot;. Also, I not at all want all this change. I mean when I do git status, it should not show any red files. I mean it should be in sync as if there was not a single file altered since the last git push. how to achieve that.><IsmaelLuceno
39850612><2017-03-26 09:00:12><SO suppose you are just at step first. And you want to get rid of all the changes you have done which is making &quot;newFile.txt&quot; to come up as red.><ChristopheRoussy
39850612><2017-03-26 09:00:50><When I do git status. I should not see any change at all. All the red files should get reverted.><matec
39850612><2017-03-26 18:19:04><Hi, I think your question is how to remove untracked files from the current tree. For that, you can use &quot;git clean -f -d&quot;. This will remove untracked directories as well.><AgrimPathak
39850612><2017-03-26 18:20:26><If you don&#39;t want to delete the untracked files, just ignore &quot;-f&quot; flag.><PrajwalDhatwalia
39850612><2017-03-26 19:06:35><It did not work. Suppose I did a git push. Now if I add a single line in my code and check git status. It will show a file in Red colour. Suppose I do not want that one line change at all. One option is I can do cntrl + z. But I want git to do that for me. I want my local project to  get in sync with the master repo. I mean when I do &quot;git status&quot; then I should see message as &quot;Its in sync with the master&quot;. And when I open my code I should have a message like &quot;some external source is making changes&quot; and when I say &quot;Yes&quot; to that prompt then the one line change that I had made shold be gone.><PhilMiller
39850612><2017-03-26 19:07:43><basically I want a git command which will revert all the changes which is making the git status to show &quot;red files&quot;><FilipBartuzi
39850612><2017-03-26 19:10:07><So I made a change to a file. I did not do anything else. NO git command at all (no git push not even git add or git commit). But now I want a git command which will revert those changes in my local repo.><matec
39850612><2017-03-26 19:21:10><In a more technical terms &quot;How to revert the file changes made in local repo which has not been put in the staging area&quot;><Veve
44800259><2019-11-03 21:52:03><Image: <i>&quot;The command add...&quot;</i> → <i>&quot;The command adds...&quot;</i> (<a href="https://www.youtube.com/watch?v=1Dax90QyXgI&amp;t=0m38s" rel="nofollow noreferrer">present simple tense, third person</a>)><GManNickG
44800259><2019-11-03 21:53:19><Image: <i>wanna</i> → <i>want to</i> (there is no need to use slang here)><rahs
46961177><2020-03-02 18:10:47><git reset [file name]  ex :  git reset  src/main/java/com/dao/ImportCsvDataDaoImpl.java><IsmaelLuceno
46986753><2018-01-23 07:47:24><Please explain the difference between <code>git reset &lt;file&gt;</code> and <code>git checkout &lt;file&gt;</code>.><woojoo666
46986753><2018-03-12 19:18:32><reset doesn&#39;t change the file, just put it away from the stage (=index, where it was put by git add)><MarianSpanik
46986753><2018-03-14 19:38:53><checkout change the codes in file and move to the last updated state. reset doesn&#39;t change the codes it just reset the header.  As example, reset use for added or committed files resetting before push and checkout use for back to the last updated/committed stage before git add.><NicholasHamilton
46986753><2018-09-12 18:16:22><reset = remove the file from stage however changes will still be there. checkout = gets the updated file from the repository and will overrides the current file><SimonHrabec
1642028><2009-10-29 15:09:47><Or even just proper spacing... I don&#39;t think I&#39;ve ever seen a space between the variable and either <code>++</code> or <code>--</code> before...><rahs
1642035><2009-10-29 15:14:52><Then again, it does kind of look like some kind of range operator in that context.><RenatoOliveira
1642035><2009-10-29 16:35:27><Saying that x is post-decremented and then compared to 0 is the same as saying x is decremented after being compared to 0><IndianKing
1642035><2009-11-18 20:54:07><I think first compare then decrement --x&gt;0 first decrement then compare><SlippD.Thompson
1642035><2010-01-31 01:42:40><I don&#39;t think it&#39;s the same. I think the word &quot;then&quot; implies there is an order (after post decrementing, x&#39;s value is one less). I think one can say &quot;You&#39;re post decrementing x and then comparing its old value and 0 ...&quot; to make it clearer. But this is nitpicking anyway. We all know what is meant.><jdero
1642036><2018-10-17 00:03:48><This is not quite right. The value of x inside the loop body is different in the second case. The assignment statement in your example should be <i>above</i> the logic for it to be equivalent. Postfix -- subtracts 1, but the comparison will happen with the value from <i>before</i> the subtraction.><Drt
1642036><2019-01-03 03:36:20><@uliwitness These are truly equivalent. It would be wrong if prefix were being used: <code>0 &gt;-- x</code> In this case <code>x</code> is decremented prior to the logic. In postfix, the logic is executed prior to the decrement and thus both samples are equivalent. Feel free to write them up in a <code>Console</code> and test them.><PeterCordes
1644241><2009-11-13 11:22:41><Goes to cant be true always especially when value of x is negative.><Atul
1644241><2010-06-21 16:57:44><The other version does not do the same thing - with <code>for (size_t x=10; x--&gt;0; )</code> the body of the loop is executed with 9,8,..,0 whereas the other version has 10,9,..,1. It&#39;s quite tricky to exit a loop down to zero with an unsigned variable otherwise.><mp31415
1644241><2013-06-15 10:49:10><I think this is a little bit misleading... We don&#39;t have a literally &quot;goes to&quot; operator, since we need another <code>++&gt;</code> to do the incremental work.><knickum
1644241><2013-12-06 14:57:56><@Josh: actually, overflow gives undefined behavior for <code>int</code>, so it could just as easily eat your dog as take <code>x</code> to zero if it  starts out negative.><TheGuyWithTheFace
1644241><2014-08-31 04:08:39><This is a very important idiom to me for the reason given in the comnmet by @PeteKirkham, as I often need to do decreasing loops over unsigned quantities all the way to <code>0</code>. (For comparison, the idiom of omitting tests for zero, such as writing <code>while (n--)</code> instead for unsigned <code>n</code>, buys you nothing and for me greatly hampers readability.) It also has the pleasant property that you specify <i>one more</i> than the initial index, which is usually what you want (e.g., for a loop over an array you specify its size). I also like <code>--&gt;</code> without space, as this makes the idiom easy to recognise.><SimonHrabec
1755737><2009-12-30 13:16:46><Not exactly true. Decrementing and Incrementing take the same amount of time, the benefit of this is that comparison to zero is very fast compared to comparison versus a variable.  This is true for many architectures, not just x86. Anything with a JZ instruction (jump if zero).  Poking around you can find many &quot;for&quot; loops that are written backwards to save cycles on the compare. This is particularly fast on x86 as the act of decrementing the variable set the zero flag appropriately, so you could then branch without having to explicitly compare the variable.><MalusJan
1755737><2010-04-12 23:07:58><Well, decrementing toward zero means you only have to compare against 0 per loop iteration, while iterating toward n means comparing with n each iteration.  The former tends to be easier (and on some architectures, is automatically tested after every data register operation).><NicholasHamilton
1985476><2011-12-05 05:32:19><Shouldn&#39;t this be <code>for(--x++;--x;++x--)</code>?><SazzadHissainKhan
1985476><2013-03-24 02:39:13><@DoctorT that&#39;s what <code>unsigned</code> is for><GManNickG
1985476><2015-06-19 10:02:01><@MateenUlhaq, that is wrong according to the standard the expression <code>--x++</code> has undefined behaviour according to &#167;1.9.15><LewisKelsey
1985476><2019-02-22 06:01:27><If it were using <code>unsigned</code>, it would have used <code>%u</code>><NicholasHamilton
2079545><2010-05-05 23:30:19><The result is only undefined when you&#39;re incrementing/decrementing the same variable more than once in the same statement. It doesn&#39;t apply to this situation.><AdamFreeman
2079545><2015-05-22 20:28:30><<code>while( x-- &gt; 0 ) actually means while( x &gt; 0)</code> - I&#39;m not sure what you were trying to say there, but the way you phrased it implies the <code>--</code> has no meaning whatsoever, which is obviously very wrong.><IsmaelLuceno
2079545><2020-02-25 00:41:38><To drive the point home from @Dukeling, this answer is <i>not the same</i> as the original post. In the original post, <code>x</code> will be <code>-1</code> after it leaves the loop, while in this answer, <code>x</code> will be <code>0</code>.><naveejr
2584185><2016-11-13 01:56:09><They&#39;re <i>applied</i> as the 2 separate operators they are. They&#39;re only <i>written</i> misleadingly to look like &quot;a single one&quot;.><LutzPrechelt
2604267><2010-05-05 23:26:03><Your second explanation is not correct. The compiler will see <code>a-----b</code> and think <code>(a--)-- - b</code>, which does not compile because <code>a--</code> does not return an lvalue.><Mysticial
2604267><2010-07-03 03:20:05><Additionally, <code>x</code> and <code>--</code> are two separate tokens.><LutzPrechelt
2604267><2014-09-01 11:34:53><@DoctorT: it passes the lexer. only semantic pass is capable of emmiting that error. so his explanation is correct.><AdamFreeman
2604267><2015-05-22 20:33:43><As long as you think <code>--&gt;</code> is an operator (which is what&#39;s implied by having the question that was asked), this answer isn&#39;t helpful at all - you&#39;ll think token 2 is <code>--&gt;</code>, not just <code>--</code>. If you know that <code>--&gt;</code> isn&#39;t an operator, you probably don&#39;t have a problem understanding the code in the question, so, unless you have a completely different question, I&#39;m not really sure how this could be useful.><woojoo666
2860927><2012-11-14 18:00:02><@SAFX - It would be perfectly hieroglyphics with <a href="http://www.codinghorror.com/blog/2012/07/new-programming-jargon.html" rel="nofollow noreferrer">egyptian brackets</a>><Ren233
8909176><2012-03-10 12:37:36><@mafutrct - As I remember it \ in C just appends the next line as if there was not a line break.  The \s here basically do nothing.><PrajwalDhatwalia
8909176><2013-05-21 02:10:06><@mafu the &#39;\&#39; character tells the compiler that the current line continues in the next line and so the compiler should merge both lines and compile as one. &#39;while (x -- &gt; 0)&#39; will run until x is equals to -1. But, the way he makes the indentations makes it look like x is sliding to zero. &#39;While x slides to 0...&#39;><rahs
8909176><2013-07-13 17:23:17><IIRC, K&amp;R C allowed whitespace between the &#39;-&#39;s in the decrement operator, in which case you could have the backslashes in the middle of it, which would look even cooler. :)><SachinVerma
8909176><2016-08-13 03:05:24><A backslash is an escape character, you are escaping the newlines using \&lt;enter&gt; so that the only thing the compiler sees is white space which is essentially removed, so this is equivalent to (x --    &gt; 0)><PhilMiller
12016806><2014-09-01 17:46:25><Except that ++&gt; can hardly be used in a while().  A &quot;goes up to...&quot; operator would be ++&lt;, which doesn&#39;t look anywhere as nice.  The operator --&gt; is a happy coincidence.><SlippD.Thompson
12016806><2016-11-13 01:57:29><@BenLeggiero That could &#39;work&#39; in the sense of generating code that does something (while infuriating readers who don&#39;t like faux-clever code), but the semantics are different, as its use of predecrement means it will execute one fewer iteration. As a contrived example, it would never execute the loop body if <code>x</code> started at 1, but <code>while ( (x--) &gt; 0 )</code> would. {edit} Eric Lippert covered both in his C# 4 release notes: <a href="https://blogs.msdn.microsoft.com/ericlippert/2010/04/01/some-last-minute-new-c-4-0-features/" rel="nofollow noreferrer">blogs.msdn.microsoft.com/ericlippert/2010/04/01/&hellip;</a>><Mysticial
21683994><2014-08-28 08:41:45><Which is what the OP assumed: that &quot;((a)--&gt;)&quot; was the maximal munch. It turns out that the OP&#39;s original assumption was incorrect: &quot;--&gt;&quot; is not a maximum valid operator.><woojoo666
21683994><2015-07-11 09:04:15><Also known as greedy parsing, if I recall correctly.><AdamFreeman
21683994><2016-09-11 10:21:50><@RoyTinker Greedy <i>scanning.</i> The parser has nothing to do with this.><mohitmun
27672749><2015-01-19 20:13:36><which operating system, this type of output generated, i am using a ubuntu 12.04 in that i had a error message><FilipBartuzi
27672749><2015-01-19 21:03:53><@Bhuvanesh operating system is irrelevant. This is simple C++ code (using <code>printf()</code>, because OP uses it), which should compile everywhere, so it must be your error. <a href="http://coliru.stacked-crooked.com/a/f5fdc710da0398c9" rel="nofollow noreferrer">coliru.stacked-crooked.com/a/f5fdc710da0398c9</a>><onmyway133
27672749><2015-03-26 10:41:40><Though it should be obvious, to everyone new to C++ reading this: don&#39;t do it. Just use augmented assignment if you have need to increment/decrement by more than one.><MalusJan
27672749><2016-03-10 05:54:16><Zero with &quot;lasers&quot;. while( 0 &gt; - - - - - -- -- -- -- -- ---------- x ) ... same output.><NicholasHamilton
27672749><2016-03-24 00:45:06><Nice try, but --x does not return an lvalue, so --(--x) does not compile.><MalusJan
27672749><2016-03-24 18:43:16><@phord are you sure it does not compile? --&gt; <a href="http://coliru.stacked-crooked.com/a/5aa89a65e3a86c98" rel="nofollow noreferrer">coliru.stacked-crooked.com/a/5aa89a65e3a86c98</a>><Drt
27672749><2016-03-25 22:58:46><@doc It compiles in c++, but not in c.><KyleMit
40288213><2016-10-27 23:32:01><This question is not about complications, but about ** Hidden Features and Dark Corners of C++/STL**><MarianSpanik
40288213><2017-05-13 17:30:30><The program here gives different output than original because x here is decremented after printf. That demonstrates well how &quot;simple  answers&quot; are usually Incorrect.><Unheilig
40288213><2017-12-16 02:33:22><<code>The OP&#39;s way:      9  8  7  6  5  4  3  2  1  0</code> and <code>The Garry_G way:  10  9  8  7  6  5  4  3  2  1</code>><LewisKelsey
40288213><2019-01-06 01:05:49><It doesn&#39;t do the same thing. Move your <code>x=x-1</code> before <code>printf</code> then you can say &quot;it does the same thing&quot;.><KyleMit
44231561><2017-07-15 03:07:40><This is incorrect. The code in the question does: &#39;test-write-execute&#39; (test first, write new value, execute the loop), your example is &#39;test-execute-write&#39;.><PeterCordes
44231561><2019-05-12 18:59:49><@v010dya Fixed the answer, now it&#39;s <code>test-write-execute</code> as in the question, thanks for pointing out!><LewisKelsey
6591213><2020-02-24 04:35:11><Hey guys: Problem, why do I get this error message: unknown option: -m     ???><chaws
6591218><2012-01-23 08:15:35><What I really wanted to know was whether this will necessarily effect the remote branch when/if you push><NicholasHamilton
6591218><2012-01-23 14:02:09><@PandaWood: it will add the new branch when you push, but won&#39;t delete the old branch. If you use <code>git push -f --mirror</code>, then it will rename the branch on the remote, but you should only use this method if the remote is simply to be a copy of your current repository. See also this question: <a href="http://stackoverflow.com/questions/1526794/git-rename-remote-branch" title="git rename remote branch">stackoverflow.com/questions/1526794/git-rename-remote-branch</a>><TomasAndrle
6591218><2013-11-01 07:46:51><@PandaWood, it depends on how <code>push.default</code> is configured. By default (<code>matching</code>) it will push to a remote whose name matches. You would have to do <code>git push origin &lt;newname&gt;:&lt;oldname&gt;</code> or you will create a new remote branch. However, if <code>push.default</code> is set to <code>upstream</code>, then you can <code>push origin head</code> and things will go to  the oldname on the remote.><SazzadHissainKhan
6591218><2014-09-03 10:27:41><@NightOwl888: the -m probably is short for &quot;move&quot;, following the Unix convention of using the <code>mv</code> to rename files. The reason for this is that moving and renaming, in a directory-based inode file system, are entirely equivalent.><AndonM.Coleman
6591218><2015-03-30 20:23:41><May not work on Windows. Git on Windows complains the branch already exists.><screwnut
6591218><2015-03-30 22:12:48><@Sam.Rueby: I am not able to reproduce that error. It works fine for me. I&#39;m using msysgit (git version 1.9.5.msysgit.0) on Windows 7, 64-bit.><jdero
6591218><2015-09-23 01:56:25><The long name of the <code>-m</code> option is <code>--move</code>, e.g., <code>git branch --move master</code> renames the current branch to be called &quot;master&quot;.><PeterWone
17217204><2015-05-09 05:04:31><You will need to use -M to rename if you are only changing capitalization, as git will tell you that branch already exists.><RenatoOliveira
18982837><2015-06-23 04:06:10><What happens to the overwritten branch?><naveejr
18982837><2015-06-27 00:48:39><It is overwritten by the new name/branch. For example if you have the following branches in git: master b1 &lt;-- current branch b2 after you do &#39;git branch -M b2&#39; you will only have: master b2 &lt;-- current branch  b1 will be gone and if you wish to recover it you should check it out by its hash. You can see it by typing &#39;git reflog&#39;. Cheers.><screwnut
18982837><2018-02-15 04:10:16><The <code>-M</code> flag is also useful to force a rename if you are just correcting the case of the branch name, e.g. changing <code>myBranch</code> to <code>MyBranch</code>. (With <code>-m</code>, git returns <code>fatal: A branch named &#39;MyBranch&#39; already exists.</code>)><GManNickG
19873535><2013-11-14 02:07:24><Couldn&#39;t you just have renamed the file in refs/heads?><CodeGeek
28928722><2015-03-09 01:05:54><I wouldn&#39;t call it pain. The git command is very easy to use, once you&#39;ve seen this answer, you&#39;ll probably never come back again. The problem is more that, so it seems, the <i>documentation</i> of the git command-line isn&#39;t intuitive enough.><mohitmun
28928722><2015-03-09 01:17:03><True but with SourceTree I hardly ever need to worry about checking documentation. Everything is generally intuitive - just right click and see what the options are. (BTW I&#39;m not affiliated with them in any way - just like the tool!)><ChristopheRoussy
29650705><2018-07-01 15:06:44><In which step would one unset the upstream? Before step 4?><SimonHrabec
29650705><2018-07-01 21:50:22><@Cyclonecode: yes. after step 4. But make sure you run git status to check if its has reference to old branch.><PhilMiller
29650705><2020-04-21 14:58:48><This is the best answer here as it describes the full process to correctly complete a rename><demonkoryu
30437750><2016-02-27 22:41:07><Note that this situation might also arise on a Mac, which is <i>also</i> (exceptionally annoyingly) case insensitive in its file system.><naveejr
30437750><2018-02-15 04:09:07><Alternatively, you can use <code>-M</code> instead of <code>-m</code> to do this kind of &quot;casing fix&quot; rename in a single step.><Drt
40034426><2018-02-23 23:26:47><<a href="https://stackoverflow.com/a/29650705/1030960">This one</a> worked better for me.  Here the 2 steps gave me the following errors: <code>error: dst ref refs&#47;heads&#47;&lt;old-name&gt; receives from more than one src.; error: failed to push some refs to &#39;git@uri:foo&#47;bar.git&#39;</code>><NathanOliver
40034426><2018-02-23 23:28:51><You got the problem when running the command <code>git push origin :old-name new-name</code> right?><Drt
40034426><2018-02-24 00:28:16><Yep exactly (sorry I meant &quot;2nd step&quot;, not &quot;2 steps&quot; -- tired)><Alice
45929730><2019-12-17 15:46:11><If you&#39;re having trouble remembering commands, you can set up shell or git aliases for yourself.><TomasAndrle
45929730><2020-01-06 14:31:30><what if I need run command on so many different machines?><SlippD.Thompson
49714850><2020-01-19 04:08:11><this works for me><SachinVerma
55291427><2019-08-17 11:33:12><I had also to do one addtional thing: <code>git push --set-upstream origin new_branchname</code> which is mentioned in @Nomade answer><SachinVerma
55291427><2020-03-25 09:22:24><Step 3 not needed. Everything was up-to-date after Step 2.><MarianSpanik
55291427><2020-03-25 10:19:52><@Dev not in all the cases Dev, I had to update recently since using bitbucket and codecommit, step 3 is necessary><IndianKing
57677469><2019-11-14 08:25:21><This seems like a repeat of the existing answers><Veve
5767332><2011-04-24 06:30:15><I&#39;m not a big fan of this approach. If you end up using different libraries or frameworks, they can end up conflicting with each other.><onmyway133
5767332><2012-07-10 06:10:08><Bad idea, see this post: <a href="http://stackoverflow.com/questions/948358/array-prototype-problem" title="array prototype problem">stackoverflow.com/questions/948358/array-prototype-problem</a>><Drt
5767332><2014-05-14 21:01:58><If you&#39;re doing a <code>for in</code> on an array, you already have a problem.><SazzadHissainKhan
5767332><2018-08-01 14:20:21><if you do <code>for in</code> on arrays, you already have bigger problems.><DanielFischer
5767332><2018-09-21 03:02:20><use Object.defineProperty <a href="https://stackoverflow.com/a/35518127/3779853">stackoverflow.com/a/35518127/3779853</a> and you&#39;re good to go.><AgrimPathak
5767335><2013-01-27 23:30:48><<code>delete</code> is not the correct way to remove an element from an array!><Drt
5767335><2013-01-27 23:36:52><@FelixKling It depends, it works if you want to make it so that <code>array.hasOwnProperty(i)</code> returns <code>false</code> and have the element at that position return <code>undefined</code>. But I&#39;ll admit that that&#39;s not a very common thing to want to do.><LewisKelsey
5767335><2013-02-17 11:44:59><<code>delete</code> will not update the length of the array neither really erases the element, only replaces it with the special value <code>undefined</code>.><SlippD.Thompson
5767335><2013-04-16 03:13:42><@diosney I don&#39;t know what you mean when you say it doesn&#39;t really erase the element. Further, it does more than simply replacing the value at that index with <code>undefined</code>: it removes both the index and the value from the array, i.e. after <code>delete array[0]</code>, <code>&quot;0&quot; in array</code> will return false.><Unheilig
5767335><2013-05-24 02:04:43><for(var i=array.length; i&gt;=0; i--) should be for(var i=array.length-1; i&gt;=0; i--) because indexing starts at 0 (there is no element at array[array.length])><PhilMiller
5767357><2011-04-24 06:28:10><@Peter, yes you might be right. This article explains more and has a workaround for incompatible browsers: <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf" rel="nofollow noreferrer">developer.mozilla.org/en/JavaScript/Reference/Global_Objects&zwnj;&#8203;/&hellip;</a>><Ren233
5767357><2013-03-02 10:33:52><You can ease up usage of this by adding a <code>delete</code> function on the array prototype. I’ve taken use of your example in <b><a href="https://gist.github.com/zykadelic/5069236#file-array-delete-js" rel="nofollow noreferrer">a gist</a></b> that deletes all targeted elements in the array instead of just 1.><dddJewelsbbb
5767357><2013-03-08 05:50:54><It’s too late to edit my last comment but I just want to correct myself. Calling <code>delete</code> on an array is no go in IE 8. I’ve updated the gist to use <code>destroy</code> instead.><doug65536
5767357><2013-09-27 02:18:20><Does splice preserve the array order??><CodeGeek
5767411><2014-07-04 22:20:43><<code>delete</code> is not the correct way to remove an element from an array!!><Unheilig
5767411><2014-08-12 00:40:29><If you want to &quot;empty a slot&quot;, use <code>array[index] = undefined;</code>. Using <code>delete</code> will destroy optimisation.><ChristopheRoussy
5767411><2014-12-15 03:14:58><@Jakub very good comment because to understand that I lost much time and thought my application code is somehow broken...><onmyway133
5767411><2019-02-06 00:31:34><Last paragraph with the explanation of what you get from indexOf was really helpful><NicholasHamilton
15762329><2014-12-31 00:13:41><@RolandIllig Except the use of a <code>for in</code>-loop and the fact that the script could stopped earlier, by returning the result from the loop directly. The upvotes 	 are reasonable ;)><matec
15762329><2016-08-22 07:12:41><This is an excellent approach for small arrays. It works in every browser, uses minimal and intuitive code, and without any extra complex frameworks, shims, or polyfills.><PhilMiller
15762329><2016-08-22 07:20:39><I should also reiterate yckart&#39;s comment that <code>for( i = 0; i &lt; arr.length; i++ )</code> would be a better approach since it preserves the exact indices versus whatever order the browser decides to store the items (with <code>for in</code>). Doing so also lets you get the array index of a value if you need it.><LewisKelsey
16521953><2014-01-24 01:34:08><destroy( [1,2,3,3,3,4,5], 3 ) returns [1,2,3,4,5]]. i should not be incremented when the array is spliced.><demonkoryu
16521953><2017-03-03 20:58:00><@RenzedeWaal this might work if you iterated over i backwards instead of forwards though. for (var i = arr.length; i-- &gt; 0; ) &#91; edit ] already posted <a href="http://stackoverflow.com/questions/5767325/how-to-remove-a-particular-element-from-an-array-in-javascript/18165553#18165553">here</a>><SlippD.Thompson
18165553><2014-01-30 04:06:34><@sroes it should not be because the loop starts at <code>i = arr.length -1</code> or <code>i--</code> making it same as the max index. <code>arr.length</code> is just an initial value for <code>i</code>. <code>i--</code> will always be <b>truthy</b> (and reducing by 1 at each loop op) until it equals <code>0</code> (a falsy value) and the loop will then stop.><KyleMit
18165553><2015-02-25 21:32:12><Second function is rather inefficient. On every iteration &quot;indexOf&quot; will start search from beginning of array.><onmyway133
18539905><2015-04-11 12:58:05><Just learned by the hard way why it is a good idea to use <code>Object.prototype.hasOwnProperty</code> always &#172;&#172;><DanielFischer
18885102><2015-07-29 19:50:21><Looks like the &#39;move&#39; method presented here should work in all browsers, and also avoids creating an extra array; most other solutions here have one or both of these problems. I think this one deserves a lot more votes, even if it doesn&#39;t look as &quot;pretty&quot;.><chaws
19017234><2020-04-12 09:03:00><An explanation would be in order.><mp31415
19244824><2014-12-10 06:15:23><jQuery is always good for taking care of any cross-browser compatibility issues of the different JavaScript APIs.><naveejr
20690490><2017-02-08 22:06:04><but, sometimes we want to remove element from original array(non immutable), for example array used in Angular 2 *ngFor directive><screwnut
21160506><2019-05-25 02:22:30><This is going to have terrible behavior if your array is really long and there are several instances of the element in it.  The indexOf method of array will start at the beginning every time, so your cost is going to be O(n^2).><Drt
21160506><2019-09-02 06:11:06><@Zag: It has a name: <a href="http://www.joelonsoftware.com/articles/fog0000000319.html" rel="nofollow noreferrer">Shlemiel the Painter&#39;s Algorithm</a>><MalusJan
21531501><2015-09-08 13:57:20><Just a note, 1 caveat with this method is the potential for stack overflows. Unless you&#39;re working with massive arrays, you shouldn&#39;t have an issue.><TheGuyWithTheFace
21531501><2019-09-02 06:14:16><But why a return in the middle? It is effectively a goto statement.><AgrimPathak
21688894><2017-07-29 02:21:57><Do you have a source on that this is faster?><SazzadHissainKhan
21688894><2017-07-29 02:28:36><Nice solution. But as you point out, but important to make bald, it does not produce the same result as slice and indexOf since it will remove all occurrences of 1><AdamFreeman
21688894><2017-07-29 04:05:09><@user3711421 this is because just slice and indexOf does not do what he wants &quot;to remove a specific element&quot;. It removes the element only once, this remove a specific element no matter how many of them do you have><matec
22529246><2014-05-01 01:05:56><Removes last item if searched item not found><IsmaelLuceno
22529246><2014-05-02 01:00:06><yes correct, you should know which element you want to remove like in the other examples.><SazzadHissainKhan
22529246><2016-04-18 23:31:37><This is jQuery, not core JavaScript.><rahs
22529246><2017-07-14 22:22:24><any other way for some repeated value max 5 times then create new array and remove that value from array? I HAVE THIS KIND OF ARRAY:  [&quot;info.specificAllergy&quot;, &quot;info.specificAllergy&quot;, &quot;info.specificAllergy&quot;, &quot;info.specificAllergy&quot;, &quot;info.specificAllergy&quot;, &quot;info.existingMedicalCondition&quot;, &quot;info.existingMedicalCondition&quot;, &quot;info.existingMedicalCondition&quot;, &quot;info.existingMedicalCondition&quot;, &quot;info.existingMedicalCondition&quot;]><RenatoOliveira
23427665><2015-09-21 03:42:45><I don&#39;t know that you need the -1 check (i &gt; -1).  Also, I think these functions act more like filter than remove.  If you pass row.id === 5, it will result in an array with only id 5, so it is doing the opposite of remove.  It would look nice in ES2015: var result = ArrayHelper.remove(myArray, row =&gt; row.id === 5);><rahs
23951789><2020-04-16 16:56:23><though elegant and concise, OP clearly mentioned core JS only><SimonHrabec
24420461><2014-09-25 22:40:36><This is very inefficient when the array is large.><doug65536
25887881><2014-12-13 02:51:31><but OP said: &quot;good ol&#39; fashioned JavaScript - no frameworks allowed&quot;><chaws
25887881><2016-06-17 17:38:40><for Chrome 50.0, A.splice(-1, 1); will remove the last one in A.><LutzPrechelt
26509484><2014-10-22 22:43:13><Your 2 last comments were just rewriting an accepted answer... Please answer a solved problem only if you have more information to provide than the accepted one. If not, just upvote the accepted answer.><NicholasHamilton
27157553><2015-05-18 11:03:07><While this link may answer the question, it is better to include the essential parts of the answer here and provide the link for reference.  Link-only answers can become invalid if the linked page changes.><Alice
27157553><2015-05-18 21:38:48><Sadly, the internet (and Stack Overflow) are filled with half-implemented, partially-correct versions of ES5 array methods.  That is entirely the point of the linking to the polyfill.  For a truly complete reproduction of <i>all</i> of the correct behaviors, it isn&#39;t good enough to summarize &quot;the essential parts.&quot;  You have to implement all of the edge conditions as well.  To reproduce their content in its entirety is well beyond the scope of Stack Overflow.  Stack Overflow is not GitHub.><ChristopheRoussy
29535421><2016-07-29 16:50:36><This is how I like to do it. Using an arrow function it can be a one-liner. I&#39;m curious about performance. Also worth nothing that this <i>replaces</i> the array. Any code with a reference to the <i>old array</i> will not notice the change.><demonkoryu
32212535><2015-09-25 05:01:50><That&#39;s not core JS as the OP requested, is it?><ChristopheRoussy
32212535><2015-10-01 11:38:30><@some-non-descript-user You are right. But a lot of users like me come here looking for a general answer not just for the OP only.><chaws
32212535><2018-06-09 05:48:30><@ChunYang You are absolutely right. I am already using lodash, why not just use it if it saves time.><SazzadHissainKhan
33718996><2015-12-17 22:22:59><What is meaning of this code I could not understand.><Atul
33718996><2015-12-26 03:16:37><@AnkurLoriya This code removes all 0s from the given array><AdamFreeman
36837818><2016-05-07 02:58:02><Note that <code>.filter</code> returns a new array, which is not exactly the same as removing the element from the same array.  The benefit of this approach is that you can chain array methods together.  eg: <code>[1,2,3].filter(n =&gt; n%2).map(n =&gt; n*n) === [ 1, 9 ]</code>><RenatoOliveira
36837818><2016-05-30 23:11:17><Great, if I have 600k elements in array and want to remove first 50k, can you imagine that slowness? This is not solution, there&#39;s need for function which just remove elements and returns nothing.><NicholasHamilton
38071922><2016-08-06 17:56:51><The OP specifically said no frameworks. Hence the downvote.><SachinVerma
38923942><2018-06-19 17:01:38><Also, no <code>removeAt</code> in ES standard. I suppose, this is some IE-only stuff? That should be mentioned in answer.><demonkoryu
39847263><2017-03-16 23:27:40><This answer is nice because it creates a copy of the original array, instead of modifying the original directly.><woojoo666
39847263><2019-01-28 03:45:05><Note: Array.prototype.filter is ECMAScript 5.1 (No IE8).  for more specific solutions: <a href="https://stackoverflow.com/a/54390552/8958729">stackoverflow.com/a/54390552/8958729</a>><DanielFischer
39924727><2020-04-08 02:30:04><Why not just use <code>filter</code> then? <code>array.filter((_, index) =&gt; index !== removedIndex);</code>.><naveejr
39924727><2020-04-08 04:37:15><@user4642212 you are right! also, I liked the underscore of Golang style><matec
42902202><2017-03-28 22:06:10><If you&#39;re going to name it <code>pop</code> at least make it do what the method name implies!><MalusJan
43311380><2019-10-02 05:04:35><<code>export const arrayRemove = (array, value) =&gt; [...array.filter(item =&gt; item !== value)];</code> Perhaps this could be simpler.><Alice
43311380><2019-10-02 07:05:54><@darmis Simpler, yes, but doesn&#39;t do exactly the same thing. Also don&#39;t think you need the <code>[...</code> -- <code>.filter</code> should already return a copy.><ChristopheRoussy
43311380><2019-10-02 15:21:04><@mpem My first impression was that could be a simpler way to do this but I agree is not doing the same thing. And yes the <code>[...</code> it is not needed in this case  so even simpler :) thanks for that.><dddJewelsbbb
43854346><2017-07-25 16:56:09><I like the idea, just think is a bit slow to do two stringify per element on the array. Anyway there are cases in which it will worth, thanks for sharing.><demonkoryu
43854346><2017-10-08 04:33:21><Thanks, I added an edit to clarify that valuesAreEqual can be substituted. I agree that the JSON approach is slow -- but it will always work. Should definitely use better comparison when possible.><Alice
43888738><2017-05-11 20:28:30><There is a small typo. Please correct. <code>this.splice(num.indexOf(x), 1);</code> =&gt; <code>this.splice(this.indexOf(x), 1);</code>><AndonM.Coleman
43888738><2017-05-24 11:29:54><Please don&#39;t augment built-ins (attach functions to Array.prototype) in JavaScript. This is widely regarded as bad practice.><doug65536
43888738><2017-05-25 16:45:07><I agree that&#39;s not the best thing to do in the world, but in this case how you could pass down it to the function?><NicholasHamilton
43888738><2018-01-26 17:38:10><You should check the index. If index = -1,  splice(-1,1) will remove the last element><Atul
43928167><2017-07-24 19:59:47><Are redundant constructions the norm around web developers? I have someone at work spraying stuff like this everywhere. Why not just <code>return value != elem</code>?!><AndonM.Coleman
45113099><2017-07-21 03:33:06><You can see that there are strings in the second example I provided? I am not sure what you mean by this? The only issue is if your string contains one of the charterers used in the separation, as I mentioned in my answer.><RenatoOliveira
45113099><2018-02-20 00:25:21><Interesting method, you can use Unicode characters for splitting (e.g. <code>&#39;\uD842&#39;</code>) instead. For making it clearer and shorter for others, I&#39;d just add a few more strings to the array elements (including <code>&#39;4&#39;</code>) and take out the first snippet/example (people may have downvoted because they didn&#39;t even read the 2nd part).><Mysticial
48802631><2018-07-29 22:44:45><You better be sure you know the element is in the array, otherwise findindex returns -1 and consequently removes the 9.><naveejr
51462109><2019-08-23 20:23:56><this may collide with other code, libraries, i would rather implement a remove function for that specific array><RenatoOliveira
52291636><2019-09-18 13:18:23><OP asked about removing a particular (one) element from an array. This function does not terminate when one element is found but keeps comparing every single element in the array until the end is reached.><IndianKing
53887037><2019-08-05 04:02:53><<a href="https://stackoverflow.com/questions/6223449/why-is-it-frowned-upon-to-modify-javascript-objects-prototypes" title="why is it frowned upon to modify javascript objects prototypes">stackoverflow.com/questions/6223449/&hellip;</a>><demonkoryu
54094030><2019-04-03 19:52:46><This is the answer that worked for me when trying to update an array based on radio button toggling.><knickum
54094030><2019-04-07 07:35:39><Beware, if <code>&quot;stringToRemoveFromArray&quot;</code> is not located your in array, this will remove last element of array.><rahs
54390552><2019-01-28 03:46:27><Note: Array.prototype.filter is ECMAScript 5.1 (No IE8)><knickum
54390552><2019-05-30 22:31:47><For option 4, should the loop be &#39;i &lt; arr.length&#39; not &#39;i &lt; arr.length-1&#39;?><AndonM.Coleman
55663687><2019-06-20 17:47:31><@codepleb, can you elaborate on why you prefer filter over splice and why you think filter is more readable?><CodeGeek
55663687><2019-06-20 18:07:26><Albeit not recommended for lengthy arrays.><rahs
55663687><2019-06-27 00:12:23><@MHOOS Slice has a lot of options and they are confusing IMHO. You can, if you want, pass a start and end variable and while the start index is included, the end index is not, etc. It&#39;s harder to read code playing with slice. If you don&#39;t use that too often, you often end up checking the docs during reviews to check if something is correct. Docs: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" rel="nofollow noreferrer">developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/&hellip;</a>><RenatoOliveira
57685052><2020-04-12 09:20:14><What is the advantage of that?><SlippD.Thompson
58197087><2020-03-13 21:38:07><So, what exactly is the advantage of this method? What I see is that it&#39;s a terribly inefficient and error-prone method of performing a simple task. The result is not parsed again so it returns an array of strings instead of the input type. Even if it was parsed, on arrays of objects it would remove all function members. I don&#39;t see any good reason to ever do something like that but given that there are two people who thought this was a good idea, there must be something I&#39;m missing.><NathanOliver
59406346><2020-01-31 05:03:23><Not valid for all browsers><matec
59406346><2020-03-09 01:25:17><Perhaps qualify <i>&quot;all browsers&quot;</i>?><dddJewelsbbb
59661328><2020-01-23 10:09:59><This doesn&#39;t remove the item from the array. It creates a brand new array with some items from the original array filtered out.><Veve
59661328><2020-01-23 12:30:34><Yes it will return new array filtered. let me update code><dddJewelsbbb
79923><2013-12-16 19:32:49><a really good explanation can be found here <a href="http://www.programmerinterview.com/index.php/data-structures/difference-between-stack-and-heap/" rel="nofollow noreferrer">What’s the difference between a stack and a heap?</a>><SimonHrabec
79923><2014-02-15 13:50:34><Also (really) good: <a href="http://www.codeproject.com/Articles/76153/Six-important-NET-concepts-Stack-heap-value-types" rel="nofollow noreferrer">codeproject.com/Articles/76153/&hellip;</a> (the stack/heap part)><PrajwalDhatwalia
79923><2016-06-11 13:42:54><<a href="https://www.youtube.com/watch?v=clOUdVDDzIM&amp;spfreload=5" rel="nofollow noreferrer">youtube.com/watch?v=clOUdVDDzIM&amp;spfreload=5</a>><AndonM.Coleman
79923><2017-06-22 00:23:19><Related, see <a href="http://www.openwall.com/lists/oss-security/2017/06/19/1" rel="nofollow noreferrer">Stack Clash</a>. The Stack Clash remediations affected some aspects of system variables and behaviors like <code>rlimit_stack</code>. Also see Red Hat <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1463241" rel="nofollow noreferrer">Issue 1463241</a>><SachinVerma
79923><2017-11-13 06:38:03><@mattshane The definitions of stack and heap don&#39;t depend on value and reference types whatsoever.  In other words, the stack and heap can be fully defined even if value and reference types never existed.  Further, when understanding value and reference types, the stack is just an implementation detail.  Per Eric Lippert: <a href="https://blogs.msdn.microsoft.com/ericlippert/2009/04/27/the-stack-is-an-implementation-detail-part-one/" rel="nofollow noreferrer">The Stack Is An Implementation Detail, Part One</a>.><SazzadHissainKhan
79923><2019-07-05 15:20:55><Not clear in answers: For a language runtime (e.g. .NET), there is one stack per thread, to manage method calls/local variables, and only one heap set for all processes of the runtime. Heap is supervised by the garbage collector. Runtime stacks/heap space is part of the contiguous virtual memory allocated by the OS to the processes (itself fed by physical RAM chunks in no specific order) upon request of the processes. Confusion around &quot;stacks&quot; is due to the existence of many &quot;stack&quot; kinds in a computer, not related to language runtime stacks. A &quot;stack&quot; is just a LIFO storage structure.><chaws
79936><2009-03-19 06:48:52><The pointer pBuffer and the value of b are located on the stack, and are mostly likely allocated at the entrance to the function.  Depending on the compiler, buffer may be allocated at the function entrance, as well.><AndonM.Coleman
79936><2009-09-01 12:37:30><It is a common misconception that the <code>C</code> language, as defined by the <code>C99</code> language standard (available at <a href="http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf" rel="nofollow noreferrer">open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf</a> ), requires a &quot;stack&quot;.  In fact, the word &#39;stack&#39; does not even appear in the standard. This answers statements wrt/ to <code>C</code>&#39;s stack usage are true in general, but is in no way required by the language.  See <a href="http://www.knosof.co.uk/cbook/cbook.html" rel="nofollow noreferrer">knosof.co.uk/cbook/cbook.html</a> for more info, and in particular how <code>C</code> is implemented on odd-ball architectures such as <a href="http://en.wikipedia.org/wiki/Burroughs_large_systems" rel="nofollow noreferrer">en.wikipedia.org/wiki/Burroughs_large_systems</a>><dddJewelsbbb
79988><2008-09-17 12:31:42><A recommendation to avoid using the heap is pretty strong. Modern systems have good heap managers, and modern dynamic languages use the heap extensively (without the programmer really worrying about it). I&#39;d say use the heap, but with a manual allocator, don&#39;t forget to free!><AgrimPathak
79988><2008-09-17 12:35:51><If you can use the stack or the heap, use the stack. If you can&#39;t use the stack, really no choice. I use both a lot, and of course using std::vector or similar hits the heap. For a novice, you avoid the heap because the stack is simply so easy!!><demonkoryu
79997><2008-09-17 12:37:38><Also worth mentioning here that intel heavily optimizes stack accesses, especially things such as predicting where you return from a function.><demonkoryu
80094><2017-07-30 19:19:36><Re &quot;as opposed to alloc&quot;: Do you mean &quot;as opposed to malloc&quot;?><woojoo666
80094><2017-07-30 19:20:14><How portable is <code>alloca</code>?><FilipBartuzi
80094><2017-11-02 01:38:27><@PeterMortensen it&#39;s not POSIX, portability not guaranteed.><ChristopheRoussy
80113><2013-10-08 16:31:45><Good answer - but I think you should add that while the stack is allocated by the OS when the process starts (assuming the existence of an OS), it is maintained inline by the program.  This is another reason the stack is faster, as well - push and pop operations are typically one machine instruction, and modern machines can do at least 3 of them in one cycle, whereas allocating or freeing heap involves calling into OS code.><SimonHrabec
80113><2016-08-16 03:06:04><I&#39;m really confused by the diagram at the end. I thought I got it until I saw that image.><DanielFischer
80113><2016-10-13 23:06:55><@Anarelle the processor runs instructions with or without an os.  An example close to my heart is the SNES, which had no API calls, no OS as we know it today - but it had a stack.  Allocating on a stack is addition and subtraction on these systems and that is fine for variables destroyed when they are popped by returning from the function that created them, but constrast that to, say, a constructor, of which the result can&#39;t just be thrown away.  For that we need the heap, which is not tied to call and return.  Most OS have APIs a heap, no reason to do it on your own><FilipBartuzi
80113><2018-07-22 14:22:38><&quot;stack is the memory set aside as scratch space&quot;. Cool. But where is it actually &quot;set aside&quot; in terms of Java memory structure?? Is it Heap memory/Non-heap memory/Other (Java memory structure as per  <a href="https://betsol.com/2017/06/java-memory-management-for-java-virtual-machine-jvm/" rel="nofollow noreferrer">betsol.com/2017/06/&hellip;</a> )><naveejr
80113><2018-09-06 23:41:48><@JatinShashoo Java runtime, as bytecode interpreter, adds one more level of virtualization, so what you referred to is just Java application point of view. From operating system point of view all that is just a heap, where Java runtime process allocates some of its space as &quot;non-heap&quot; memory for processed bytecode. Rest of that OS-level heap is used as application-level heap, where object&#39;s data are stored.><DanielFischer
80113><2018-09-06 23:47:15><So, stack is &quot;set aside&quot; heap in OS-level terms. Stack is managed directly by thread using CPU instructions and heap is a region of regular memory mapped by OS.><MalusJan
80113><2019-04-26 16:19:57><Hi. I think your post (which is great otherwise) does not clearly state that the heap is slower than the stack only when you CREATE stuff (objects). When you ACCESS stuff, the heap should have about the same speed as the stack.><TomasAndrle
80113><2019-05-13 23:01:28><@sqykly Would it be proper to call older games OSs in and of themselves? They have some kind of graphical interface, manage low-level I/O, and have full access to all the hardware, as well as running as the &quot;root-level&quot; process. It&#39;s for these reasons that I&#39;ve always seen them this way, and even consoles as new as the Wii only really ran one thing at a time: the HOME menu was built into each and every game, rather than being provided by the &quot;main OS&quot; (the main menu), which doesn&#39;t run in the background at all. Excluding newer consoles, most older games seem to each fill the role of an OS.><naveejr
80113><2019-08-14 03:18:03><@SinaMadani hahaha same here.><LutzPrechelt
80113><2019-08-28 02:29:36><Nice answer. But you should have say that also stack is faster because it may be keep in processor register instead of memory.><FilipBartuzi
662454><2012-08-11 00:00:48><Wrong image for a stack; it should be something like <a href="http://www.thermo-box.co.uk/images/stories/FiniW/self%20levelling%20dispenser%20trolleys.jpg" rel="nofollow noreferrer">thermo-box.co.uk/images/stories/FiniW/&hellip;</a> which is why it&#39;s also called a &#39;push-down stack&#39;.><Ren233
662454><2012-08-13 11:40:14><David I don&#39;t agree that that is a good image or that &quot;push-down stack&quot; is a good term to illustrate the concept.  When you add something to a stack, the other contents of the stack <i>aren&#39;t</i> pushed down, they remain where they are.><LutzPrechelt
662454><2012-11-11 07:07:01><This answer includes a big mistake. Static variables are not allocated on the stack. See my answer [link] <a href="http://stackoverflow.com/a/13326916/1763801">stackoverflow.com/a/13326916/1763801</a> for clarification. you are equating &quot;automatic&quot; variables with &quot;static&quot; variables, but they are not at all the same><Mysticial
662454><2012-11-11 09:44:52><Specifically, you say &quot;statically allocated local variables&quot; are allocated on the stack. Actually they are allocated in the data segment. Only automatically allocated variables (which includes most but not all local variables and also things like function parameters passed in by value rather than by reference) are allocated on the stack.><PeterWone
662454><2012-11-12 08:26:33><When I said &quot;statically allocated&quot; local variables I meant as opposed to dynamically allocated.  If you start a function with <code>int a;</code>, <i>a</i> will go on the stack.  If you start a function with <code>int *a = (int *) malloc(32768*sizeof(int));</code> then the contents of that array will not be on the stack as they&#39;re dynamically allocated.><Atul
662454><2012-11-12 08:29:15><I&#39;ve just realised you&#39;re right - in C, <i>static allocation</i> is its own separate thing rather than a term for anything that&#39;s not <i>dynamic</i>.  I&#39;ve edited my answer, thanks.><ChristopheRoussy
662454><2012-11-13 01:16:28><It&#39;s not just C. Java, Pascal, Python and many others all have the notions of static versus automatic versus dynamic allocation. Saying &quot;static allocation&quot; means the same thing just about everywhere. In no language does static allocation mean &quot;not dynamic&quot;. You want the term &quot;automatic&quot; allocation for what you are describing (i.e. the things on the stack).><GManNickG
662454><2012-11-13 02:13:56><and if you want to see this in action in python instead of c, i added more code samples below :)><knickum
662570><2012-02-12 14:36:42><[@T.E.D.] Why did you say &quot;sometimes the parameters get pushed on the stack&quot;? What I know is that they <i>always</i> are. Could you please elaborate more?><dddJewelsbbb
662570><2012-04-03 23:57:07><@OmarOthman - I say that because it is entirely up to the writer of your compiler/interpreter what happens when a subroutine is called. Classic Fortran behavior is to not use a stack at all. Some languages support exotic things like pass-by-name, which is effectively a textual substitution.><demonkoryu
662783><2017-07-30 20:00:54><How portable is <code>alloca</code>? For instance, does it work on Windows? Is it only for Unix-like operating systems?><PeterWone
707970><2017-04-25 17:02:17><<i>&quot;I like the accepted answer better since it&#39;s even more low level.&quot;</i> That&#39;s a bad thing, not a good thing.><SimonHrabec
1213360><2012-04-26 00:42:17><@Martin - A very good answer/explanation than the more abstract accepted answer. A sample assembly program showing stack pointers/registers being used vis a vis function calls would be more illustrative.><naveejr
1213360><2014-02-15 18:26:30><Every reference type is composition of value types(int, string etc).  As it is said, that value types are stored in stack than how does it work when they are part of reference type.><woojoo666
1213360><2014-03-20 03:59:21><This answer was the best in my opinion, because it helped me understand what a return statement really is and how it relates to this &quot;return address&quot; that I come across every now and then, what it means to push a function onto the stack, and why functions are pushed onto stacks. Great answer!><AgrimPathak
1213360><2014-11-29 10:00:15><This is the best in my opinion, namely for mentioning that the heap/stack are <i>very</i> implementation specific. The other answers assume a <i>lot</i> of things about the language and the environment/OS. +1><screwnut
1213360><2015-05-03 17:36:25><What do you mean &quot;The code in the function is then able to navigate up the stack from the current stack pointer to locate these values.&quot; ? Can you elaborate on this please?><Sandeep
1213360><2015-05-03 18:59:29><@KorayTugay: When the function starts executing the top of the stack (lowest address because the stack is &quot;inverted&quot;) contains the return address (<i>ret</i>). The function arguments (<i>args</i>) are below this in the stack (at higher address). The declaration of the function arguments determine the layout of the arguments on the stack and the code in the function can access these arguments by only knowing the stack pointer when the function is entered and the exact size and sequence of the arguments. Everything is relative to the stack pointer.><Unheilig
1213360><2015-05-03 22:30:58><@MartinLiversage I thought they were accessed by array indexes.><KyleMit
1213360><2015-05-03 22:37:10><@KorayTugay: My explanation is at the CPU/machine code/assembly level where there are only registers and memory that can be addressed to be able to read and write data. In general arrays are a higher level (programming language) concept. OK, CPU&#39;s have vector instructions but they are not important when you try to understand the stack.><screwnut
13308092><2012-11-11 07:05:05><This is incorrect. i and cls are not &quot;static&quot; variables. they are called &quot;local&quot; or &quot;automatic&quot; variables. It is a very important distinction. See [link] <a href="http://stackoverflow.com/a/13326916/1763801">stackoverflow.com/a/13326916/1763801</a> for clarification><Alice
13308092><2012-11-20 22:38:13><I did not say they were static <i>variables</i>. I said that int and cls1 are static <i>items</i>. Their memory is statically allocated and therefore they go on the stack. This is in contrast to an object which requires dynamic memory allocation which therefore goes on the heap.><Veve
13326916><2013-12-10 05:53:25><I would refer to a static variable declared within a function as having only local <i>accessibility</i>, but would generally not use the term &quot;scope&quot; with it.  Also, it may be worth noting that the one stack/heap aspect with which languages have essentially zero flexibility: a language which saves execution context on a stack cannot use that same stack to hold things which will need to outlive the contexts wherein they are created.  Some languages like <code>PostScript</code> have multiple stacks, but have a &quot;heap&quot; that behaves more like a stack.><Drt
13326916><2013-12-18 04:28:57><@supercat That all makes sense. I defined scope as &quot;what parts of the code can <i>access</i> a variable&quot; (and feel this is the most standard definition) so I think we agree :)><TomasAndrle
45361888><2017-07-30 20:34:40><What is OPP? Do you mean OOP (<a href="http://en.wikipedia.org/wiki/Object-oriented_programming" rel="nofollow noreferrer">object-oriented_programming</a>)?><Drt
45361888><2017-07-30 20:35:56><Do you mean to say that <code>malloc</code> is a kernel call?><MalusJan
45361888><2017-08-03 20:18:19><1) yes, sorry.. OOP... 2) malloc: I write shortly, sorry ... malloc is in user space.. but can trigger down other calls.... the point is that using heap CAN be very slow...><KyleMit
45361888><2019-07-05 15:48:17><&quot;<i>A lot of answers are correct as concepts, but we must note that a stack is needed by the hardware (i.e. microprocessor) to allow calling subroutines (CALL in assembly language..)</i>&quot;. You&#39;re confusing the CPU stack (if there was one in modern CPU) and the language runtime stacks (one per thread). When programmers talk about a stack, this is the thread execution stack of the runtime, e.g. a NET thread stack), we are not talking about the CPU stack.><PhilMiller
47314733><2018-12-06 03:14:07><concise and clean. nice:)><CodeGeek
503093><2012-06-07 22:24:45><I keep seeing both window.location = url; and window.location.href = url; How are they different? Are they? BTW, I didn&#39;t know about window.location.replace(url). Nice.><dddJewelsbbb
503093><2012-08-07 15:03:58><<code>window.location</code> is the same as <code>window.location.href</code>, in terms of behavior. <code>window.location</code> returns an object. If <code>.href</code> is not set, <code>window.location</code> defaults to change the parameter <code>.href</code>. Conclude: Use either one is fine.><FilipBartuzi
506004><2012-04-19 19:52:02><in case of submit button add return false ; also inside your function><woojoo666
506004><2013-01-24 08:51:34><The question is about javascript specifically, but it may be worth noting that a meta refresh can be used as a fail back in case the user has javascript disabled><LutzPrechelt
506004><2013-06-07 21:28:29><@Nicol&#242;Martini If(IE) document.write(&quot;&quot;);><RenatoOliveira
1638449><2012-01-12 20:00:40><This is that literal answer to the question. If you are already using Jquery and therefore have it already loaded then it will be more bandwidth efficient and of course clearer to use the shortcut><Mysticial
1638449><2012-03-01 00:03:25><More importantly, is there a way to do this with jQuery that is absracted?  This is just a wrapper for window.location.href = url; But if jQuery had some function that, if window.location.href = url; wasn&#39;t going to work in the current environment (browser, OS, etc.) jQuery core could compensate?><jdero
1638449><2012-10-03 18:32:36><Forcing jQuery into the equation in this way is just ridiculous and pointless, especially since <code>window.location</code> is not an element and therefore does not have attributes.><NicholasHamilton
1638449><2013-02-18 20:08:28><I think window.location does not work on some IE versions.The point of jQuery is not just easing front end scripting but making it cross browser too.><rahs
1638449><2013-07-03 19:23:52><I somehow doubt this still works with recent jQuery versions where <code>.attr()</code> actually sets attributes (i.e. <code>.setAttribute()</code>)><NathanOliver
1638449><2014-01-23 23:48:46><@deltaray This is <b>not</b> another way to redirect, like said above, it&#39;s a meaningless wrapper around the location object, which, is not even an element! This reminds me of <a href="http://i.stack.imgur.com/ssRUr.gif" rel="nofollow noreferrer">i.stack.imgur.com/ssRUr.gif</a>><CodeGeek
1638449><2014-04-05 04:06:58><also <code>$(location)[0].href = url;</code> and even <code>$, location.href = url;</code>  I prefer second jQuery solution><dddJewelsbbb
1638449><2014-08-12 04:06:16><I know it is an old question, there is a curiosity: some XSS filters don&#39;t allow things like <code>&lt;script&gt;location=&quot;http:&#47;&#47;example.com;&lt;&#47;script&gt;&quot;</code> and will block it, but if you use jQuery they will not block it.><CodeGeek
1638449><2014-10-12 09:05:18><No need for the warning, the OP asked for a JQ answer, and so he/she shall receive.><SachinVerma
1638449><2014-12-10 05:50:28><jQuery will at least take care of any cross-browser compatibility issues with the different JavaScript APIs.><mp31415
1638449><2015-11-19 05:54:00><Why on earth would you ever do this. JQuery is meant as a DOM manipulation library. Not for this. This solution is a bad solution. The OP asked for JQuery and the answer should be to tell the OP that JQuery is not needed and not used for this. The right tool for the right job. JQuery is great for DOM but should not be forced to do things its not meant to do.><GManNickG
4001713><2018-06-12 22:06:41><You could also do <code>document.location.replace(redirectURL)</code> if you don&#39;t want the first page to be in the browser history><FilipBartuzi
7311088><2019-07-26 05:04:54><Just because it works, doesn&#39;t mean you should do it. This is a pointless indirection around setting <code>window.location</code>><rahs
10720518><2015-06-25 07:14:27><JQuery is arguably a better idea as it could abstract away future browser changes/deprecations><MarianSpanik
10720518><2019-07-26 11:04:36><@Epirocks If there was an API in jQuery designed for this, that could be a valid reason (altho it&#39;s doubtful this API would ever change), but the example here is just misusing a feature of jQuery where you can wrap non-DOM objects and some methods will still work.><SlippD.Thompson
10720518><2019-09-01 07:15:11><The fact that &#39;some methods will still work&#39; is exactly what I mean by abstracting away. Yes you can do it without JQuery, but you can do anything without JQuery it&#39;s besides the point.><rahs
11690095><2013-01-30 07:41:11><Foot note: checking for referrer as a security measure is a lousy solution. <a href="https://duckduckgo.com/?q=referrer+spoofing" rel="nofollow noreferrer">duckduckgo.com/?q=referrer+spoofing</a>><KyleMit
11690095><2015-08-21 12:31:05><If you have an HTTP GET session ID in the referrer URL it can be used to check that against the session for validity.><matec
11690095><2015-10-01 02:35:27><@mcpDESIGNS are you sure that you&#39;ve tried to use <code>location.assign</code>? I use in my app with IE8, and I don&#39;t lose the <code>HTTP_REFERER</code> header.><Atul
11690095><2018-02-26 08:41:47><At least back in 2012 it wasn&#39;t working, maybe later patches of IE8 fixed it - that&#39;s good to hear though!><TheGuyWithTheFace
11690095><2019-01-09 18:09:54><Your mention of HTTP_REFERER helped me understand the problem I&#39;m having with window.open and I found a solution here: <a href="https://stackoverflow.com/questions/7580613/url-referer-not-working-on-pop-up-windows" title="url referer not working on pop up windows">stackoverflow.com/questions/7580613/&hellip;</a>. By the way I&#39;m having the problem in IE11!><screwnut
11690095><2019-03-07 15:16:40><Here I mentions some other use of window.location.  <code>window.location.href</code> returns the href (URL) of the current page  <code>window.location.hostname</code> returns the domain name of the web host  <code>window.location.pathname</code> returns the path and filename of the current page  <code>window.location.protocol</code> returns the web protocol used (http: or https:)  <code>window.location.assign</code> loads a new document><IsmaelLuceno
13138776><2014-01-17 08:21:28><window.location.replace(window.location.protocol + &quot;//&quot; + window.location.host)><doug65536
13138776><2014-06-22 07:56:02><even simpler:  <code>window.location = &#39;&#47;&#39;</code>><IndianKing
20276808><2014-04-05 05:33:51><better do this: setTimeout(function() {window.location.href = &quot;<a href="http://www.google.com/" rel="nofollow noreferrer">google.com</a>&quot;}, delay);><NathanOliver
21396837><2014-11-27 02:19:10><<code>window.navigate</code> is old-IE-only (Firefox/Chrome do not support this). If you want to enumerate all options, don&#39;t forget about <code>document.location</code>.><Mysticial
21396837><2015-07-31 04:22:46><document.location = document.referrer;  Please add it in list also. This does not work like History.back rather makes the page Refresh again.><PhilMiller
21396837><2016-06-20 04:41:21><.attr() will not work on jQuery 3.0.0. use .val() instead.><mohitmun
21396837><2017-09-18 18:43:02><@L&#233;oLam That&#39;s why there is a search engine called Google. :-) You can search each each one on Google and find the difference. You don&#39;t want to pick one randomly.><AgrimPathak
21396837><2018-05-25 18:12:24><You could see docs too, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Location" rel="nofollow noreferrer">developer.mozilla.org/en-US/docs/Web/API/Location</a>><screwnut
21600238><2017-11-01 05:18:27><&quot;Using jQuery&quot; is um, inaccurate. And the example of using a complete URL won&#39;t work, as that&#39;s not a complete URL. There&#39;s no protocol, so it&#39;ll be interpreted as a relative URL.><DanielFischer
21636975><2014-02-11 15:05:13><@Phil you ever came across sub directories in you application suppose if you&#39;re on <a href="http://www.url.com/admin/login.aspx" rel="nofollow noreferrer">url.com/admin/login.aspx</a> you want to go to <a href="http://www.url.com/customer/orders.aspx" rel="nofollow noreferrer">url.com/customer/orders.aspx</a>  window.location.host will give you <a href="http://www.url.com" rel="nofollow noreferrer">url.com</a> then you can append your sub directory and page><knickum
25537534><2015-06-27 20:16:27><I address his request for jQuery by saying it&#39;s not needed. JQuery has a lot of great useful shortcuts for JavaScript but there is no need for any shortcuts for redirects. JQuery is just JavaScript. Nothing more. The normal way to call a redirect will work with his functions using jQuery.><CodeGeek
25717627><2014-12-19 00:54:29><don&#39;t use inline click events. Bad practice and is not going to be supported in future iterations of all web browsers.><ChristopheRoussy
27660935><2019-12-22 03:00:43><Javascript header: Is it possible to do the time in seconds instead?><NicholasHamilton
27660935><2020-01-05 05:53:26><@PythonMaster202 - you can create a function that converts milliseconds and returns seconds * 1000 as a result, but what&#39;s the point? Why not just use 1 | 0 and code like a donkey? There are many things in coding that create many ??? marks, however, hence we are using someone else&#39;s programming language, perhaps the questions of this sort should go to the founders of the code everyone is using today...or....create your own language with full seconds as default and then create a function that divides seconds into milliseconds when you need to count premature ejaculation time :)><MalusJan
27660935><2020-01-05 05:54:55><Thanks:) This text was put here because otherwise, it wouldn&#39;t be 15 characters. BTW - you sound a bit flustered. Voldemort getting at you?><KyleMit
30388857><2017-08-10 13:00:02><Is there a reason for storing the url in jQuery as a variable, but not with Vanilla?><PhilMiller
34093201><2015-12-05 02:55:17><Why are you passing <code>window</code> to the jQuery function in this line: <code>jQuery(window).redirect(...)</code>?><SazzadHissainKhan
34093201><2015-12-05 06:20:15><@A1rPun what i need to pass window ord document ?><GManNickG
34093201><2016-07-10 06:10:34><This doesn&#39;t make sense as something that should be a jQuery method. There&#39;s no difference between <code>$(&quot;div&quot;).redirect(url)</code> and <code>$().redirect(url)</code>. You could make it a static method, like <code>$.redirect(url)</code> but there&#39;s not really much need for that either. jQuery doesn&#39;t need to be involved at all.><AdamFreeman
37864649><2016-06-17 20:47:04><what is the difference between this answer and the first ?><SlippD.Thompson
40214952><2017-03-10 01:30:20><There is no reason to use jQuery for this and <code>window.</code> is unnecessary.><IndianKing
40214952><2017-03-10 19:23:18><Where i have used window. in jquery Query Example ?  ... if you want to redirect the page through javascript ... than you need to use window.location..><AgrimPathak
40214952><2017-03-17 07:34:05><I meant those as separate things: you shouldn&#39;t use jQuery for this, and in the JavaScript example, you can simplify <code>window.location.href =</code> to <code>location.href =</code> or even <code>location =</code>.><mohitmun
40214952><2017-03-21 19:01:48><Yes location.href = would be better option to redirect the page -:)><Unheilig
42469170><2018-08-23 15:57:15><I recommend using <code>assign()</code> over <code>href=</code> too as the latter did not work properly for me in some cases.><ChristopheRoussy
178325><2011-02-01 11:57:34><It&#39;s worth mentioning (even after all this time), that <code>$(element).is(&quot;:visible&quot;)</code> works for jQuery 1.4.4, but not for jQuery 1.3.2, under <a href="http://en.wikipedia.org/wiki/Internet_Explorer_8" rel="nofollow noreferrer">Internet&amp;nbsp;Explorer&amp;nbsp;8</a>. This can be tested using <a href="http://stackoverflow.com/questions/178325/testing-if-something-is-hidden-with-jquery/178450#178450">Tsvetomir Tsonev&#39;s helpful test snippet</a>. Just remember to change the version of jQuery, to test under each one.><PeterWone
178344><2010-03-03 18:10:48><This only checks for the display property of a single element. The :visible attribute checks also the visibility of the parent elements.><AdamFreeman
178344><2012-01-14 02:51:41><This is the only solution that worked for me when testing with IE 8.><LewisKelsey
178344><2014-03-15 01:56:14><@chiborg Yes, but sometimes that&#39;s what you want and I had to learn the hard way how &quot;clever&quot; jQuery was...><Atul
178344><2015-04-14 17:18:30><This does answer the question, being the question is about a single element and by using the <code>hide()</code>, <code>show()</code> and <code>toggle()</code> functions, however, as most have already said, we should use the <code>:visible</code> and <code>:hidden</code> pseudo-classes.><DanielFischer
178386><2011-07-12 01:05:57><just be careful, there are some good performance related tips in this presentation: <a href="http://addyosmani.com/jqprovenperformance/" rel="nofollow noreferrer">addyosmani.com/jqprovenperformance</a>><CodeGeek
178386><2012-07-05 04:12:04><On pages 21 to 28 it shows how slow :hidden or :visible is compared to other selectors. Thanks for pointing this.><AdamFreeman
178386><2013-02-20 22:56:49><When you&#39;re dealing with a couple of elements and very little is going on - i.e. THE ABSURDLY VAST MAJORITY OF CASES - the time issue is a ridiculously minor concern. Oh, noes! It took 42 ms instead of 19 ms!!!><NathanOliver
178386><2013-08-09 15:18:33><I am toggling the element mamually using this selector. $(&#39;element:hidden&#39;) is always true for me!><Unheilig
178386><2015-11-18 23:57:48><:hidden is for form elements, not display:none. This is not the answer people are most likely expecting.><woojoo666
178386><2016-01-15 12:15:16><@cwingrav You might want to re-read the documentation, :hidden applies to all elements. Form elements with <code>type=&quot;hidden&quot;</code> is just one case that can trigger :hidden. Elements with no height and width, elements with <code>display: none</code>, and elements with hidden ancestors will also qualify as :hidden.><chaws
178450><2010-12-30 02:30:57><This solution would seem to encourage the confustion of <code>visible=false</code> and <code>display:none</code>; whereas Mote&#39;s solution clearly illistrates the coders intent to check the <code>display:none</code>; (via mention of hide and show which control <code>display:none</code> not <code>visible=true</code>)><MalusJan
178450><2011-01-06 20:30:27><That is correct, but <code>:visible</code> will also check if the parent elements are visible, as chiborg pointed out.><PeterWone
178450><2011-01-11 10:07:31><Tsvetomir, this doesn&#39;t work for IE7 - even when the elements are hidden it thinks that visible=true. Please correct your answer to avoid misleading people. visible and display are different properties and should be treated as such. Mote&#39;s answer is the correct one.><jdero
178450><2011-01-15 00:54:41><You have a point - I&#39;ll make it clear that the code checks only for the <code>display</code> property. Given that the the original question is for <code>show()</code> and <code>hide()</code>, and they set <code>display</code>, my answer is correct. By the way it does work with IE7, here&#39;s a test snippet - <a href="http://jsfiddle.net/MWZss/" rel="nofollow noreferrer">jsfiddle.net/MWZss</a> ;><PeterWone
178450><2012-01-05 23:36:15><I actually found that the reverse logic words better: !$(&#39;selector&#39;).is(&#39;:hidden&#39;); for some reason.  Worth a try.><AgrimPathak
178450><2012-06-22 22:12:11><Here&#39;s a simple benchmark testing is() against regexp:<a href="http://jsperf.com/jquery-is-vs-regexp-for-css-visibility" rel="nofollow noreferrer">jsperf.com/jquery-is-vs-regexp-for-css-visibility</a>. Conclusion: if you&#39;re out for performance, use regexp over is() (since is() looks for all hidden nodes first before looking at the actual element).><LewisKelsey
178450><2012-09-10 17:43:43><Tchalvak, you may feel something is right, but try to explain why. Double negation is confusing as opposed to simple statement, so  $(&#39;selector&#39;).is(&#39;:shown&#39;); is much clearer than  !$(&#39;selector&#39;).is(&#39;:hidden&#39;);><PeterWone
178450><2012-10-23 16:43:11><@TsvetomirTsonev, to check the parent&#39;s visibility, you can                      use    $(element).parent().is(&quot;:visible&quot;);  I know this is bit old, but will useful for new search><onmyway133
178450><2013-01-03 05:30:44><What does <code>$(element).is(&quot;:visible&quot;)</code> return, if the element is visible in terms of not <code>having display:none</code> or <code>visibility:hidden</code>, but the user scrolled down so he doesn&#39;t actually see it? Is there a simple way to check that?><PeterWone
1181809><2012-04-22 06:32:30><No reason to extract the DOM node in the snippet used in the example, and then have to look it back up again.  Better to just do:     var $button = $(&#39;#btnUpdate&#39;);  And then in the If expressions just use $button instead of $(button).  Has the advantage of caching the jQuery object.><naveejr
1181809><2018-04-29 21:28:08><here&#39;s is a simple example <a href="http://www.jquerypot.com/how-to-check-an-element-is-visible-or-not-with-jquery/" rel="nofollow noreferrer">jquerypot.com/&hellip;</a>><GManNickG
4685330><2017-05-08 17:34:11><wondering why no answer mentions the case when element is moved away from the visible window, like <code>top:-1000px</code>... Guess it&#39;s an edge-case><SazzadHissainKhan
5423934><2013-05-12 06:37:45><This answer is good to handle <code>visibility</code> literally, but the question was <code>How you would test if an element has been hidden or shown using jQuery?</code>. Using jQuery means: the <code>display</code> property.><mohitmun
5423934><2013-10-16 17:12:04><Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout. See <a href="http://stackoverflow.com/a/8266879/109392">answer by <b>Pedro Rainho</b></a> and <a href="http://api.jquery.com/visible-selector" rel="nofollow noreferrer">jQuery documentation</a> on the <code>:visible</code> selector.><Veve
5423934><2014-04-23 03:20:11><you need to traverse up the DOM to check the node&#39;s parents, or else ,this is useless.><Atul
9131633><2012-09-26 07:57:15><<code>.hasClass(&#39;hide&#39;)</code> doesn&#39;t check if an ancestor of the parent is hidden (which would make it hidden too). You could possibly get this to work correctly by checking if <code>.closest(&#39;.hide&#39;).length &gt; 0</code>, but why reinvent the wheel?><screwnut
10305968><2012-06-30 02:15:21><Another difference between <code>visibility:hidden</code> and <code>opacity:0</code> is that the element will still respond to events (like clicks) with <code>opacity:0</code>. I learned that trick making a custom button for file uploads.><PeterWone
10305968><2017-12-12 19:08:36><also if you hide input with opacity:0, it still gets selected with tab key><Unheilig
11511035><2012-09-20 12:45:23><Works slightly differently to jQuery&#39;s; it considers <code>visibility: hidden</code> to be <i>visible</i>.><naveejr
11579654><2012-09-26 07:31:33><What language/dialect/library is this? I&#39;m not familiar with this syntax in JS...><NathanOliver
14515952><2013-01-25 14:30:44><@Adrew but this link is showing working example of this function. I think a practical answer may weight over a full page of text :)><Mysticial
16919498><2013-06-21 05:32:30><How did you determined that saving a selector in variable is really faster?><SazzadHissainKhan
16919498><2013-06-21 14:56:50><Hi @Ilia Rostovtsev  <a href="http://jsperf.com/caching-jquery-selectors" rel="nofollow noreferrer">jsperf.com/caching-jquery-selectors</a> There you can run the test. Anyways it&#39;s nice to have it cached so it can be accessed faster><KyleMit
19801208><2013-12-25 16:53:21><Or, y&#39;kno, just get rid of the entire conditional and say <code>$(&#39;elementToToggle&#39;).toggle(&#39;slow&#39;);</code>... <code>:)</code>><LewisKelsey
23027643><2015-09-01 14:42:13><Because     :not(&#39;:hidden&#39;)     is not the same as     is(&#39;:visible&#39;). &quot;Visible&quot; works with css &quot;opacity&quot; not with JQuery &quot;show()/hide()&quot;. Plus, there is no extra quotation. Every set plays a role in this little code.><CodeGeek
23027643><2015-09-01 15:26:19><1) both <code>:visible</code> and <code>:hidden</code> check CSS element and ancestor visibility and not just the <code>display: none</code> as you now suggest. 2) quotes <i>inside a pseudo-selector</i> are <i>not</i> required if the selector contains only <code>:</code> and alphanumerics (e.g. <code>:not(:hidden)</code> is the same as <code>not(&#39;:hidden&#39;)</code> (only a little faster) and 3) how will you become better if you cannot accept that you may actually be incorrect sometimes? :)><Drt
37561155><2016-12-08 00:36:20><Just a note, if the selector returns an empty set of items, this method will return true, so check length first if you looking for invisible items : <code>var items = jQuery(&#39;.selector&#39;); if (items.length == 0 || !items.isVisible()) {       alert(&#39;item is not visible&#39;); }</code>><Alice
179123><2008-10-11 04:12:17><For those somewhat new to git: Laurie&#39;s point about having not yet pushed is important.  Like rebasing, this is changing the history.  If someone has cloned/pulled from your repo between the original and rewritten history then they won&#39;t be able to pull after the rewrite (for that branch).><AndonM.Coleman
179147><2010-07-05 16:40:35><However <code>git commit --amend</code> isnt as powerful as <code>git rebase -i</code>.><mohitmun
179147><2010-07-14 14:02:30><@jeffjose, It definitely doesn&#39;t need to be.  Also, <code>git commit --amend</code> can fix up the (a?) master commit.><Alice
179147><2012-05-02 22:12:24><If you&#39;ve already pushed, just force push again: <code>git push -f origin branchname</code>><LewisKelsey
179147><2012-11-08 15:48:41><@hughes isn&#39;t <code>git push -f</code> a bit dangerous if other people are using the same repository?><IndianKing
179147><2012-11-14 23:38:10><If you don&#39;t want to rewrite the entire commit message, go for <code>git commit --amend -c HEAD</code>.  This will open the editor pre-populated with your old commit message, so you can change it.><Mysticial
179147><2012-12-08 04:37:31><What @Sam says also seems to work if you just type <code>git commit --amend</code> with nothing else following.><dddJewelsbbb
179147><2013-05-23 23:05:45><@hughes Don&#39;t force push to repositories that other people are using without warning them first!! Otherwise it results in a bizarre conflict when they try to fetch again. If that person doesn&#39;t know what he/she is doing, they might resolve the conflict incorrectly and then push <i>that</i>, which would screw up the repository even further.><SlippD.Thompson
180085><2010-01-22 03:57:18><Can one change the message of the first commit (which doesn&#39;t have a parent)?><Alice
2219560><2011-10-15 00:58:32><I did git commit --amend -m &quot;New message&quot;, but pushing to Github generated the &quot;Merge the remote changes before pushing again&quot;. After pull, commit --amend, and push again, the new message doesn&#39;t appear. Instead I have &quot;Merge branch &#39;master&#39; of github.com:[myrepo]&quot;><SlippD.Thompson
2219560><2013-04-25 16:21:20><@DaveEveritt you most likely pushed your commit upstream before trying to fix it.><NathanOliver
2219560><2013-04-25 16:41:27><@Thorbj&#248;rnRavnAndersen - thanks, that was 2 years ago, these days I&#39;ve got my git workflow sorted!><CodeGeek
2219560><2013-06-12 05:11:57><@Kyralessa not true. In bash you can easily compose multiline commit messages by just not closing the quote until you&#39;re done (hitting return at the end of each line within the quotes).><Ren233
2219560><2014-01-15 13:30:22><I don&#39;t get how an answer that looks a lot like just the main idea of an answer that was written two years ago and also the accepted answer gets so many votes. Strange. (nothing wrong with the answer though)><Drt
2219560><2014-05-21 10:36:03><@happycoder: Because the question is very popular and the first hit on Google (and many other search engines) for many git-related terms. And people find it useful.><AndonM.Coleman
2219560><2014-05-22 04:16:23><@AmalMurali, well. My point wasn&#39;t so much about the popularity of the question, nor the utility of the answer. But this particular answer is not the oldest answer, nor does it offer any further insight into the accepted answer. It appears to be a copy of a section of the accepted answer. That was my point. CHEERS!><IndianKing
2219560><2015-01-10 17:04:48><@EarlJenkins Yeah, it&#39;s a little funny, but I&#39;m glad they do go into depth even for the &quot;simple&quot; questions.><woojoo666
2219560><2015-07-08 02:31:33><Little thing, if you actually did push the commit to a remote before editing, you can &quot;fix&quot; it with git push -f &lt;remote&gt; &lt;branch&gt;, aka force push. It&#39;ll overwrite the previous commit. Not the best method as @Dan explained, but there&#39;s not much you can do there.><Mysticial
6258114><2015-09-22 13:56:35><And if you don&#39;t want to add everything, you can first do <code>git add file.ext</code> then just <code>git commit --amend</code>><MalusJan
7070976><2013-08-22 04:21:59><<code>git rebase -i HEAD~commit_count</code> will also allow you to change the commit messages of however many commits you choose. Just mark the chosen commits as &quot;reword&quot; instead of &quot;pick&quot;.><PeterCordes
7070976><2016-04-21 16:56:35><What if you don&#39;t want to rebase? You just want to change an older message?><MarianSpanik
7070976><2018-03-01 01:44:56><<code>git reset --hard</code> annihilates uncommitted changes.  Please replace <code>--hard</code> with <code>--soft</code>.><NathanOliver
7070976><2019-07-22 21:52:20><Agreed, <code>git reset --hard</code> is a perfectly legitimate command, but it is misleading given the question. You use <code>--hard</code> if you committed changes you want to throw away, not if you made a typo in the commit message!><MalusJan
12231177><2013-03-29 04:08:13><Is there a version of this that does not change the commit if the regex doesn&#39;t find anything?><LewisKelsey
12231177><2013-03-30 00:16:25><AFAIK filter-branch --msg-filter will generate new commits in any case. However, you could check within the msg-filter, if the sed succeeded and use this information when the filter-branch operation ends to reset your tree to refs/original.><PeterCordes
12231177><2013-07-07 03:08:37><@DavidHogue This is only true when using the filter-branch method. The commit IDs following a modified commit do not change if you use the interactive rebase.><KyleMit
12231177><2014-01-11 12:45:27><@Mark Yes they do, they are required to. Commit ids are dependent on previous commits. If they didn&#39;t change, git would be useless.><SachinVerma
12231177><2014-07-29 19:18:49><You need <code>$flawed_commit^..HEAD</code>, not <code>$flawed_commit..HEAD</code>. as stated by the man page: &#171;<i>The command will only rewrite the positive refs mentioned in the command line (e.g. if you pass a..b, only b will be rewritten).</i>&#187;><rahs
13010393><2019-05-02 09:16:22><Downvoted as well. People just don&#39;t bother to <a href="https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits/6258114#comment98541887_13282142">read existing answers</a>.><onmyway133
13282142><2019-05-02 09:15:38><This answer is <i>literally</i> identical to this <a href="https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits/6258114#6258114">older one</a>. Have you checked existing answers before supplying another one?><dddJewelsbbb
13394598><2013-06-29 11:17:38><This answer doesn&#39;t address the OP&#39;s question, as they&#39;re purely interested in fixing a commit they&#39;ve only just done.  I regularly use <code>git commit --amend</code> to fix up comments or add files I forgot to <code>git add</code>, but only <i>ever</i> before I&#39;ve <code>git push</code>ed.  I also use <code>git filter-branch</code> when I want to totally mess with the version history, but the OP doesn&#39;t want this, so this answer needs a big health warning - don&#39;t try this at home, peeps!!><Atul
14260056><2013-03-30 00:27:38><For me, using your command above actually creates a new commit with a new commit ID plus an extra commit saying &quot;merge branch&quot; as a default commit message.><dddJewelsbbb
14260056><2013-06-19 17:30:11><Amending <i>always</i> creates a new commit with a new commit ID. The commit ID is the SHA hash of the contents of the commit, including the commit message and authored/committed timestamps. This is a feature of Git that, barring hash collisions, ensures that two commits with the same ID are exactly the same commit, with exactly the same content, history and so on.><MalusJan
14260056><2013-09-30 03:12:37><Agree with Emil. Additionally, reading the docs - it seems that all &quot;-c&quot; does is tell git which commit&#39;s message to use as the default/template for your new commit..Really its already going to do &quot;-c &lt;commit ID&gt;&quot; by default, so no need to specify it.><mohitmun
14260056><2014-12-28 10:55:53><The <code>-c</code> does a few things. It uses the old message by default, but it also copies authorship information (person and time). <code>-C</code> does the same thing except that it does not ask you to edit the message.><SachinVerma
14260056><2015-04-14 13:22:17><Like @SantanuDey , it didn&#39;t work for me. I got <code>fatal: Option -m cannot be combined with -c&#47;-C&#47;-F&#47;--fixup.</code>><rahs
14260056><2016-12-22 00:43:12><Using commit id is useful in situations where you want to fix more than one commit. You dont need any other commands, this is short and clear.><doug65536
14260056><2019-05-24 05:20:56><I tried this on a commit that was 5 behind HEAD and moved to a new tree. I had to do <code>git reset --hard &lt;commit-hash&gt;</code> to return to the latest tree.><RenatoOliveira
14464406><2013-02-20 04:12:44><If you want to make sure your change from <code>git commit --amend</code> took affect you can use <code>git show</code> and it will show the new message.><TomasAndrle
15669052><2013-06-04 19:32:34><Is there a good way to fix commit messages already pushed to a public repository? So far I have come to the conclusion that, once pushed, my commit message typos and thinkos have to live forever.><Unheilig
15669052><2013-06-29 11:29:44><In a word, NOPE!  There is no GOOD way to retract something you have pushed.  All retractions are BAD to a greater or lesser degree.  You need to adopt the discipline of working in a branch in your own private repository, doing multiple commits as you add a bit, test a bit, tweak a bit.  Then merge your entire branch into a single commit, write a new commit message describing the overall change, PROOFREAD it, and push.><AndonM.Coleman
15669052><2013-09-12 02:20:34><Just to point out the obvious that one doesn&#39;t have to make a single commit when going back from a feature branch. What many people do is rebase on the target branch (to make things look clean) then merge with the option to suppress fast-forwarding. Agree with the main point of being careful before you push up though.><chaws
18048546><2014-06-25 04:01:47><How do I get to that screen that you have displayed in your example?><GManNickG
18048546><2016-01-30 00:51:33><It&#39;s the lower right portion of the Windows Git Gui. Just select the &#39;Amend Last Commit&#39; toggle, and it will populate with the most recent commit info.><LutzPrechelt
20338254><2014-12-28 10:58:00><This does the exact same thing as <code>git commit --amend</code> except that it is a 2-step process.><NathanOliver
20338254><2016-05-08 07:13:23><@JosephK.Strauss I believe ammending the commit also keeps original commit author and date information, having the new commiter and date info separately. I&#39;m not sure this approach does that.><Ren233
20338254><2016-05-09 21:59:34><@EvertonAgner You are correct. <code>--amend</code> will keep the author information, but the question only asks to change the message.><CodeGeek
20960146><2018-04-13 08:57:11><git rebase -i &lt;hash of one commit before the wrong commit&gt; works for me. thanks.><AndonM.Coleman
21278288><2014-07-22 14:29:00><I only bother to add <code>git reset</code> in the solution just to give an idea to split one commit message into multiple commit messages. Because, I have faced that problem when, I was starting to use <code>git</code>. Sometimes, this can be really helpfull. :)><doug65536
23824606><2014-07-21 04:51:26><The &quot;top&quot; answer doesn&#39;t answer the question. It just gives a general introduction to <code>git commit --amend</code>. The question was very specific, therefore longer != better. The decisive mentioning of the <code>-o</code> flag would probably be buried in the rest of the information. I&#39;m also not comfortable editing an answer which has so many votes already.><SachinVerma
24843054><2014-09-05 07:47:35><Nothing gets ever &quot;overwritten&quot; in git. In this case the branch pointer will be set to your new commit and the old commit will get stale if no references are left to it and it might get cleaned up after a few weeks. (Until then others still can find and reference it, e.g. by looking into the reflog.)><AgrimPathak
25178676><2015-12-05 14:25:59><To change a word in vim is <code>cw</code> typed at its beginning (though the question is not about vim, I agree).><MarianSpanik
25178676><2019-05-02 09:28:41><You don&#39;t need to use <a href="https://www.zdnet.com/article/vim-update-classic-unix-linux-editor-gets-first-update-in-years/" rel="nofollow noreferrer">that abomination</a>. You can <a href="https://stackoverflow.com/questions/2596805/how-do-i-make-git-use-the-editor-of-my-choice-for-commits">set your git editor</a> to something sane and user-friendly, like <code>nano</code> or Midnight Commander&#39;s mcedit.><rahs
26782560><2019-06-29 13:53:47><out of all answers — this is the most appropriate for all git newbies ^^^ (use a free program SourceTree and apply &quot;Rebase children of&quot; on a commit before the one you want to edit)><SlippD.Thompson
28421811><2019-05-02 09:19:53><The vim part is completely off-topic, and instead of encouraging users to spend time learning to use an arcane editor, why not teach them something more on-topic, like how to set up the default git editor to be something user friendly, like <code>nano</code>? We&#39;re talking about trivial modifications that need to be made to a text file, not hardcore coding that would generate a flame war about the &quot;best&quot; text editor.><MalusJan
28421811><2019-05-03 06:07:53><@DanDascalescu: Because it&#39;s quicker to learn Vim using the instructions above than perform several rebases using nano. The whole reason git opens a text editor and not its own interface for rebasing is because Vim exists: it&#39;s lightweight, installed by default on most systems, and very easy to learn enough to perform a rebase with ease: e.g. <code>ddjjpZZ</code> moves a commit 2 down. There&#39;s nothing arcane about basic Vim knowledge; it takes 10min to become more comfortable with Vim than nano.><doug65536
28645738><2015-04-29 23:25:01><This requires installing an external program. In my opinion, it would be better to learn to use the built-in tools and aliases more effectively. I would type: <code>g c; g rb -i @~9</code> (commit and rebase),  move the new commit to where I want it, change <code>commit</code> to <code>f</code> (<code>fixup</code>), and save. If you wanted something faster than that, you could alias  <code>git commit --fixup=&lt;commit&gt;; git rebase -i --autosquash &lt;commit&gt;^</code>><Mysticial
111102><2013-03-09 01:22:59><My problem with these and many answers is that they approach it from an abstract, theoretical perspective, rather than starting with explaining simply why closures are necessary in Javascript and the practical situations in which you use them. You end up with a tl;dr article that you have to slog through, all the time thinking, &quot;but, why?&quot;. I would simply start with: closures are a neat way of dealing with the following two realities of JavaScript: a. scope is at the function level, not the block level and, b. much of what you do in practice in JavaScript is asynchronous/event driven.><CodeGeek
111102><2013-06-27 01:02:16><@Redsandro For one, it makes event-driven code a lot easier to write. I might fire a function when the page loads to determine specifics about the HTML or available features. I can define and set a handler in that function and have all that context info available every time the handler is called without having to re-query it. Solve the problem once, re-use on every page where that handler is needed with reduced overhead on handler re-invocation. You ever see the same data get re-mapped twice in a language that doesn&#39;t have them? Closures make it a lot easier to avoid that sort of thing.><woojoo666
111102><2013-06-27 01:38:22><<b>@Erik Reppen</b> thanks for the answer. Actually, I was curious about the benefits of this hard to read <code>closure</code> code as opposed to <code>Object Literal</code> which reuses itself and reduces overhead just the same, yet requires 100% less wrapping code.><Alice
111102><2014-06-19 18:04:21><For Java programmers, the short answer is that it&#39;s the function equivalent of an inner class. An inner class also holds an implicit pointer to an instance of the outer class, and is used for much the same purpose (that is, creating event handlers).><GManNickG
111111><2008-09-22 04:24:02><A good link to a clearly popular answer.  The author takes the brave step of using analogies to things not entirely accurate in Javascript terms but fit the a mental model already existing in the minds many programmers such as Function calls create stake frames.><SachinVerma
111111><2013-02-12 02:20:22><This sounds nice:  &quot;A closure in JavaScript is like keeping a copy of the all the local variables, just as they were when a function exited.&quot;  But it is misleading for a couple reasons.  (1) The function call does not have to exit in order to create a closure.  (2) It is not a copy of the <i>values</i> of the local variables but the variables themselves. (3) It doesn&#39;t say who has access to these variables.><mohitmun
111114><2013-01-04 10:59:32><Wow, never knew you could use string substitutions in <code>console.log</code> like that. If anyone else is interested there are more: <a href="https://developer.mozilla.org/en-US/docs/DOM/console#Using_string_substitutions" rel="nofollow noreferrer">developer.mozilla.org/en-US/docs/DOM/&hellip;</a>><GManNickG
111114><2015-03-18 11:38:09><Variables that are in the function&#39;s parameter list are also part of the closure (e.g. not just limited to <code>var</code>).><IndianKing
111114><2019-05-23 20:37:10><Closures sound more like objects and classes etc. Not sure why don&#39;t a lot of people compare these two - would be easier for us novices to learn!><rahs
111119><2013-06-21 20:36:49><This is exactly the sort of example that misleads many people into thinking that it is the <i>values</i> that are used in the returned function, not the changeable variable itself.  If it were changed to &quot;return x += y&quot;, or better yet both that and another function &quot;x *= y&quot;, then it would be clear that nothing is being copied. For people used to stack frames, imagine using heap frames instead, which can continue to exist after the function returns.><KyleMit
111119><2013-06-21 22:30:42><@Matt I disagree. An example is <i>not</i> supposed to exhaustively document all properties. It is meant to be <i>reductive</i> and illustrate the salient feature of a concept. The OP asked for a simple explanation (“for a six year-old”). Take the accepted answer: It utterly <i>fails</i> at delivering a concise explanation, precisely because it attempts to be exhaustive. (I do agree with you that it’s an important property of JavaScript that binding is by reference rather than by value … but again, a successful explanation is one that reduces to the bare minimum.)><SazzadHissainKhan
111119><2013-06-22 00:15:08><@KonradRudolph I like the style and brevity of your example. I simply recommend changing it slightly so that the final part, &quot;The only solution is...&quot;, becomes true. Currently there is in fact another, simpler solution to your scenario, which does <i>not</i> correspond to javascript continuations, and <i>does</i> correspond to a common misconception about what continuations are. Thus the example in its current form is dangerous.  This doesn&#39;t have to do with exhaustively listing properties, it has to do with understanding what the x is in the returned function, which is after all the main point.><matec
111119><2013-06-22 22:35:15><@Matt Hmm, I’m not sure I fully understand you but I begin to see that you may have a valid point. Since the comments are too short, could you maybe explain what you mean in a gist/pastie or in a chat room? Thanks.><onmyway133
111119><2013-06-25 02:55:16><@KonradRudolph My point is essentially the same as example 5 of <a href="http://stackoverflow.com/a/111111/706054">this</a> answer, or bullet 2 of <a href="http://stackoverflow.com/a/2600408/706054">this</a> answer. I think the x+=y modification would clarify this. Ideally, the example would even demonstrate that multiple inner functions use the <i>same</i> variables, while multiple calls to the outer function create <i>different</i> variables, but I admit this would complicate the answer.><MarianSpanik
111200><2013-08-21 01:51:46><@Ali I&#39;ve just discovered that the jsFiddle I&#39;ve provided doesn&#39;t actually prove anything, since the <code>delete</code> fails. Nevertheless, the lexical environment that the function will carry around as [[Scope]] (and ultimately use as a base for it&#39;s own lexical environment when invoked) is determined when the statement that defines the function is executed. This means that the function <i>is</i> closing over the ENTIRE contents of the executing scope, regardless of which values it actually refers to and whether it escapes the scope. Please look at sections 13.2 and 10 in <a href="http://goo.gl/r6Yqv0" rel="nofollow noreferrer">the spec</a>><Veve
112252><2008-09-22 06:29:13><That&#39;s only half the explanation.  The important thing to note about closures is that if the inner function is still being referred to after the outer function has exited, the old values of the outer function are still available to the inner one.><SlippD.Thompson
112252><2012-08-16 10:39:42><Actually, it is not the old <i>values</i> of the outer function that are available to the inner function, but the old <i>variables</i>, which might have new values if some function was able to change them.><LewisKelsey
2600408><2012-07-11 01:27:03><James, I said the closure is &quot;probably&quot; created at the time of the call of the enclosing function because it is plausible that an implementation could defer the creation of a closure until sometime later, when it decides a closure is absolutely needed.  If there is no inner function defined in the enclosing function, then no closure will be needed.  So maybe it could wait until the first inner function gets created to then create a closure out of the enclosing function&#39;s call context.><naveejr
2600408><2012-10-15 15:57:10><First point is not correct. A closure is definitely not formed as soon as an outer function is called. An outer function <b>must</b> have completed and returned for a closure to be formed, otherwise all you have is a bog standard call stack of one or more functions. The only other thing you need for a closure to be formed is an enduring external reference to an inner function. The external reference may be formed by returning an inner function and assigning it, or by other means. In browser-based javascript &quot;other means&quot; is typically the attachment of an inner function as an event handler.><FilipBartuzi
2600408><2012-10-17 00:06:13><@Beetroot-Beetroot Suppose we have an inner function that is passed to another function where it is used <i>before</i> the outer function returns, and suppose we also return the same inner function from the outer function.  It is identically the same function in both cases, but you are saying that before the outer function returns, the inner function is &quot;bound&quot; to the call stack, whereas after it returns, the inner function is suddenly bound to a closure. It behaves identically in both cases; the semantics are identical, so aren&#39;t you just talking about implementation details?><SlippD.Thompson
2600408><2012-10-17 01:38:39><dlaliberte, this is interesting and you have caused me a hard think. What you describe in your opening sentence is certainly a feature of js functions being first class objects and that they maintain access to the environment (the lexical scope) in which they were defined regardless of where they are eventually executed. In my opinion, all of that is a prerequisite for closure but not closure itself, though some definitions of &quot;closure&quot; would have us believe otherwise. The reason I say that a closure is not formed before the outer function has returned is very simple - nothing has closed!><SimonHrabec
2600408><2012-10-17 01:40:09><The outer function is still naturally alive and kicking in exactly the same way it would be if there was no inner function or if an inner function were executed internally. The environment created by execution of the outer function is not yet on &quot;life support&quot;, a condition that occurs only if a reference to at least one inner function is maintained somewhere in an external scope (including the DOM) and after the outer function has completed and returned. (Please note that &quot;returned&quot; in this context does not mean that the outer function necessarily returns an inner function; ...><RenatoOliveira
2600408><2012-10-17 01:40:40><... the external reference could have been be put in place by other means, eg. by attaching an inner function as a DOM event handler). At that point, YES, a closure is formed. There&#39;s nothing sudden about it - the only thing that differs from the completion of a non-closure-forming function is that garbage collection is suppressed. Going back to the original point in your post above, I think a better statement would be that at a certain point in the execution of an outer function, the formation of a closure may be inevitable, but that a closure is not formed until the outer function returns.><AdamFreeman
2600408><2012-10-18 08:26:54><@Beetroot-Beetroot, thanks for your feedback, and I am glad I got you thinking.  I still don&#39;t see any semantic difference between the outer function&#39;s live context and that same context when it becomes a closure as the function returns (if I understand your definition).  The inner function doesn&#39;t care. Garbage collection doesn&#39;t care since the inner function maintains a reference to the context/closure either  way, and the caller of the outer function just drops its reference to the call context.  But it is confusing to people, and perhaps better to just call it a call context.><mp31415
2600408><2012-10-18 10:53:27><dlaliberte, stick &quot;closures and garbage collection&quot; into Google and you will rapidly find evidence if not proof that GC (or rather the suppression of it) is absolutely central to the concept of closures.><KyleMit
2600408><2012-10-18 11:26:56><And in case you don&#39;t find it , here&#39;s what I believe to be <a href="http://jibbering.com/faq/notes/closures/#clAtGb" rel="nofollow noreferrer">THE seminal article</a> on (javascript) closures. It made me realise that you can&#39;t really understand closures until you know how they arise and my understanding changed completely. Before I read this article, I was almost precisely where you are now. Ignore the definition provided at the top - it&#39;s correct but incomplete. I had to read the whole article through, maybe 2 or 3 times, before I got it.><mohitmun
2600408><2012-10-21 09:49:59><That article is difficult to read, but I think it actually supports what I am saying.  It says: &quot;A closure is formed by returning a function object [...] or by directly assigning a reference to such a function object to, for example, a global variable.&quot;   I don&#39;t mean that GC is irrelevant.  Rather, because of GC, and because the inner function is attached to the outer function&#39;s call context (or [[scope]] as the article says), then it doesn&#39;t matter whether the outer function call returns because that binding with the inner function is the important thing.><AgrimPathak
2673546><2011-07-21 22:03:12><Small clarification about a possible ambiguity.  When I said &quot;In fact, the enclosing function does not need to return at all.&quot; I didn&#39;t mean &quot;return no value&quot; but &quot;still active&quot;.  So the example doesn&#39;t show that aspect, though it shows another way the inner function can be passed to the outer scope.    The main point I was trying to make is about the <i>time</i> of creation of the closure (for the enclosing function), since some people seem to think it happens when the enclosing function returns.  A different example is required to show that the closure is created when a function is <i>called</i>.><Alice
2673583><2011-08-04 22:01:11><The code is &quot;correct&quot;, as an example of a closure, even though it doesn&#39;t address the part of the comment about using the closure after the outerFunction returns.  So it is not a great example. There are many other ways a closure could be used that don&#39;t involve returning the innerFunction.  e.g. innerFunction could be passed to another function where it is called immediately or stored and called some time later, and in all cases, it has access to the outerFunction context that was created when it was called.><MalusJan
2673583><2013-08-21 21:41:18><@syockit No, Moss is wrong. A closure is created <b>regardless</b> of whether the function ever escapes the scope in which it is defined, and an unconditionally created reference to the parent&#39;s lexical environment makes all variables in the parent scope available for all functions, regardless of whether they are invoked outside or inside the scope in which they were created.><LewisKelsey
4926486><2011-07-31 14:42:49><So could the main benefit of closures could be emphasized with this example? Say I have a function emailError(sendToAddress, errorString) I could then say <code>devError = emailError(&quot;devinrhode2@googmail.com&quot;, errorString)</code> and then have my own custom version of a shared emailError function?><LutzPrechelt
4926486><2019-05-05 17:45:39><This explanation and the associated perfect example in the link to (closure thingys) is the best way of understanding closures and should be right at the top !><AndonM.Coleman
6472397><2013-02-28 15:49:20><I love this explanation, truly. For those who read it and don&#39;t follow, the analogy is this: the princess() function is a complex scope containing private data. Outside the function, the private data can&#39;t be seen or accessed. The princess keeps the unicorns, dragons, adventures etc. in her imagination (private data) and the grown-ups can&#39;t see them for themselves. BUT the princess&#39;s imagination is captured in the closure for the <code>story()</code> function, which is the only interface the <code>littleGirl</code> instance exposes into the world of magic.><SimonHrabec
6472397><2016-02-23 08:58:37><So here <code>story</code> is the closure but had the code been <code>var story = function() {}; return story;</code> then <code>littleGirl</code> would be the closure. At least that&#39;s the impression that I get from <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Emulating_private_methods_with_closures" rel="nofollow noreferrer">MDN&#39;s use of &#39;private&#39; methods with closures</a>: <i>&quot;Those three public functions are closures that share the same environment.&quot;</i>><IndianKing
6472397><2016-03-02 00:00:04><@icc97, yes, <code>story</code> is a closure referencing the environment provided within the scope of <code>princess</code>. <code>princess</code> is also another <i>implied</i> closure, i.e. the <code>princess</code> and the <code>littleGirl</code> would share any reference to a <code>parents</code> array that would exist back in the environment/scope where the <code>littleGirl</code> exists and the <code>princess</code> is defined.><Ren233
6472397><2016-11-12 17:55:01><shouldn&#39;t it be <code>var littleGirl = new princess()</code> ?><Atul
6472397><2016-12-06 05:40:14><That is not necessary @Lorenzo - this <code>princess</code> design is not a &quot;class&quot; but rather a &quot;factory&quot;.><Drt
6472397><2017-06-19 14:32:33><@Patrick M but &#39;adventures&#39; is an empty array, nothing is returned from &#39;princess&#39; by &#39;story&#39; function. what am i missing?><chaws
6472397><2017-09-06 15:59:18><@user1559625 For the example to make sense there would be a new adventure added to the array every now and then. In the example code we only see the initialization. The point is that the outside world doesn&#39;t see all the variables in the scope of the function princess but the story function (a closure defined in the princess function) does. I personally always found this kind of metaphorical explanations very confusing, because when you don&#39;t understand something it&#39;s even harder if you have to parse trough some metaphor where you don&#39;t know what the author is getting at.><SazzadHissainKhan
6472397><2017-09-12 02:45:36><@BenjaminKrupp I&#39;ve added an explicit code comment to show/imply that there are more operations within the body of <code>princess</code> than what&#39;s written. Unfortunately this story is now a bit out of place on this thread. Originally the question was asking to &quot;explain JavaScript closures to a 5yr old&quot;; my response was the only one that even attempted to do that. I don&#39;t doubt that it would&#39;ve failed miserably, but at least this response might&#39;ve had the chance to hold a 5yr old&#39;s interest.><MalusJan
6472397><2017-10-02 18:03:34><Actually, to me this made perfect sense. And i must admit, finally understanding a JS closure by using tales of princesses and adventures makes me feel kinda weird.><PeterWone
6883759><2018-02-04 20:32:46><This is the best explanation for JavaScript closures. Should be the chosen answer. The rest are entertaining enough but this one is actually useful in a practical way for real-world JavaScript coders.><TheGuyWithTheFace
7285658><2016-06-28 01:56:00><Actually, confusingly, the makeKitchen function <i>call</i> is the actual closure, not the kitchen object that it returns.><SimonHrabec
7285658><2016-08-12 23:12:01><Having my way through the others I found this answer as the easiest way to explain about what and why the closures.is.><SazzadHissainKhan
15097817><2013-02-27 03:51:22><I don&#39;t agree with your definition of what a closure is.  There&#39;s no reason it has to be self-invoking.  It&#39;s also a bit simplistic (and inaccurate) to say it has to be &quot;returned&quot; (lots of discussion on this in the comments of the top answer to this question)><matec
15097817><2013-02-27 19:20:09><@James even if you desagree, his example (and entire post) is one of the best I&#39;ve seen. While the question is not old and solved for me, it totally deserve a +1.><PeterCordes
15097817><2014-01-10 21:49:37><<b>&quot;I need to know how many times a button has been clicked, and do something on every third click...&quot;</b> THIS got my attention.  A use case and the solution showing how a closure is not such a mysterious thing and that alot of us have been writing them but didn&#39;t exactly know the official name.><Atul
15097817><2014-07-21 14:19:54><Nice example because it shows that &quot;count&quot; in the 2nd example retains the value of &quot;count&quot; and not reset to 0 each time the &quot;element&quot; is clicked.  Very informative!><knickum
15097817><2015-03-09 03:32:34><+1 for the <i>closure behavior</i>. Can we limit <i>closure behavior</i> to <i>functions</i> in javascript or this concept can also be applied to other structures of the language?><demonkoryu
15097817><2016-03-27 12:20:28><The first example already contains a closure. So he is already enclosing the counter in the inner function. The second example just hides it from the global scope adding an extra layer and invokes it.><SimonHrabec
15097817><2016-05-12 15:23:52><@galileopy, it&#39;s not clear if the first example uses a closure or not. Normally, global variables don&#39;t count as closed over, because they are already accessible everywhere. It&#39;s important distinction, because the first example can be translated to a language like C, which doesn&#39;t have closures, while the second cannot.><IsmaelLuceno
15097817><2017-07-28 07:28:10><good example since I also usually find myself needed closures within the context of event handlers who need access to the outside scope variables, especially with third party libraries in javascript where it is necessary to provide a function matching the required definition but also need the outside context, viz. angular component context.><NicholasHamilton
15306767><2018-04-28 16:21:59><I agree: the said Mozilla page is particularly simple and concise. Amazingly enough your post has not been so widely appreciated as the others.><KyleMit
15340037><2013-03-15 21:43:21><I like it, association close friend - closure, nice. Nice mimic to keep picture, not only for child:) Though bit blurry, it sounds a bit as, &#39;when you will grow up you will understand&#39; I would not like such answers when I was 6 :D, but I like it now><matec
16463983><2014-12-17 19:28:01><so.. what&#39;s the clousure here? jamiesHouse? I don&#39;t get it><naveejr
16463983><2014-12-18 20:37:33><No. &#39;annVille&#39; is the &#39;closure&#39;. If you live in annVille, you can call &#39;.jamiesHouse&#39; directly. If you live outside of annVille, you&#39;ll have to call &#39;annVille.jamiesHouse&#39; (assuming that I&#39;ve chosen to expose annVille&#39;s population to the world, of course). Bear in mind this is intended to be a primer for a 6 y/o kid, with absolutely no code involved. A thorough explanation would obviously need more detail.><Atul
16959645><2013-09-19 08:37:32><Well played and answers the original poster. I think this is the best answer. I was going to use luggage in a similar way: imagine you go to grandma&#39;s house and you pack your nintendo DS case with game cards inside your case, but then pack the case inside your backpack and also put game cards in your backpack pockets, and THEN you put the whole thing in a big suitcase with more game cards in the pockets of the suitcase. When you get to Grandma&#39;s house, you can play any game on your DS as long as all the outside cases are open. or something to that effect.><PrajwalDhatwalia
17200991><2016-04-09 06:38:08><Nice addition, thanks. Just to make it more clear one can imagine how the &quot;bad&quot; array is created in the &quot;bad&quot; loop with each iteration:      1st iteration: [function () {return &#39;n = &#39; + 0;}]      2nd iteration: [(function () {return &#39;n = &#39; + 1;}),(function () {return &#39;n = &#39; + 1;})]      3rd iteration: [(function () {return &#39;n = &#39; + 2;}),(function () {return &#39;n = &#39; + 2;}),(function () {return &#39;n = &#39; + 2;})]  etc. So, each time when the index value changes it is reflected in all functions already added to the array.><KyleMit
17200991><2017-10-16 18:25:19><Using <code>let</code> for <code>var</code> fixes the difference.><AdamFreeman
17200991><2017-12-29 18:17:01><Isn&#39;t here &quot;Closure done right&quot; is an example of &quot;closure inside closure&quot;?><naveejr
17200991><2017-12-30 02:52:58><I mean, every function is technically a closure but the important part is that the function defines a new variable within. The function that get returns just references <code>n</code> created in a new closure. We just return a function so we can store it in the array and invoke it later.><jdero
17200991><2017-12-30 02:54:55><If you want to just store the result in the array in the first iteration then you could inline it  like this: <code>arr[index] = (function (n) { return &#39;n = &#39; + n; })(index);</code>. But then you&#39;re storing the resulting string in the array rather than a function to invoke which defeats the point of my example.><demonkoryu
17256320><2014-03-19 22:10:00><It is not necessary to be the line before, you can declare a var or function in the same scope where you are declaring the function after that function declaration and it will see it too. JavaScript it is not a line interpreter.><SlippD.Thompson
17308587><2016-10-07 13:02:17><What would happen if you called : second_calculator = first_calculator(); instead of second_calculator = make_calculator(); ? Should be the same, right?><RenatoOliveira
17308587><2016-10-10 17:49:48><@Ronen: Since <code>first_calculator</code> is an object (not a function) you should not use parentheses in <code>second_calculator = first_calculator;</code>, since it is an assignment, not a function call. To answer your question, there would then only be one call to make_calculator, so only one calculator would get made, and the variables first_calculator and second_calculator would both refer to the same calculator, so the answers would be 3, 403, 4433, 44330.><naveejr
21353238><2014-03-14 20:13:31><The &quot;parallel&quot; reference was quite useful for me (given my OOP background). For balance, it also helps if one also reads this: &quot;Closures And Objects Are Equivalent&quot; <a href="http://buff.ly/1gpPIBY" rel="nofollow noreferrer">buff.ly/1gpPIBY</a>><KyleMit
21353238><2015-05-15 10:21:19><Mozilla agrees: &quot;you can use a closure anywhere that you might normally use an object with only a single method.&quot; <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" rel="nofollow noreferrer">developer.mozilla.org/en-US/docs/Web/JavaScript/Closures</a>><SimonHrabec
28442157><2015-03-14 02:09:02><I don&#39;t believe this is even a closure.><mp31415
28442157><2015-03-20 22:04:25><@JohnGibb I believe creates a closure (the functions can access the calculate object by name) but then doesn&#39;t use the closure whatsoever.><KyleMit
28442157><2015-05-15 09:41:33><As I commented under floribon&#39;s answer, function+closure does resemble method+object in some ways. I think this answer would be much more useful if it provided the idiomatic JS equivalent to the OO structure shown (but probably without <code>rem</code>). The outer function would do the <code>init</code>--storing <code>number</code> in the closure--and the inner function would <code>add</code> to <code>number</code>.><AgrimPathak
28507451><2015-05-15 09:34:07><This answer doesn&#39;t seem likely to help unconfuse people. A rough equivalent in a traditional programming language might be to create b() as a method on an object that <i>also</i> has a private constant or property <code>a</code>. To my mind, the surprise is that the JS scope object effectively provides <code>a</code> as a property rather than a constant. And you&#39;ll only notice that important behavior if you modify it, as in <code>return a++;</code>><Mysticial
28507451><2015-10-30 07:15:01><Exactly what Jon said. Before I finally grokked closures I had a hard time finding practical examples. Yes, floribon created a closure, but to uneducated me this would have taught me absolutely nothing.><SlippD.Thompson
28507451><2016-08-09 23:51:36><This does not define what a closure is -- it is merely an example that uses one.  And it doesn&#39;t address the nuance of what happens when the scope ends; I don&#39;t think anyone had a question about lexical scoping when all the scopes are still around, and especially in the case of a global variable.><IsmaelLuceno
29639524><2015-05-15 09:02:20><<code>1 2 3 1 2 3</code>. Yup. But in a more traditional language I&#39;d expect syntax errors or else <code>1 1 1 1 1 1</code>.><demonkoryu
29639524><2015-05-15 09:18:31><FWIW, to get the <code>1 1 1 1 1 1</code> effect in JS, you can put <code>var j = i;</code> inside the inner function and then use <code>console.log(j++);</code> instead. Useless, but more familiar to some of us. So in this scenario, I do think closures are more intuitive to the uninitiated than to many trained programmers.><Drt
29639524><2015-05-16 02:46:52><@JonCoombs interesting, I see.  So you were expecting that every time the inner function is called, <code>var i = 1</code> gets copied into its scope anew?><chaws
29693176><2016-07-13 12:22:45><@KennethWorden  What You Mean by a Closure ??? Its Very Simple Closure. Function f2() Can Access a variable out of its Scope Considered as A Closure><doug65536
29932159><2015-05-15 08:55:27><Though true, this doesn&#39;t really answer the question, as it only covers one simple case and doesn&#39;t really touch on the aspects that people find confusing, which typically relate to unexpected states/values.><NathanOliver
29932217><2015-04-30 02:19:21><I was asked to review this response (which I think is brilliant) but I am torn as it serves to expand on the OP&#39;s initial question without providing an answer.><SazzadHissainKhan
29932217><2015-04-30 21:18:12><I think it&#39;s relevant, because the OP was &quot;trying to explain to his friend&quot; .. WHAT &#39;closures&#39; ARE.  Closures happen to be one of the things that <i>I, myself</i> found difficult to wrap my head around when I first encountered them. Many ideas in computer programming are intuitive.  Closures are not.  &quot;Getting a pointer to a function,&quot; sure, that part&#39;s obvious.  But for that function, when it executes, to magically have access to variables in the context that existed at the time the function-pointer was made?!  Yet it is so.><SimonHrabec
29932217><2015-05-15 08:52:03><I would agree that this is especially true for programmers who are already well aware from other languages of scope and of functions returning/completing. An average non-programmer might actually find closures &#39;intuitive&#39; in certain examples. Still, a real understanding requires being aware of scope, and of closures as special scope objects, and even of how references interact with garbage collection.><PeterWone
30173047><2015-05-18 04:30:27><This is the explanation that made the most sense to me because it doesn&#39;t assume significant prior knowledge of technical terms. The top-voted explanation here assumes the person who doesn&#39;t understand closures has a full and complete understanding of terms like &#39;lexical scope&#39; and &#39;execution context&#39; - while I can understand these conceptually, I don&#39;t think I&#39;m as comfortable with the details of them as I should be, and the explanation with no jargon in it at all is what made closures finally click for me, thank you. As a bonus, I think it also explains what scope is very concisely.><IsmaelLuceno
33525748><2018-09-18 18:01:22><The img here is used as a color blindness test.><PrajwalDhatwalia
4114095><2015-06-09 03:41:52><Here&#39;s <a href="https://github.com/blog/2019-how-to-undo-almost-anything-with-git" rel="nofollow noreferrer">a very clear and thorough post</a> about undoing things in git, straight from Github.><dddJewelsbbb
4114095><2018-01-04 06:26:59><I love git, but the fact that there&#39;s 35 answers to something that should be incredibly simple exposes a huge issue with git. Or is it the docs?><matec
4114095><2018-12-14 02:29:31><They could add a button functionality for that like SVN in history><IndianKing
4114095><2019-03-07 15:28:06><How is the language &quot;trap&quot; in using the word <i>to revert</i> as colloquially meaning <i>to reset</i> not even adressed here??? 6594 upvotes so far and not an edit in this way, to stress the difference? It wouldn&#39;t be more confusing to refer to &quot;saving a file&quot; here with the expression &quot;committing&quot;...><IsmaelLuceno
4114095><2019-12-08 13:40:05><<code>git reset --hard HEAD~1</code>><SazzadHissainKhan
4114095><2020-02-29 01:28:08><Here&#39;s a script that does it, as posted in an answer below: <a href="https://stackoverflow.com/a/60456589/26510">stackoverflow.com/a/60456589/26510</a>><SimonHrabec
4114122><2012-03-19 05:55:46><I tried your first method, but then when I went back to master and tried merging the new branch it said <code>Already up-to-date.</code>. I fixed my problem by copying the files from the new branch to and external folder, checking master back out, then copying the files back in manually overwriting everything then <code>git add</code>ing and <code>git commit</code>ing everything to master. After that I deleted the new (but temporary) branch.><AdamFreeman
4114122><2012-04-14 11:15:15><Just one thing... how do I come back to head? After doing git checkout 0d1d7fc32??><PeterWone
4114122><2012-04-14 14:25:38><@jaime By &quot;head&quot; I assume you mean &quot;the branch I previously had checked out? <code>git checkout -</code> checks out the previous think you had checked out; <code>git checkout &lt;branch&gt;</code> would be the explicit way. (As with anything about Git here, please be careful running commands if you don&#39;t understand what they do.)><woojoo666
7760865><2012-02-20 02:59:22><You could do a <code>git revert HEAD~3</code> to remove the last 3 commits><ChristopheRoussy
7760865><2012-09-12 06:13:05><@Rod - No, that&#39;s not right. That command will revert the commit that is the third grandparent of HEAD (not the last three commits).><dddJewelsbbb
7760865><2012-09-12 09:59:58><@kflorence Ok thanks for the info. Would <code>git revert -n master~3..master~1</code> work ? (As seen from <a href="http://www.kernel.org/pub/software/scm/git/docs/git-revert.html" rel="nofollow noreferrer">kernel.org/pub/software/scm/git/docs/git-revert.html</a>)><DanielFischer
7760865><2012-10-01 09:12:03><@Rod - That sounds right, sure is an ugly syntax though isn&#39;t it? I&#39;ve always found checking out the commit I want to &quot;revert&quot; to and then committing that more intuitive.><onmyway133
12049323><2012-09-25 02:17:28><I did that, but then I wasn&#39;t able to commit and push to the remote repository. I want a specific older commit to become HEAD...><woojoo666
12049323><2012-12-05 12:51:51><It means you have already pushed in the commits you wanna revert. It can create lot of problems for people who have checked out your code and working on it. Since they cannot apply your commit smoothly over theirs. In such case better do a git revert. If you are the only one using the repo. Do a git push -f (But think twice before doing that)><IndianKing
12049323><2014-08-26 07:06:35><If you&#39;re working in PowerShell, add quotes around HEAD@{1}:    git reset --soft &#39;HEAD@{1}&#39;    because curly braces have a meaning><demonkoryu
12049323><2015-03-17 19:57:18><Shame a versioning system makes the syntax so complicated for basic history-browsing acitons.><IsmaelLuceno
12049323><2015-05-19 07:56:00><@nuton linus pauling himself, the creator of git, criticized it for being too complicated. He&#39;s on record saying that he was &quot;shocked&quot; git became so popular given its complexity><mp31415
12049323><2015-11-29 02:29:14><It makes me use vim and I don&#39;t know how... so frustrating.><mp31415
12049323><2016-02-10 00:40:11><@pixelfairy, to prevent having to do this, use the <code>-m</code> flag followed by a string in parentheses as your commit comment like so: <code>git commit -a -m &#39;commit message&#39;</code>><RenatoOliveira
12049323><2016-08-08 02:45:21><Why not just: git reset --hard &quot;(older commit)&quot;?><Unheilig
18638479><2014-10-23 04:44:19><Sometimes this is what you want.  Example: committed and pushed several commits to the wrong branch (branch A). After cherry-picking to branch B, I want these commits removed from branch A. I would not want to revert, since the revert would later get applied when branch A and B are merged together. Doing a reset --hard &lt;commitId&gt; in branch A followed by a force push removes these commits from the branch while preserving them in branch B. I can get away with this because I know nobody else is developing on branch A.><DanielFischer
18638479><2017-02-06 20:49:58><Thanks! I couldn&#39;t figure out how to get the remote branch to match my local branch, Just needed to do a force push.><naveejr
19517124><2014-10-29 22:46:25><I second @Cupcake&#39;s warning... be very aware of the consequences.  Note, however, that if your need really is to make those commits disappear from history forever, this reset+clean method will do it, and you&#39;ll need for <i>force</i> push your modified branches back to any and all remotes.><jdero
19517124><2014-11-21 19:59:11><remember, clean will remove files/folders such as .idea (phpstorm) or .vagrant (vagrant) which may be used by your set up/IDE!><MarianSpanik
19517124><2015-07-16 22:59:20><git clean -f   DANGER DANGER><demonkoryu
19517124><2015-07-17 18:29:14><@Pogrindis - plenty of good answers on here that don&#39;t delete untracked files.><KyleMit
19517124><2016-12-08 22:13:50><If you use &quot;git clean -f&quot; I recommend checking first what you&#39;ll delete with: git clean -f -n><LewisKelsey
19517124><2017-10-22 19:47:32><This sets the head of my local copy to the desired commit. But then I cannot push any changes because it is behind the remote. And if I pull from the remote it ends up back where it was at the latest commit on the remote branch.  How do I completely obliterate (from everywhere) several commits both on my local copy that have been pushed?><SazzadHissainKhan
21718540><2014-11-21 19:55:43><If one of the commits between 0766c053..HEAD is a merge then there will be an error popping up (to do with no -m specified). This may help those encountering that: <a href="http://stackoverflow.com/questions/5970889/why-does-git-revert-complain-about-a-missing-m-option" title="why does git revert complain about a missing m option">stackoverflow.com/questions/5970889/&hellip;</a>><LewisKelsey
21718540><2015-05-13 16:17:15><git newbie here: it seems that if you can&#39;t use this command to go back to the most recent commit: I got an &quot;empty commit&quot; message.  So you have to commit your latest work and then use this command.  I wonder if there&#39;s a way of resetting to the last commit?><PhilMiller
22178776><2017-01-18 18:04:18><This is soft and gently: risk free if you haven&#39;t pushed your work><Ren233
27438379><2016-09-17 03:47:15><I tried 1/2 a dozen answers in this post until I got to this one .. all of those others, my git config kept giving me an error when trying to push.  This answer worked.  Thanks!><Alice
27438379><2016-09-17 03:49:36><One detail for me was that I lost the diffs .. which I wanted to keep to see what I had done in the commit that didn&#39;t work.  So next time I would just save that data before issuing this reset command><SimonHrabec
27438379><2017-01-20 04:07:19><This was the only way for me to undo a bad merge, revert didn&#39;t work in that case.  Thanks!><MalusJan
27438379><2019-08-04 14:08:17><Best answer. Thanks><LutzPrechelt
27438379><2020-03-03 07:28:49><Best answer, thank you.><mp31415
28354830><2016-03-14 05:25:01><Excellent hint to <code>git reflog</code>, that&#39;s exactly what I needed><GManNickG
28354830><2016-03-20 22:35:15><Ouch! This all seems awfully complicated... isn&#39;t there a simple command that just takes you a step back in the process? Like going from version 1.1 in your project back to version 1.0? I&#39;d expect something like: git stepback_one_commit or something....><Ren233
28354830><2016-03-20 22:38:43><there is: <code>git reset HEAD^</code> --hard`><SimonHrabec
28354830><2016-08-30 01:17:51><@Kokodoko Yes, it is horribly complicated... and a perfect example of how little consideration experts have for people who are just starting out.  Please refer to my answer here, and also to the book I recommend in it.  Git is NOT something you can just pick up intuitively.  And I can be absolutely certain CodeWizard didn&#39;t do so.><screwnut
34091741><2016-03-20 22:37:59><Aw man, why does the OP&#39;s question have so many different answers!? Shouldn&#39;t stepping back be a simple process?><Alice
34091741><2016-12-06 16:45:44><Thanks!  This method works on bare repo (&quot;git reset&quot; needs working dir, so most of answers here did not work for me).><rahs
35695065><2016-11-05 08:21:33><didnt work, a git pull after this yields: error: Your local changes to the following files would be overwritten by merge:><jdero
35695065><2017-01-22 21:37:38><@malhal That is because you&#39;ve had uncommited changes. Stash/reset them and then it will work without that error.><rahs
37049724><2016-12-08 22:08:46><NOTE: New files not added in index are not stashed. You have too add them or manually delete them.><DanielFischer
37049724><2019-03-07 15:35:51><Why oh why clearing stash? In addition to being a non-solution, this is actually harmful. Reading the very first sentence of the question immediately invalidates the stash solution (which could be useful ONLY to reset to the LAST commit).><doug65536
37145089><2016-05-11 01:46:51><How is this answer any different than the myriad of others?><MarianSpanik
37145089><2016-07-05 03:29:37><That&#39;s unfortunate. I emailed the blogger - hopefully he still has it!><Atul
37145089><2016-09-02 01:51:49><@Peter #brokenlink <a href="http://web.archive.org/web/20150411085146/http://lrotherfield.com/blog/delete-remote-git-repo-to-specific-commit" rel="nofollow noreferrer">web.archive.org/web/20150411085146/http://lrotherfield.com/b&zwnj;&#8203;log/&hellip;</a>><Alice
37145089><2017-03-25 00:20:56><The push syntax is missing from most other suggestions for how to fix this.   Worked great.><SimonHrabec
45219734><2020-04-09 21:48:27><The default of <code>git reset</code> is <code>git reset --mixed</code>, not <code>git reset --soft</code>. Please check <a href="https://stackoverflow.com/q/3528245/3982001">What&#39;s the difference between git reset --mixed, --soft, and --hard?</a> and <a href="https://stackoverflow.com/q/2530060/3982001">In plain English, what does “git reset” do?</a>><NathanOliver
60399727><2020-02-27 19:40:17><worked like charm!><KyleMit
60399727><2020-03-24 20:26:22><I downvoted because I fail to see how your answer provides any new information not already given in for example <a href="https://stackoverflow.com/a/37145089/1723886">stackoverflow.com/a/37145089/1723886</a>, <a href="https://stackoverflow.com/a/27438379/1723886">stackoverflow.com/a/27438379/1723886</a> or <a href="https://stackoverflow.com/a/48756719/1723886">stackoverflow.com/a/48756719/1723886</a>. In fact most commits already mention git reset --hard, and many more mention using --force or -f to push.><CodeGeek
60399727><2020-03-26 19:22:44><It does the work with just one command, clear and simple.   You are free to downvote my answer if you don&#39;t  like it.><SimonHrabec
60399727><2020-03-28 03:40:19><Another option to consider for the future is to suggest an edit on an earlier answer or adding a comment saying that &#39;this can also be done in one line by using &amp;&amp;&#39; for instance. That way everyone can then see the improved answer in one place.><NicholasHamilton
244777><2008-10-29 04:51:29><@StingyJack:  To explain things that may not be obvious, or whatever else one might do with comments.  I for one often have comments in data files.  XML, ini files, and many other formats include provisions for comments.><SazzadHissainKhan
244777><2013-02-01 23:12:22><If you, like me, were wondering whether <code>&#47;&#47;comments</code> are OK for the specific use-case of a Sublime Text configuration file, the answer is yes (as of version 2). Sublime Text will not complain about it, at least, whereas it will complain about <code>{&quot;__comment&quot;: ...}</code> in the console, because it is an unexpected field.><KyleMit
244777><2013-05-01 13:22:12><and perhaps this is one reason why TOML was created..><SazzadHissainKhan
244858><2010-02-03 19:41:45><It might pay to have some kind of prefix on the actual comment in case there&#39;s ever a valid field named comment: <code>&quot;__comment&quot;:&quot;comment text goes here...&quot;,</code>><MalusJan
244858><2012-10-01 20:21:44><BTW, the json library for Java <a href="http://code.google.com/p/google-gson/" rel="nofollow noreferrer">google-gson</a> has support for comments.><doug65536
244858><2014-08-11 20:58:25><What about if I wanted a separate comment on the <code>Accronym</code> and <code>Abbrev</code> properties? I&#39;ve used this pattern before but stopped since it doesn&#39;t allow me to do that. It is a hack. Maybe if I prepend a property name with <code>__comment__</code> instead. That is &quot;__comment__Abbrev&quot;, still a hack, but would let me comment on all prpoerties><PhilMiller
245213><2009-09-02 02:20:50><It is true that JSON format does not have comments. Personally I think that is a significant mistake -- ability to have comments as metadata (not data) is a very useful thing with xml. Earlier draft versions of JSON specification did include comments, but for some reason they were dropped. :-/><naveejr
245213><2010-12-11 17:03:56><@StaxMan they were dropped exactly because people started using them as metadata. Crockford said it breaked the compatibility for what the format was designed, and I agree: if you want metadata, why not include it as actual data? It&#39;s even easier to parse this way.><PeterWone
245213><2011-09-06 12:55:58><Metadata belongs in metadata constructs (e.g. HTML &lt;meta&gt; tags), not comments. Abusing comments for metadata is just a hack used where no true metadata construct exists.><PeterCordes
245213><2013-06-25 22:50:28><That&#39;s exactly the reason why it was dropped: comments used as metadata would break interoperability. You should just store your meta-data as JSON too.><demonkoryu
245213><2014-08-08 03:35:06><This answer is redundant with better written, higher upvoted answers, that say essentially the same thing, even though this may have been written earlier. Cest la vie.><Ren233
2611372><2011-02-25 19:04:33><Probably the best suggestion so far, though still an issue for keeping files as an interchange format, as they need pre-processing before use.><Ren233
2611372><2012-07-28 09:51:47><I agree and have written a JSON parser in Java, available at www.SoftwareMonkey.org, that does exactly that.><TomasAndrle
3104376><2011-08-25 17:16:57><The only problem I have with JSON.minify() is that it is really really slow. So I made my own implementation that does the same thing: <a href="https://gist.github.com/1170297" rel="nofollow noreferrer">gist.github.com/1170297</a> . On some large test files your implementation takes 74 seconds and mine 0.06 seconds.><Drt
3104376><2011-08-31 01:20:41><it&#39;d be great if you could submit the suggested alternative algorithm to the github repo for JSON.minify(), so that it can be ported to all the supported langs:  <a href="https://github.com/getify/json.minify" rel="nofollow noreferrer">github.com/getify/json.minify</a>><AgrimPathak
3104376><2011-11-15 01:36:11><Perl&#39;s JSON supports # comments.><NicholasHamilton
3104376><2011-12-15 23:34:08><Comments do not make sense in JSON. JSON is not meant to be a file format, just a data-packet interchange format. If you need something like commented JSON, use YAML instead.><PeterWone
3356227><2012-10-29 22:31:10><Is JSON schema alive? It exists but is it supported by any known library?><doug65536
3356227><2012-11-27 19:34:05><yes, the <a href="https://groups.google.com/forum/#!forum/json-schema" rel="nofollow noreferrer">json-schema google group</a> is fairly active and I would recommend <a href="https://github.com/garycourt/JSV" rel="nofollow noreferrer">JSV</a> for a good JavaScript implementation of a JSON Schema validator.><knickum
3356227><2013-04-05 01:47:42><This only helps with structured documentation, not ad-hoc documentation><dddJewelsbbb
3356227><2013-04-15 21:50:44><If you use clojure (and I&#39;m sure you don&#39;t) there&#39;s a reasonably featured open-source JSON schema parser here: <a href="https://github.com/bigmlcom/closchema" rel="nofollow noreferrer">github.com/bigmlcom/closchema</a>><jdero
3356227><2015-06-26 08:26:29><@Munhitsu Manatee.Json (.Net) extensively supports JSON schema.><Alice
3356227><2017-12-08 19:22:37><This isn&#39;t relevant for all situations. I have one where I have a manually configured JSON to be parsed by something else (a package manager) that has its own schema. In that I want a comment such as /* It&#39;s better to use X instead from another package manager, however that manager doesn&#39;t provide X yet so. */.><GManNickG
4183018><2014-08-08 03:26:35><If you&#39;d like to annotate your JSON with comments (thus making it invalid JSON), then minify it before parsing or transmitting. Crockford himself acknowledged this in 2012 in the context of configuration files.><Alice
4729509><2014-08-08 03:31:33><No. Not this. JSON doesn&#39;t have comments. If you choose to annotate your JSON with comments, minify it before parsing or transmitting. This shouldn&#39;t be the receiver&#39;s responsibility.><SimonHrabec
4729509><2014-08-08 07:37:25><I didn&#39;t say that JSON has comments. Neither did I mean to imply that it&#39;s appropriate to include them in your JSON, especially in a production system. I said that the <i>Dojo toolkit</i> permits you to add them, which is (or at least, was) factually true. There are very helpful use-cases out there for doing so in your testing phase.><GManNickG
4729509><2014-08-09 04:21:31><It&#39;s bad voodoo to serve up commented, and thus invalid JSON, which <code>dojo.xhrGet()</code> implicitly encourages by accepting.><SachinVerma
4729509><2014-09-15 15:03:06><I still vote for upgrading the JSON spec to allow comments. I&#39;m all for minifying and stripping the comments before transmitting the JSON, but not having any ability to comment your JSON in any standard way without having to pass it through a separate utility before parsing it just seems silly. I also makes it impossible to use a JSON editor on your JSON configuration files, because your files are not valid JSON.><AndonM.Coleman
6440396><2011-10-20 05:35:37><For config files, I&#39;d suggest YAML, not JSON. It&#39;s (almost) a more powerful superset of JSON, but supports more readable constructs as well, including comments.><MarianSpanik
6440396><2012-01-13 21:26:38><how many languages do you think supports YAML out of the box compared to json ?><PhilMiller
6440396><2012-03-21 23:53:56><@Hamidam Over a dozen languages support yaml: <a href="http://yaml.org" rel="nofollow noreferrer">yaml.org</a> - but you&#39;re right to ask how many have support built-in, without the need for a third-party library dependency.  Looks like Ruby 1.9.2 does.  Anyone know of others?  And which languages ship support for json by default?><screwnut
6440396><2014-08-08 03:10:08><YAML interop is a lie: <a href="http://stackoverflow.com/questions/450399/which-java-yaml-library-should-i-use/1863814#comment6582202_1863814" title="which java yaml library should i use">stackoverflow.com/questions/450399/&hellip;</a> . If your instinct is to use JSON for configuration files, follow it.><PhilMiller
6440396><2015-12-03 02:24:38><This is old, but I believe that using # is not a good idea. Json is close to the syntax of a Javascript  litteral. Javascript supports 2 types of comment :     // and /* ... */ If I were you I would stick with one or both these types of comments.><naveejr
7251912><2012-09-11 12:01:35><Note that the converse is not true (valid YAML !=&gt; valid JSON)><TheGuyWithTheFace
7251912><2012-09-12 22:58:43><@g33kz0r Correct, hence my description of YAML as a near-superset of JSON.><LewisKelsey
7251912><2014-03-28 20:57:24><@NateS Many people had already pointed out that the answer was no. I suggested a better way to achieve the OP&#39;s goal. That&#39;s an answer.><Sandeep
7251912><2014-04-15 18:06:03><Downside: <code>yaml</code> library isn&#39;t shipped with Python.><naveejr
7251912><2014-08-08 03:29:29><Agreed that this is a relevant alternative. Nevertheless, don&#39;t use YAML if you were already leaning towards JSON: <a href="http://stackoverflow.com/questions/450399/which-java-yaml-library-should-i-use/1863814#comment6582202_1863814" title="which java yaml library should i use">stackoverflow.com/questions/450399/&hellip;</a>><NicholasHamilton
7251912><2014-08-14 03:25:09><@toolbear: your linked comment suggests you don&#39;t know how to use YAML well. I&#39;ve never had YAML bite me, ever. So yes, use YAML, even if you were already leaning towards JSON.><SachinVerma
7251912><2014-08-18 07:32:00><@marnen-laibow-koser: yup, it must have been incompetence to use the available YAML libraries for Java and Perl and expect the YAML produced by each to be consumed by the other without error. That YAML interop was an issue, but JSON interop wasn&#39;t, is entirely explained by my lack of knowledge.><CodeGeek
7251912><2014-08-19 04:38:11><@toolbear Sounds like the fault of poorly written libraries; don&#39;t blame the format for that. And yeah, your claim of quoting ambiguities suggests lack of knowledge, though I&#39;d be interested in looking at a particular case if you have one. However, the lack of knowledge might be on the part of the parser implementer, not necessarily you.><PhilMiller
7251912><2014-08-25 19:45:36><@marnen-laibow-koser, a format that accomplishes the same thing with a simpler spec is better. A pragmatic format with perfect implementations is better than an ideal format with imperfect implementations. Not all the blame for faulty libs lies on the implementors&#39; shoulders; the YAML spec is long, dense, and obtuse. Its Wikipedia entry cites two examples of ambiguities; if one must put an emitter between a human and the format to protect them from ambiguities, the format loses its human friendly claim. JSON claims less and mostly succeeds where YAML claims more and falls short.><AndonM.Coleman
7901053><2015-11-07 05:47:04><Groovy has some <a href="http://www.groovy-lang.org/json.html" rel="nofollow noreferrer">built-in classes for handling JSON</a>. JsonSlurper can handle comments. Of course, comments are not allowed in the official spec, so this behavior in any parser is non-standard and non-portable.><naveejr
7901053><2020-04-17 09:19:16><Newtonsoft Json.NET also support C-style comments with no problems><FilipBartuzi
10976934><2012-10-14 21:00:36><I thought JSON was to supposed to be more human readable than, say, XML? Comments are for readability.><PeterWone
10976934><2012-10-14 21:04:37><Anyway, you could be naughty and add parsing directives in the JSON: {&quot;__directives&quot;:{&quot;#n#&quot;:&quot;DateTime.Now&quot;}, &quot;validdate&quot;:&quot;#n#&quot;}... It looks like YAML is the way forward then...><SachinVerma
10976934><2012-11-29 15:47:17><Removing <code>&#47;* *&#47;</code> comments also made JSON a better subset of YAML.><matec
10976934><2013-04-05 01:50:12><@Schwern But YAML does allow <code>#</code> comments, so your point is kind of muoot><Atul
10976934><2013-04-05 02:28:59><@JuanMendes I don&#39;t understand why that makes my point about JSON/YAML compatibility moot.  What do you think my point was?><PrajwalDhatwalia
11805048><2014-09-18 05:54:01><And I believe that is why I see a comment in a screenshot on this ASP.NET vNext preview page (under package.json): <a href="http://blogs.msdn.com/b/webdev/archive/2014/06/03/asp-net-vnext-in-visual-studio-14-ctp.aspx" rel="nofollow noreferrer">blogs.msdn.com/b/webdev/archive/2014/06/03/&hellip;</a> although I haven&#39;t found anything in the spec yet.><SachinVerma
13812297><2014-08-08 03:19:52><No need to fragment JSON. JSON with comments is no longer JSON. But it&#39;s perfectly acceptable to annotate your JSON with comments, so long as you make sure to strip them out before parsing or transmitting it. It should never be the receiver&#39;s responsibility to do this.><Ren233
13812297><2020-04-24 06:04:34><<a href="http://json5.org/" rel="nofollow noreferrer">json5.org</a> Is a solution for json-doc><RenatoOliveira
17300561><2014-08-08 03:14:21><Crockford later went on to write: &quot;Suppose you are using JSON to keep configuration files, which you would like to annotate. Go ahead and insert all the comments you like. Then pipe it through JSMin before handing it to your JSON parser.&quot; See @kyle-simpson&#39;s answer about JSON.minify for more info.><PeterCordes
18018493><2013-08-02 21:50:02><From <a href="http://www.ietf.org/rfc/rfc4627.txt" rel="nofollow noreferrer">the specification</a>: The names within an object SHOULD be unique.><SimonHrabec
18018493><2013-08-02 21:57:49><Right, but it&#39;s not a syntax error, and all the implementations handle it the same. So I think it&#39;s pretty safe to use.   Not philosophically, but practically.><AgrimPathak
18018493><2013-08-02 22:20:40><&quot;all the implementations handle it the same&quot; — That&#39;s a difficult thing to prove.><SazzadHissainKhan
18018493><2013-08-02 22:33:10><The order of elements in JSON is not guaranteed. That means the &quot;last&quot; item could change!><CodeGeek
18018493><2013-08-02 22:36:32><@sep332 they are in the case of a hand edited json/config file.><GManNickG
19655633><2013-11-19 00:53:10><You&#39;ve emulated an INI file structure in JSON. Please, put down your Golden Hammer.><SimonHrabec
19655633><2014-06-10 23:58:29><RFC says &quot;The names within an object SHOULD be unique&quot;. Also see this person that is having an error parsing JSON like the above: <a href="https://stackoverflow.com/questions/4912386/resolve-jsonexception-duplicate-keys?lq=1" title="resolve jsonexception duplicate keys">stackoverflow.com/questions/4912386/&hellip;</a>><jdero
19655633><2015-06-26 08:32:11><If you&#39;re using a schema to validate the JSON, it may fail due to the extra fields.><Atul
19655633><2015-09-05 06:51:17><If you&#39;re really determined to add comments to your JSON, it would make much more sense to do something like this: <code>{    &quot;comment-001&quot;:&quot;This is where you do abc...&quot;,    &quot;comment-002&quot;:&quot;This is where you do xyz...&quot; }</code>  This keeps the name unique and lets you add whatever string value you like. It&#39;s still a kludge, because comments should not be part of your JSON. As another alternative, why not add comments before or after your JSON, but not within it?><GManNickG
20267852><2014-05-14 22:42:45><<code>Just make sure your &quot;notex&quot; names don&#39;t conflict with any real fields.</code> is the problem. This is not an arbitrary solution.><naveejr
20267852><2014-09-15 15:07:52><This also presents the issue that the comments cannot be stripped out by a minification utility before transmission, unavoidably leading to bigger hunks of data being transmitted that serve no purpose on the other end of the transmission. I really feel like taking comment support out of the JSON spec is unfortunate. Specifically because people ARE going to hack solutions together. Taking the support out of the spec is an attempt at behavioral control that is simply going to fail and produce even bigger incompatibilities down the road due to proliferation of mutually-incompatible workarounds.><screwnut
20267852><2015-04-08 11:46:52><in config files, I use <code>{&quot;&#47;* ---- my section ----*&#47;&quot;:0}</code>. This is valid JSON, as JSON accepts any character in the key string. It will not collide with other properties and nobody cares or reordering. Still, 2 comments must not be the same.><rahs
20267852><2015-06-26 08:30:20><If you&#39;re using a schema to validate the JSON, it may fail due to the extra fields.><rahs
20267852><2016-10-20 17:28:01><Some object unmarshallers (e.g. Jackson, under some configurations) throw exceptions on unknown fields.><Ren233
20434146><2013-12-09 05:58:52><This does not work, because it doesn&#39;t take into account if /* could be escaped, or could be inside a string literal. JSON is not a regular grammar and thus regular expressions are not enough. You have to parse it to find out where the comments are.><TheGuyWithTheFace
20434146><2013-12-12 07:52:24><It will work in limited situations where you can be sure that your JSON does not contain any data with the comment string in it.  Thank you for pointing out that limitation.  I have edited the post.><Ren233
20434146><2014-06-26 16:45:04><+1 for the link! Actually I think it is a good thing that comments are not supported because when sending data between a client and server, comments are definitively useless and pump lots of bandwidth for nothing. It&#39;s like someone who would ask to have comments in an MP3 structure or a JPEG data block...><LewisKelsey
21409180><2014-06-10 23:59:14><RFC says: &quot;The names within an object SHOULD be unique&quot;. See this error reported at: <a href="https://stackoverflow.com/questions/4912386/resolve-jsonexception-duplicate-keys?lq=1" title="resolve jsonexception duplicate keys">stackoverflow.com/questions/4912386/&hellip;</a>><SazzadHissainKhan
21409180><2014-08-08 03:00:07><Doing this is an invitation for creating JSON that blows up on you at some random point in the future.><mp31415
21409180><2015-05-27 06:26:08><There is no guarantee that order matters in the list of object name/value pairs.  A parser could parse them &quot;out of order&quot; and then this is broken.><AndonM.Coleman
21409180><2017-10-07 02:24:09><Behaviour of a JSON parser with this kind of code is undefined. There is nothing to say that the parser behaves as if only the last value was present. It could behave as if only the first value was present, or any value, or as if the value was an array.><AgrimPathak
21409180><2018-01-01 15:12:03><This is terribly bad advice. As others have pointed out before, the behavior is undefined. Different parsers will show different behavior. Some will return the first &quot;param&quot;, some will return the second &quot;param&quot;, some will stop with an error. It was said before, but this advice is so bad that it&#39;s worth repeating that it&#39;s bad.><Sandeep
21409180><2018-01-17 00:44:14><This might work in a specific implementation but it would be brittle, unless you have control over whatever ingests the json and nothing else is going to use the json data.><mp31415
21409180><2018-02-14 10:30:14><@toolbear JSON does not &quot;blow up&quot;. The parser does. It is a doubtful solution. But not worse than adding &quot;_comment&quot;. Maybe better than nothing.><IndianKing
21409180><2018-05-16 18:35:10><json is not ordered, so this will blow up approximately 50% of the time (at least in Go where if the ordering is not defined, it is randomized)><DanielFischer
22537629><2014-06-12 22:53:11><if you look at the spec you&#39;d see that it&#39;s a superset of json. you can convert from/to json.><CodeGeek
22537629><2014-07-01 03:20:30><Upvoted. It&#39;s obviously a good variation un-open conservative people would just love to hate. I hope your implementation gets known further - and perhaps even gets more popular than the original ;) I hope someone gets to implement it with Ruby as well. @adelphus The language being well-defined is your own perspective or opinion. Being a conservative &quot;developer&quot; if you are one doesn&#39;t prove that you are better and you could be even worse keeping yourself locked up in limited spaces. Don&#39;t go judging people as terrible developers easily.><TomasAndrle
22537629><2014-07-10 00:02:47><Sorry about that, @konsolebox. Perhaps you might reconsider your &quot;well-defined JSON is your opinion&quot; view after reading <a href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf" rel="nofollow noreferrer">ecma-international.org/publications/files/ECMA-ST/ECMA-404.p&zwnj;&#8203;df</a> It is a real standard and devs implementing their own &quot;special&quot; versions leads to fragmentation, confusion and a lot of wasted time. Look at the mess web developers are left with when writing code just because each browser implements slightly different versions of standards. The JSON language may not be perfect, but fragmentation is worse. And yes, that&#39;s just a opinion and you&#39;re free to disagree.><TomasAndrle
22537629><2014-08-08 02:25:56><I admire your gumption, but you&#39;re kinda re-inventing YAML. If you want lot&#39;s of flexibility and human readability, use YAML (don&#39;t actually: <a href="http://stackoverflow.com/questions/450399/which-java-yaml-library-should-i-use/1863814#comment6582202_1863814" title="which java yaml library should i use">stackoverflow.com/questions/450399/&hellip;</a>) or stick with curmudgeony, yet unambiguous JSON.><GManNickG
22537629><2015-02-10 23:15:18><I find the most user-friendly configuration format is still INI. It&#39;s straightforward and not very syntax heavy. This makes it less intimidating for users just dipping their toes in the configuration pond.><AndonM.Coleman
22537629><2016-04-06 22:20:46><Whenever you need json as config (where comments <i>are</i> needed) - name your file &quot;.js&quot; instead of &quot;.json&quot;.. js can of course handle any valid json object and additionally <i>can</i> handle comments.. That&#39;s the reason why it is &quot;webpack.config.js&quot; and not &quot;webpack.config.json&quot; (well there&#39;s a lot more reasons for that too in webpack :P)><mp31415
22537629><2019-01-03 08:32:08><&quot;<i>It was also never intended to be used for configuration files where comments would be needed.</i>&quot; But JSON is used for JSON schemas, where comments are extremely helpful. Comments can be included in <i>description</i> elements, but that turns comments into data. They&#39;re also helpful for documentation, where it would be great to be able to validate the JSON without having to first remove the comments.><AdamFreeman
23275699><2014-09-25 02:15:00><The RFC only states &quot;whitespace is allowed before or after any of the six structural characters&quot;, not explicitly mentioning strings, numbers, &quot;false&quot;, &quot;true&quot;, &quot;null&quot;. This omission is ignored in ALL implementations.><ChristopheRoussy
23275699><2018-09-27 03:44:28><For greater comment density, couldn&#39;t you encode your comment in ternary and use space, tab, and newline to steg it?><mohitmun
23275699><2019-09-24 02:04:44><SHOULD is not MUST. See the explicitly included RFC 2119: MUST: This word, or the terms &quot;REQUIRED&quot; or &quot;SHALL&quot;, mean that the definition is an absolute requirement of the specification. ... SHOULD: This word, or the adjective &quot;RECOMMENDED&quot;, mean that there may exist valid reasons in particular circumstances to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.><AdamFreeman
23275699><2019-09-27 04:22:32><Good reference. A better reasoning against using duplicated keys is the standard&#39;s quote &quot;When the names within an object are not unique, the behavior of software that receives such an object is unpredictable.&quot;. Also now I understand why the standard was not &quot;MUST be unique,&quot; this makes a validator simpler, it only needs to track [ and {, it does not need to know which keys were used already.><PhilMiller
24545329><2014-08-08 02:54:29><Might as well minify that JSON while you&#39;re at it. See @kyle-simpson&#39;s answer about JSON.minify.><knickum
24618928><2014-08-03 14:09:04><Your regexp would remove things like <code>&#47;*hey*&#47;</code> even from inside strings.><SlippD.Thompson
24618928><2014-08-06 02:10:24><Good catch! So just change some stuff on regex.><PrajwalDhatwalia
24618928><2014-08-08 02:57:20><Regular expressions for structured languages are notoriously hard to get right. Check out @kyle-simpson&#39;s answer about JSON.minify as an alternative to ad hoc regexps.><Drt
24618928><2018-09-05 21:07:47><Regarding <i>&quot;(there is no standard)&quot;</i>, there most certainly <i>is</i> a standard that defines exactly what JSON is, and there has been since well before this answer was written.><Mysticial
24839354><2017-06-01 22:04:38><I really thought there was no point going on to the second page of answers for this question but this is EXACTLY what I was looking for and works flawlessly! thanks.><SazzadHissainKhan
24957191><2014-07-29 22:17:30><It is hard to understand why someone would have problem with stating a fact.><mohitmun
24957191><2014-08-08 02:12:46><I would assume someone took exception because the above is no longer JSON, or is invalid JSON. Perhaps adding a short disclaimer would appease.><LutzPrechelt
24957191><2014-08-21 00:48:36><I completely agree with you, and yet there are 883 upvotes so far for the non-answer that just states the obvious. Ideological purity valued above helpful information, that&#39;s SO for you.><LewisKelsey
24957191><2019-06-06 11:35:13><The point is a file with comments is not JSON and will fail to be parsed by many JSON libraries. Feel free to do whatever you want in your own program but a file with comments is not JSON. If you claim it is then people will try to parse it with their language/library of choice and it will fail. It&#39;s like asking if you can use square brackets instead of angle brackets in XML. You can do whatever you want but it will no longer be XML.><SachinVerma
27169861><2019-07-31 20:12:30><Note that the <code>json</code> is not a valid JSON anymore when it includes these propriety comments.><AgrimPathak
33885543><2015-12-17 08:15:10><Could you please add an example? Then you may actually need those extra characters.><TomasAndrle
33885543><2015-12-30 04:06:55><It&#39;s required by the SO guidelines to provide an actual answer. Link-only answers are not desired. You can check the guidelines <a href="http://stackoverflow.com/help/how-to-answer">stackoverflow.com/help/how-to-answer</a>><SimonHrabec
33885543><2015-12-30 19:21:54><SO is moderated by its users. That means I can provide an answer if I have it the same way I can comment yours if it doesn&#39;t follow guidelines. That&#39;s how SO gets to be a great resource.><ChristopheRoussy
34504798><2018-09-05 20:41:56><It&#39;s <b>not JSON</b> anymore if you extend the language in custom ways that require a special preprocessor to handle.><Unheilig
34504798><2018-09-05 20:45:12><@meagar There was JSON5 spec, which supported comments, among other things. But in the end it never became standard.><LutzPrechelt
36213249><2016-12-04 20:59:50><solution category == &#39;transform through preproc&#39;><AndonM.Coleman
41038255><2016-12-22 22:24:14><<code>{ what_if: &quot;I happen to have &#47;* slashes and asterisks *&#47; in my data?&quot; }</code>><NicholasHamilton
41038255><2016-12-22 23:01:59><What I mean is, is most languages you don&#39;t have to worry about comment sequences inside strings. Even in a JSON implementation that supported comments, I would expect parsing my example to result in an object with the key <code>&quot;what_if&quot;</code> and the value <code>&quot;I happen to have &#47;* slashes and asterisks *&#47; in my data?&quot;</code>, not <code>&quot;I happen to have  in my data&quot;</code>.><MarianSpanik
41038255><2016-12-22 23:56:04><Using regex you can avoid data conversion to. What I understand, this should not be the case. JSON is used as a data not the language. So avoid garbage data or comments in data. :-D Most of the language, you write code that compiles in some other format. Here in JS, it is dynamically bind. There is no such type of compilation happens. V8 do some optimization, but that is also in push and failure method.><PhilMiller
41038255><2018-05-08 12:36:18><@DSimon I agree... this seems to work for many cases: <code>json.replace(&#47;(&quot;\&#47;\&#47;.*&quot;|&quot;\&#47;\*(?:.|\n)*?&quot;)|(\&#47;\&#47;.*|\&#47;\*(?:.|\&zwnj;&#8203;n)*?\*\&#47;)&#47;g, &quot;$1&quot;)</code>  <a href="https://regexr.com/3p39p" rel="nofollow noreferrer">regexr.com/3p39p</a>><PeterWone
44700108><2017-11-02 04:44:58><FYI, Firebase Realtime Database does not allow the use of &#39;/&#39; in a key. so this can be a nice convention for your own use, but you cannot do it in Firebase><KyleMit
44700108><2018-01-19 19:45:24><This method breaks some libraries, which require that the key must be unique. I&#39;m working around that issue by numbering the comments.><jdero
44700108><2018-01-21 03:36:40><good comment, I found this question on SO ... this part seems not to be covered by the spec <a href="https://stackoverflow.com/questions/21832701/does-json-syntax-allow-duplicate-keys-in-an-object" title="does json syntax allow duplicate keys in an object">stackoverflow.com/questions/21832701/&hellip;</a>><FilipBartuzi
44700108><2018-03-10 00:29:56><I tend to use it like this nowadays:  { &quot;//foo&quot;: &quot;foo comment&quot;, &quot;foo&quot;: &quot;foo value&quot;, &quot;//bar&quot;: &quot;bar comment&quot;, &quot;bar&quot;: &quot;bar value&quot; }  You can use an array for multiple comments:  { &quot;//foo&quot;: [ &quot;foo comment 1&quot;, &quot;foo comment 2&quot; ], &quot;foo&quot;: &#39;&#39;foo value&quot; }><Atul
50930429><2019-04-24 01:05:55><The &quot;reasoning&quot; link is broken.  Any chance of finding a current link to it?><CodeGeek
50930429><2019-04-24 21:50:42><Don, unfortunately, Google has killed the social media system that contained the post; I have no idea where the original poster went from there, if anywhere. I&#39;ll kill the link in the above info, though, so as to remove the ambiguity. Thanks.><KyleMit
50930429><2019-07-15 00:30:57><The reasoning is <i>not</i> foolish, and you just proved it. Implementing comments as tags preserves <i>interoperability</i>. This is <i>exactly</i> why Crockford wanted comments to be parsed as tags. Now <i>everything</i> is just a tag and parsed <i>the same way</i>.><doug65536
50930429><2020-01-28 22:41:48><If the spec stated that &quot;a line beginning with # is a comment&quot;, then that would be <i>fully interoperable.</i> As it stands, comments both load the parser space, as they are valid <b>parsed items</b> rather than understood to be comments, and they can be different for every .json file in existence. Whereas if (for instance) the spec said &quot;lines beginning with # are comments&quot;, then the parsers could skip those lines without parsing (faster) and not load the parser space (better memory utilization.) There&#39;s no benefit at all from the lack of comments in .json, only downsides.><AgrimPathak
53798477><2019-01-10 19:54:50><You might be interested in yaml (<a href="https://yaml.org/" rel="nofollow noreferrer">yaml.org</a>), a quasi-superset of json which allows for comments and doesn&#39;t need quotation marks.><TomasAndrle
53798477><2020-04-14 03:13:28><My fave answer here. Since one can write their own parser, i hopes that someone will (or already has) written a widely-used json parser which eliminates need for quotes, allows comments, and other improvements. How about eliminating brackets and formatting with white space? :)><Drt
54329228><2019-10-25 15:52:11><<code>jsonc</code> is nice, but unfortunately, you are restricted to // comments. When you need something else , you are kinda broken, too. <a href="https://stackoverflow.com/questions/58553633/how-to-convince-vs-code-to-accept-as-comment-in-json-files" title="how to convince vs code to accept as comment in json files">stackoverflow.com/questions/58553633/&hellip;</a>><FilipBartuzi
58731581><2020-01-13 23:28:10><VS Code <code>.jsonc</code> FTW 🙌><woojoo666
1335851><2019-09-06 19:40:57><The answers here are old but they are wrong. The main reasoning for strict mode was not to prevent programming errors - it was to make JavaScript lexically scoped so it could be statically analysable :]><Mysticial
1335851><2020-01-14 21:40:09><@BenjaminGruenbaum Using <code>&quot;use strict&quot;;</code> alone doesn&#39;t make JS lexically scoped. Declaring variables with <code>let</code> and <code>const</code> should be used too.><IndianKing
1335851><2020-01-15 14:06:16><You are mixing between block scoping and lexical scoping.><chaws
1335875><2013-01-30 06:20:19><Fail fast and fail loudly.><FilipBartuzi
1335875><2013-10-06 02:50:13><If you are writing Javascript inline in HTML files, start each new block with <code>&lt;script&gt;&quot;use strict&quot;;</code>.  The flag only applies to the block in which it is included.><FilipBartuzi
1335875><2014-02-16 04:04:35><<a href="http://conceptf1.blogspot.com/2014/02/avascript-best-practices-ecmascript5-strict-mode.html" rel="nofollow noreferrer">ECMAScript5 strict mode</a>(in my blog). old browsers ignore it. It works like u running in without it.><PeterWone
1335875><2015-01-30 16:49:17><It&#39;s funny, this resulted in strings must have single quotes. So write <code>&#39;use strict&#39;;</code> instead><Veve
1335875><2015-05-14 16:33:16><then what would happen to the hoisting concept of javascript ?><MarianSpanik
1335875><2017-02-17 05:15:04><@SunilSharma If you try to hoist, but it fails because the variable isn&#39;t defined, at the moment it will add it to the global object. With <code>&quot;use strict&quot;;</code>, it will fail instead. This makes more sense, because if it&#39;s adding it to the global object that means that it might not work the next time you run the function / do something else that resets the block, as it will be in the highest block (global).><FilipBartuzi
1335881><2009-08-27 00:30:46><@m4bwav : I don&#39;t think it&#39;s well supported : the page about ECMAScript 5 support in Mozilla is quite poor : <a href="https://developer.mozilla.org/En/JavaScript/ECMAScript_5_support_in_Mozilla" rel="nofollow noreferrer">developer.mozilla.org/En/JavaScript/&hellip;</a> -- and Mozilla&#39;s engine is generally not the worse one ^^><matec
1335881><2010-03-05 05:54:49><Changing the default after so many years ? Too late for that : it would break so many existing sites/scripts/applications... The only possible thing is to help make things better, for the future.><RenatoOliveira
1335881><2010-11-10 17:54:12><I tried a small code snippet that would be invalid when using <code>&quot;use strict&quot;</code> in Firefox 3.6, Safari 5, Chrome 7 and Opera 10.6 (all Mac). No errors whatsoever, so i guess &#39;use strict&#39; is not supported in any browser yet. Didn&#39;t test in IE9 though ;)><PeterCordes
9643692><2012-05-20 22:47:37><Then what does it do?><demonkoryu
9643692><2012-07-12 00:04:02><... this describes <i>in part</i> the compatibility, but not what it actually does.><jdero
11496488><2013-02-26 23:25:21><I disagree. I think this shows why its very useful. In essence it means that this returns its function and not the <code>window</code>><PeterCordes
11496488><2013-07-11 04:02:45><I agree with @Erwinus... <code>function SomeClass() { if (isStrictMode()) { } };  var foobar = new SomeClass();</code>><NicholasHamilton
16863603><2013-10-31 21:34:21><The reason strict mode is optional has nothing to do with what you&#39;ve stated.  The real reason <i>is to not break existing code that may not conform</i>.><naveejr
16863603><2014-08-19 13:37:20><Indeed, the less experienced coders ought to be the <i>first</i> ones to enable the &quot;use strict&quot;;><Veve
17495829><2014-01-18 21:21:12><@JamieHutber : Please visit this link <a href="http://caniuse.com/use-strict" rel="nofollow noreferrer">caniuse.com/use-strict</a>  AND <a href="http://kangax.github.io/es5-compat-table/" rel="nofollow noreferrer">kangax.github.io/es5-compat-table</a>. It will give exact idea for all browser.><demonkoryu
22141126><2014-05-08 16:38:54><WHY are devs in this thread so cavalier about &quot;use strict&quot;??  It THROWS EXCEPTIONS in <i>otherwise working JavaScript</i>, for goodness sakes!  Just sprinkle it on the code like sugar on Corn Flakes, eh?  NO!  BAD!  &quot;use strict&quot; should be used cautiously, preferably only in code you control that has unit tests that pass against all major browsers and that exercise all code paths.  You got tests?  Okay, &quot;use strict&quot; is fine for you, knock yourselves out.><demonkoryu
22141126><2015-03-09 15:46:42><Yes. Obviously &quot;use strict&quot; can break seemingly valid javascript which hasn&#39;t broken before. But the code not having broken before is not equal to the code being correct and doing what it&#39;s supposed to. Usually referencing undeclared variables signals a typo, etc. Use strict allows you to catch these kinds of errors, and hopefully before you ship production code.><NathanOliver
22141126><2015-11-10 16:49:11><... or just apply &quot;use strict&quot; as part of a last pass over your code, fix all the obvious problems, shrug, say &quot;good enough,&quot; then take it out for production :)><screwnut
22141126><2016-03-26 04:48:41><Personally, I never/very rarely <i>add</i> <code>&quot;use strict&quot;;</code> to existing code. That being said, I&#39;ll almost always use it when I&#39;m writing new code from scratch><mohitmun
22141126><2017-12-04 23:22:23><If you&#39;re already using JSLint, you&#39;ve probably fixed most of the places where &quot;use strict&quot; would break things, though.><SimonHrabec
26487977><2020-01-12 01:38:43><With ECMAScript 2015 duplicate property names are allowed again! See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="nofollow noreferrer">MDN documentation</a>.><mohitmun
27114400><2016-06-20 17:41:03><Nit: global variables are allowed, just have to be explicit (e.g. <code>window.foo = bar</code>).><AgrimPathak
27114400><2017-07-29 16:26:18><Requires all property names in an object literal to be unique (var x = {x1: &quot;1&quot;, x1: &quot;2&quot;}) is this valid><TomasAndrle
27114400><2018-03-14 19:04:03><Your example in 11 is missing a modification of a (otherwise it makes no sense). I. e. function sum(a,b) { a = 0; return arguments[0] + b; } alert(sum(1, 2)) will return 3 with strict mode and 2 without strict mode, due to aliasing.><Sandeep
30253376><2016-08-12 03:52:32><&quot;In strict mode octal literals are not allowed (these are literals that start with 0x ...)&quot; octal literals start with a leading <code>0</code>.><AdamFreeman
34428027><2020-01-12 01:39:09><With ECMAScript 2015 duplicate property names are allowed again! See <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode" rel="nofollow noreferrer">MDN documentation</a>.><MarianSpanik
35083544><2016-08-05 11:39:33><it is very nice explanation. However, I have one doubt that can I use &quot;strict&quot; mode in conjunction with other java script libraries, like Angular js?><Unheilig
35083544><2016-08-05 12:11:33><@UVM: The strict-mode directive affects only lexical scope. i.e. only the file/function that it is declared. If you have another file/function that does not have the <code>&#39;use strict&#39;</code> directive, they will be executed in non-strict mode, even when called from a function running in strict mode. See <a href="http://stackoverflow.com/a/6039163/1461424">this asnwer</a> for an explanation.><LutzPrechelt
35083544><2016-10-23 03:04:31><This is not entirely correct. &#39;use strict&#39; does change the way code is executed.><Drt
35083544><2016-10-23 11:55:08><On second look, you&#39;re right. I thought you meant it only threw exceptions, but didn&#39;t change the way the code worked (like changing <code>this</code>). Now I see you were referring to calling other functions.><Drt
35083544><2017-02-10 05:08:22><There are some cases where octal is useful.  The C syntax for it is horrible, but I would have liked to have seen languages add a new octal syntax which could then allow the leading-zero form to be deprecated.  Of course, for Javascript to have supported the leading-zero form was just silly.><SazzadHissainKhan
39069120><2017-02-18 20:41:13><Notice that the code above will add the <b>i</b> variable to the global scope (generally this not a best practice and <b>strict mode</b> helps to avoid that).><Sandeep
39069120><2019-02-06 17:24:02><Can somebody explain the second example? I don&#39;t get it. Shouldn&#39;t <code>this === &#39;a&#39;</code> in both examples?><Unheilig
8318911><2016-09-04 20:40:40><As a side note: don&#39;t use <code>bgcolor</code>. Use CSS <code>background</code>.><SachinVerma
8318911><2016-11-24 13:01:13><Why do you ever want to add a background color called <code>chucknorris</code>? What was the expected color?><NicholasHamilton
8318911><2016-12-01 11:36:11><@masterFly: I don&#39;t know why my comment under the accepted answer was deleted for being &quot;not constructive&quot;, because it answers your question quite well: people experiment with these things all the time. I was only 10 when I discovered this and all I was doing at the time was messing around and seeing what happened. You don&#39;t always have to have a practical reason for doing something, especially something as frivolous as this.><TomasAndrle
8318911><2017-10-01 16:45:32><and <code>&lt;body bgcolor=&quot;stevensegal&quot;&gt;</code> test &lt;/body&gt; is green><NathanOliver
8318911><2019-09-01 04:53:29><@BenDaggers Please read the revision history before making another edit. The <a href="https://stackoverflow.com/questions/tagged/css">css</a> tag is irrelevant and has already been removed twice.><knickum
8318976><2011-11-30 07:19:12><Though I&#39;m still curious as to why OP said &quot;in CSS&quot; and not &quot;in HTML&quot; - Maybe they&#39;re using a super old browser, or just mistaken?><Veve
8318976><2011-11-30 07:20:15><So then he is more than likely using the deprecated <code>bgcolor</code> attribute.><RenatoOliveira
8318976><2012-09-28 11:30:30><Invalid characters are not skipped, they are treated as 0.><KyleMit
8318976><2017-06-07 19:37:08><(WHile this answer may be dead) suggestion: Use background color instead to demonstrate teh colors. Text color is over such a small relative area it is hard to see differences or similarities><screwnut
8333464><2013-02-06 04:32:22><Note that, despite what that blog post says, when you get to handling 3-char strings, you <i>duplicate</i> each character, rather than prepending 0.  i.e. <code>0F6</code> becomes <code>#00FF66</code>, not <code>#000F06</code>.><Drt
12630675><2020-03-18 16:11:29><Thanks, you showed me where the old Netscape source code is... why is it so hard to find?><PhilMiller
12940384><2012-10-18 02:11:21><I figured it out, I had misinterpreted some of the parsing instructions: &quot;adamlevine&quot; = &quot;ada00e000e&quot; = &quot;ada00e000e00&quot; = &quot;ada0 0e00 0e00&quot; = &quot;ad 0e 0e&quot; -- Perfect!!><Drt
12940384><2012-10-18 02:50:28><In case you&#39;re interested, I posted the 5-step algorithm as an UPDATE on a similar question I posted today: <a href="http://stackoverflow.com/questions/12939234/why-do-weird-things-in-font-color-attribute-produce-real-colors" title="why do weird things in font color attribute produce real colors">stackoverflow.com/questions/12939234/&hellip;</a>><Unheilig
12940384><2014-02-07 03:01:38><@TimPietrusky created this freaking incredible demo tool for random color names. Just go here: <a href="http://randomstringtocsscolor.com/" rel="nofollow noreferrer">randomstringtocsscolor.com</a> and click in the box and type &quot;chucknorris&quot;.><Ren233
12940384><2016-01-27 06:26:26><<code>adamlevine</code> does work as per <a href="http://jsfiddle.net/LdyZ8/2959/" rel="nofollow noreferrer">jsfiddle.net/LdyZ8/2959</a> but the letters are blocked into <code>ada00e000e</code> which is padded to <code>ada00e000e00</code> but then reduced down to the typical HEX 6 digit value of <code>[ad]a0[0e]00[0e]00</code> thus making ad0e0e which appears in the jsfiddle above.><screwnut
12940384><2016-01-31 20:13:22><It would be better if this answer <b><i>only</i></b> contained the current state - the history of this answer and other answers belongs in the edit summaries and/or comments.><SimonHrabec
44857242><2019-06-10 05:02:13><This is so cute explanation :D :D :D><rahs
44857242><2020-02-12 21:21:02><So wise and very simple and straigh forward explanation I have ever experienced><matec
44857242><2020-02-13 16:27:44><very creative answer :)><naveejr
1789952><2019-05-24 19:18:20><I don&#39;t like IE either, but if you have two functions that are largely identical, and one is better supported than the other one, I think you should pick the better supported one? So <code>indexOf()</code> it is...><LewisKelsey
1789952><2019-06-27 00:32:13><Is it possible to do a case insensitive search?><Veve
1789952><2019-06-27 04:35:47><<code>string.toUpperCase().includes(substring.toUpperCase())</code>><MarianSpanik
1789952><2019-07-06 12:23:23><@EricMcWinNEr <code>&#47;regexpattern&#47;i.test(str)</code> --&gt; i flag stands for case insensitivity><PrajwalDhatwalia
1789952><2019-08-28 23:06:27><This doesn&#39;t seem to work for me in Google App Script.><SlippD.Thompson
1789952><2020-01-22 15:40:17><What if we check letters in a string? for example: check if &quot;sample string&quot; contains &quot;elpmag&quot; letters.><IndianKing
14193950><2019-06-03 22:40:39><Just do <code>&quot;potato&quot;.includes(&quot;to&quot;);</code> and run it through Babel.><dddJewelsbbb
14193950><2019-11-18 08:25:30><includes isn&#39;t supported by IE sadly><PrajwalDhatwalia
14193950><2020-04-18 13:40:39><@eliocs can you answer this. I am getting any one message. Need to change the message <a href="https://stackoverflow.com/questions/61273744/how-can-i-replace-the-strings-which-i-got-from-an-array-in-react-native" title="how can i replace the strings which i got from an array in react native">stackoverflow.com/questions/61273744/&hellip;</a>><IndianKing
14193950><2020-04-27 18:58:21><another plus for it is that is case sensitive as well. <code>&quot;boot&quot;.includes(&quot;T&quot;)</code> is <code>false</code>><Unheilig
44936961><2020-01-08 22:33:28><This is overkill but nonetheless an interesting answer><GManNickG
1125968><2016-01-20 16:51:22><anyone reading this who thinks they might lose files, I&#39;ve been in this position and found Sublime Text&#39;s buffer has saved me - if I&#39;m working on something, then accidentally delete everything by trying to solve a similar problem to this or by using an answer on this question and have had the files open in Sublime (which there&#39;s a good chance of) then the files will still be there is Sublime, either just there, or in the undo history><Unheilig
1125968><2016-03-22 16:37:48><<code>git reset --hard origin&#47;branch_to_overwrite</code>><rahs
1126089><2009-09-24 12:25:42><I tried using &quot;git clean&quot; to solve the same issue, but it did not resolve it.    git status says &quot;Your branch and &#39;origin/master&#39; have diverged, # and have 2 and 9 different commit(s) each, respectively.&quot; and git pull says something similar to what you have above.><RenatoOliveira
1126089><2010-01-26 05:38:00><would he not need to change to the master branch and then do git clean for it to work? Then he can flip back to whatever development branch he was working from.><mp31415
1126089><2010-02-05 08:07:29><@slacy: Then you need to merge the two branches.><AdamFreeman
1126089><2010-07-02 21:21:35><git clean is a rather blunt instrument, and could throw away a lot of things that you may want to keep. Better to remove or rename the files that git is complaining about until the pull succeeds.><Sandeep
1126089><2010-11-30 02:30:01><I do not think this works in general. Isn&#39;t there a way to do basically a git clone remote via a forced git pull?><mp31415
1126089><2011-02-23 12:24:56><@mathick: <code>git fetch origin &amp;&amp; git reset --hard origin&#47;master</code>><knickum
1126089><2011-12-19 20:29:27><I needed to add a <code>-x</code> to that <code>git clean</code> to get it to work for me, for some reason (<code>-d</code> wasn&#39;t deleting a <code>.ideas</code> directory for some reason), but this fixed my problem, certainly.><onmyway133
1126089><2013-07-30 22:19:40><avoid sudden cardiac arrest: use <code>git clean -n</code> first><IsmaelLuceno
1126089><2014-03-04 16:28:11><Is <code>git clean</code> the best answer here?  Seems like removing files isn&#39;t necessarily what the OP wants. They asked for &#39;an overwrite of local files&#39; not deletion.><rahs
1126089><2015-06-11 05:12:20><<code>git clean</code> by itself doesn&#39;t seem to help, @Arrowmaster &#39;s solution is closer, but a better one by Lloyd Moore is in the next answer.><NicholasHamilton
2798934><2011-04-09 00:00:57><I&#39;ve done this and some local files that were no longer in repo were left on the disk.><chaws
2798934><2011-07-13 18:11:31><I do not think that this is correct. the above will perform a merge, not overwrite which was requested in the question: &quot;How to force git to overwrite them?&quot; I do not have the answer, I am currently looking for it.. at the moment I switch to the branch with with the code that I want to keep &quot;git checkout BranchWithCodeToKeep&quot;, then do &quot;git branch -D BranchToOverwrite&quot; and then finally &quot;git checkout -b BranchToOverwrite&quot;. you will now have the exact code from BranchWithCodeToKeep on the branch BranchToOverwrite without having to perform a merge.><naveejr
2798934><2012-02-21 22:56:54><instead of merging using &#39;git pull&#39;, try git fetch --all followed by &#39;git reset --hard origin/master&#39;><dddJewelsbbb
2798934><2012-05-17 16:23:04><Lloyd Moore&#39;s suggestion is correct, but beware that it can remove local unpushed commits from your branch.><ChristopheRoussy
2798934><2012-11-19 17:54:51><yep, the @lloydmoore solution worked for me.  Could do with being an answer rather than just a comment.><Alice
3417733><2012-02-12 07:03:53><I think the scenario description makes it clear that he doesn&#39;t really want to throw away the content.  Rather what he wants is to stop git baulking at overwriting the files.  See my suggestion.><Unheilig
4675413><2011-12-15 19:28:09><Same here. Sometimes only the very hard solution works, it happens often that only reset and clean are not enough somehow...><mp31415
4692569><2012-03-31 00:39:22><use <code>git clean</code> with caution><Atul
5361169><2011-10-18 18:08:13><You can give git clean a path argument to be more specific and avoid deleting untracked files that aren&#39;t conflicting.><dddJewelsbbb
5361169><2011-12-11 18:35:13><Awesome... Ran this against my dotfiles repo... In my home directory. Good that I didn&#39;t really have anything important there...><Alice
5361169><2012-02-12 07:05:41><I think the scenario description makes it clear that he doesn&#39;t really want to throw away the content.  Rather what he wants is to stop git baulking at overwriting the files.  @Lauri, this should not have happened to you.  Unfortunately people seem to have misread the essence of scenario description - see my suggestion.><Ren233
5361169><2012-06-23 12:32:08><<b>FINALLY</b>. git clean -f -d  is handy when make clean fails to clean everything.><AndonM.Coleman
5361169><2013-02-11 20:04:55><If you want to sync the whole directory with the remote repo, this is the way to go.><FilipBartuzi
5361169><2013-06-13 14:58:23><@crizCraig unless they are added in <code>.gitignore</code>><SazzadHissainKhan
5361169><2015-08-13 02:28:00><@earthmeLon, for that you might want <code>git clean -dfx</code>. The <code>-x</code> ignores .gitignore. Typically your build products will be in .gitignore.><TheGuyWithTheFace
5361169><2018-08-16 22:26:41><It can be good to run <code>git clean -nfd</code> first, which only shows, <i>what would be removed</i> before it&#39;s actually done, that is before you run into troubles. :-)><Sandeep
5361169><2020-03-07 21:16:47><That did it for me, thank you!><KyleMit
5361169><2020-03-23 18:52:47><For me, this is the only working solution on the entire internet><AgrimPathak
5904539><2014-05-07 13:16:17><This was what ultimately worked for me as I had force pushed my branch to the origin repo and kept getting merge conflicts when trying to pull it to my remote repo..><Atul
5904539><2014-11-21 18:03:43><Hi, actually this is a trick for a <code>work around</code> but really effective. Because some conflicts may happen just in few commits then reverting 5 commits will make sure no conflicts with remote code.><mohitmun
8888015><2012-05-17 16:18:25><Watch out! If you have local unpushed commits this will remove them from your branch! This solution keeps untracked files not in the repository intact, but overwrites everything else.><PrajwalDhatwalia
8888015><2012-11-22 18:38:05><It&#39;s a popular question, so I&#39;d like to clarify on the top comment here. I just executed commands as described in this answer and it hasn&#39;t removed ALL the local files. Only the remotely tracked files were overwritten, and every local file that has been here was left untouched.><demonkoryu
8888015><2013-11-23 06:22:07><I lost all local commits that weren&#39;t in the <code>origin&#47;master</code> tree after a rebase. It&#39;s very possible to shoot yourself in the foot, here.><GManNickG
8888015><2013-12-14 13:59:12><You can also do this for a tracking branch if you have the same branch in origin and locally, just change git reset --hard origin/master to git reset --hard origin/(branch)><LutzPrechelt
8888015><2013-12-17 19:17:24><in case you&#39;re pulling from a repo that has its remote branch name different from &quot;master&quot;, use <code>git reset --hard origin&#47;branch-name</code>><matec
8888015><2014-04-07 12:02:37><This should be the accepted answer. Works fine for me. I guess the assumption here though is that you do not have local commits, which in my case is good as the &quot;local&quot; only possesses a deployment key.><onmyway133
8888015><2014-05-02 23:15:24><Won&#39;t this also throw away my local commits? I want to keep my commits, and only overwrite untracked/uncommitted changes.><NathanOliver
9244805><2012-03-20 18:55:38><Aren&#39;t you assuming that a commit has never been performed? In my case I made several commits to my local branch, but wanted to &quot;reset&quot; everything back to the remote branch><RenatoOliveira
9244805><2012-03-21 07:54:34><No I don&#39;t think so.  Stashing just moves uncommitted files out of the way.  The above also moves (stashes) files that git does not track.  This prevents files that have been added to the remote, which have not yet pulled down to your machine - but which you have created (!) - to be pulled down.  All without destroying the uncommitted work. Hope that makes sense?><KyleMit
9244805><2012-05-02 06:48:15><If you don&#39;t have 1.7.6, you can mimic <code>--include-untracked</code> simply by temporarily <code>git add</code>-ing your entire repo, then immediately stashing it.><SimonHrabec
9244805><2013-02-01 05:28:03><I agree with Hedgehog. If you do the popular answers here, you are more than likely going to find you&#39;ve inadvertently killed a lot of stuff that you didn&#39;t really want to lose.><NathanOliver
9244805><2013-04-25 12:55:09><I had other untracked files--besides the one the merge/pull wanted to overwrite, so this solution worked best. <code>git stash apply</code> brought back all my untracked files with the exception (rightly) of the ones that the merge had already created: &quot;already exists, no checkout.&quot; Worked perfectly.><TheGuyWithTheFace
9244805><2016-11-30 15:05:22><This can be the easiest way to hose a repo unintentionally, just like what happened to @Lauri, but worse because you think you&#39;re protecting files from deletion. If you have one <code>.gitignore</code> rule that has a wildcard in it, kiss them goodbye. <a href="http://blog.icefusion.co.uk/git-stash-can-delete-ignored-files-git-stash-u/" rel="nofollow noreferrer">Explanation.</a>><MalusJan
9244805><2017-03-23 16:30:32><This is the cleanest answer, and should be the accepted one. To save some typing you can use the short form: <code>git stash -u</code>.><IndianKing
9244805><2019-04-16 04:09:36><The link about git stash --include-untracked destroying folders that are gitignored is dead - let&#39;s find a replacement.  In the meantime, the @Waif comment about <b>how this answer can destroy gitignore&#39;d folders</b> should be upvoted, and preferably converted into a new answer. The <a href="http://blog.icefusion.co.uk/git-stash-can-delete-ignored-files-git-stash-u/" rel="nofollow noreferrer">GitLab issue</a> you linked has details.  I use <code>git stash</code> a lot and was very surprised to hear it can destroy files.><mohitmun
10113231><2012-05-07 17:36:16><This is the best answer I&#39;ve seen so far.  I haven&#39;t tried it, but unlike other answers, this doesn&#39;t attempt to nuke all your untracked files, which is very dangerous for obvious reasons.><AgrimPathak
10113231><2012-07-27 09:44:56><Ditto - this worked for me when doing a very large merge (GitHub pull request) where I just wanted to accept it all on top of what I had.  Good answer!  In my case the last two commands were: 1) <code>get fetch other-repo</code>; 2) <code>git merge -s recursive -X theirs other-repo&#47;master</code>><PrajwalDhatwalia
10113231><2014-12-05 19:40:52><This will overwrite any conflicts with the repositories files and not your local ones, correct?><screwnut
10113231><2016-03-11 20:46:21><Best answer. The highest accepted answer left me in my case on detached head. I switched back to local master branch and ran <code>git merge -X theirs origin&#47;master</code>><PeterCordes
10113231><2016-07-26 11:57:11><Tried this - then add/commit my new changed files, but still said my branch was behind remote when I tried to push.  Massive wasted time because &quot;git pull&quot; doesn&#39;t ask &quot;Overwrite local? y/n/all&quot;.><Ren233
10113231><2017-04-26 04:41:26><Hang on...doesn&#39;t have <code>git add *</code> and <code>git commit -a &lt;more-options-here&gt;</code> have the same effect? Why would you need both?><LewisKelsey
10113231><2018-04-05 04:47:14><@MarcelSt&#246;r you don&#39;t need both but they also don&#39;t do the same thing. <code>git commit -a</code> only has that affect on files that are already tracked; <code>git add *</code> will add files that are not tracked. So if you do <code>git commit -a</code> it won&#39;t catch new files, then you might need to do a <code>git add</code> afterward, but it you do <code>git add *</code> you won&#39;t need <code>-a</code> on the commit.><dddJewelsbbb
10113231><2018-06-29 04:27:02><The problem with this (excellent) answer, is it adds the all the local files, which sometimes may not be what you want. You may just want to add the specific files that were omitted.  But the best thing about it is, it gets him to do what he should have done -- add them locally.  You probably won&#39;t need the -X theirs strategy, since they&#39;re the same image. In fact, I&#39;d suggest leaving it off at first, just to find out if there are any anomalies, and  add it in if there are, after reviewing that &#39;theirs&#39; is always the correct choice.  But then, I&#39;m paranoid.><screwnut
10113231><2019-06-05 22:39:57><i just wanted freaking git to overwrite everything and shut up about it. after all im just using it between my work pc and some raspberry pi systems. Whishing for a force overwrite option, at least for project leader><RenatoOliveira
13242127><2013-05-06 14:21:24><Using &quot;git merge origin/master&quot; as the last line (like you say in your note) instead of &quot;git pull&quot; will be faster as you&#39;ve already pulled down any changes from the git repo.><Mysticial
13242127><2013-09-02 06:25:37><Yeah of course, <code>git merge origin&#47;master</code> will be faster and probably even safer. Since if someone pushed new changes during the removal of of files of this script (which is not likely to happen, but possible), the whole pull could fail.  The only reason I put <code>pull</code> in there is because someone might not be working on the master branch, but some other branch and I wanted the script to be universal.><NicholasHamilton
13242127><2017-11-21 19:41:39><If you have locally created files like option files, put them in <code>.gitignore</code>.><Sandeep
15114868><2013-05-06 14:20:47><Using &quot;git merge origin/master&quot; as the last line (like you say in your note) instead of &quot;git pull&quot; will be faster as you&#39;ve already pulled down any changes from the git repo.><KyleMit
15114868><2013-09-02 06:48:40><The checkout of modified files is needed, so this works 100% of times. I updated my script with that a long time ago, but forgot to update here as well. I also use it a little differently than you. I checkout files which have any type of modification, not just M, so it works all the time.><NathanOliver
16238123><2014-01-07 14:38:09><Your answer is just what you needed for your rep.  I must ask, does this also remove all untracked files?><naveejr
16238123><2014-01-09 20:01:15><Yeah, most of my rep is coming from here :) This will also remove all untracked files. Something I had forgotten and was painfully reminded of just 2 days ago...><demonkoryu
16238123><2014-01-09 20:02:55><See the comments on this other answer: <a href="http://stackoverflow.com/a/8888015/2151700">stackoverflow.com/a/8888015/2151700</a>><CodeGeek
16238123><2016-04-19 23:27:08><This did not remove my untracked files; which is actually what I&#39;d expect. Is there a reason it might for some people and not for others?><onmyway133
16238123><2017-08-15 17:12:21><Untracked files are not affect4ed by git reset. If you want them to be removed as well, do <code>git add .</code> first, before <code>git reset --hard</code>><AdamFreeman
16238123><2017-12-21 06:37:58><This is exactly what I needed: something that overwrites untracked files that exist in the remote, and leaves everything else intact.><dddJewelsbbb
22021513><2018-09-12 04:14:56><This answer is also nice because it works regardless of which branch you are on!><AgrimPathak
22523469><2014-04-05 19:49:57><&quot;git branch -D master&quot; delete the branch. so be careful with it. I prefer to use &quot;git checkout origin/master -b &lt;new branch name&gt;&quot; which create a new branch with a new name and you done need 3,4 lines. Also recommended to use &quot;git clean -f&quot; as well.><AndonM.Coleman
31869042><2016-03-04 00:01:46><This will overwrite modified files (files that were previously checked in) and it will remove untracked files (files that have never been checked in). Exactly what I was looking for, thanks!><matec
34439104><2019-10-15 17:29:03><In short: <code>git pull -r</code>.><doug65536
49747717><2018-04-27 20:57:58><Why would it be different than on, e.g., Linux? Which particular implementation/package of git do you use? And/or which environment (e.g. MinGW)?><TomasAndrle
49747717><2018-04-29 16:53:00><I am not sure, only sure that works in windows. In linux what is the separator to concatenate two commands in a single line? (not the pipe, somply concatenate without passing the outoput)><AgrimPathak
50522849><2019-11-13 17:43:57><If you find yourself using this frequently add a bash shortcut <code>alias gplf=&#39;git fetch &amp;&amp; echo &quot;HEAD was at $(git rev-parse --short HEAD)&quot; &amp;&amp; git reset --hard origin&#47;$(git rev-parse --abbrev-ref HEAD)&#39;</code>><Alice
57613696><2019-08-23 23:49:29><This doesn&#39;t work.  <code>fatal: refusing to merge unrelated histories</code>><MarianSpanik
57613696><2020-01-11 00:32:39><<code>Automatic merge failed; fix conflicts and then commit the result.</code>><ChristopheRoussy
336859><2010-04-09 19:51:59><<a href="http://www.permadi.com/tutorial/jsFunc/index.html" rel="nofollow noreferrer">permadi.com/tutorial/jsFunc/index.html</a> is very good page about javascript functions><Alice
336859><2011-04-22 05:30:10><Related is this <i>excellent</i> article on <a href="http://kangax.github.com/nfe/" rel="nofollow noreferrer">Named Function Expressions</a>.><IndianKing
336859><2011-08-03 22:18:43><@CMS references this article: <a href="http://kangax.github.com/nfe/#expr-vs-decl" rel="nofollow noreferrer">kangax.github.com/nfe/#expr-vs-decl</a>><mp31415
336859><2012-02-04 17:52:13><<a href="http://www.dustindiaz.com/javascript-function-declaration-ambiguity/" rel="nofollow noreferrer">This</a> might be the best and concise answer I&#39;ve ever encountered. @Hemant Metalia point out this link for me to answer my similar question.><LewisKelsey
336859><2012-07-18 01:51:31><does anyone know how to pass arguments to a function that is assigned to a variable? for example, functionOne(&#39;mystring&#39;);><AgrimPathak
336859><2012-08-05 02:54:16><John Resig may <a href="http://ejohn.org/apps/learn/#9" rel="nofollow noreferrer">clear this up</a>.><onmyway133
336859><2012-08-22 00:20:22><There are two things you need to be aware of: #1 In JavaScript, declarations are hoisted. Meaning that <code>var a = 1; var b = 2;</code> becomes <code>var a; var b; a = 1; b = 2</code>. So when you declare functionOne, it gets declared but its value isn&#39;t set immediately. Whereas since functionTwo is just a declaration, it gets put at the top of the scope. #2 functionTwo lets you access the name property and that helps a lot when trying to debug something.><CodeGeek
336859><2012-08-22 00:25:39><If you can guess what this does, you&#39;ve understood: <code>f = function(){return 1;};function f(){return 2;}alert(f());</code>><PeterWone
336868><2011-01-14 04:48:43><I tested your first point (compile-time vs. run-time) in Firefox &amp; Google Chrome, and it seems valid. But your second point about scope seems flawed: <a href="http://stackoverflow.com/questions/336859/javascript-var-functionname-function-vs-function-functionname/338053#338053"><code>functionTwo</code> is scoped too</a>.><Drt
338053><2009-07-26 10:52:14><I refer to RoBorg but he is nowhere to be found. Simple: RoBorg === Greg. That&#39;s how history can be rewritten in the age of internet. ;-)><IndianKing
338053><2009-12-04 01:43:04><var xyz = function abc(){}; console.log(xyz === abc);  All browsers I&#39;ve tested (Safari 4, Firefox 3.5.5, Opera 10.10) gives me &quot;Undefined variable: abc&quot;.><SazzadHissainKhan
338053><2013-10-09 00:30:28><Overall I think this post does a good job of explaining the differences and the advantages of utilizing the function declaration. I&#39;ll agree to disagree as far as the benefits of utilizing function expression assignments to a variable especially since the &quot;benefit&quot; seems to be an advocation of declaring a global entity... and everyone knows that you shouldn&#39;t clutter the global namespace, right? ;-)><jdero
338053><2014-01-27 02:25:18><imo a huge reason to use named function is because debuggers can use the name to help you make sense of your call stack or stack trace. it sucks when you look at the call stack and see &quot;anonymous function&quot; 10 levels deep...><TheGuyWithTheFace
338053><2014-03-25 02:09:00><Function declarations inside blocks are not part of the Ecmascript standard. Your first example is implementation dependent and forbidden according to Google&#39;s style guide. <a href="https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" rel="nofollow noreferrer">source</a>><knickum
338053><2014-03-28 07:25:38><@Antimony A function declaration is not the same thing as a block. This should explain better: <a href="http://stackoverflow.com/questions/17409945/function-declarations-within-blocks-according-to-the-google-javascript-style-gui" title="function declarations within blocks according to the google javascript style gui">stackoverflow.com/questions/17409945/&hellip;</a>><Veve
338053><2014-05-02 02:45:47><I am considering to always use <code>var abc = function abc()</code> for local and <code>abc = function abc()</code> for global functions.><onmyway133
338053><2014-06-19 05:55:44><For Mozilla&#39;s documentation of this &quot;combined&quot; function definition format, see – <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope#Function_constructor_vs._function_declaration_vs._function_expression" rel="nofollow noreferrer">developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/&hellip;</a>><TomasAndrle
378934><2019-12-14 18:17:15><As of ES2015 (six and a half years after your answer was posted), both of the functions in the question are named.><chaws
2124597><2010-02-04 08:45:03><There are the test to confirm: <a href="http://blog.firsov.net/2010/01/js-local-functions-anonymous-vs-named.html" rel="nofollow noreferrer">blog.firsov.net/2010/01/&hellip;</a> JS performance test - scope and named functions - Analytics><knickum
3435763><2010-08-09 03:43:48><I did not know that functions could be overwritten in JavaScript! Also, that parse order is the big selling point for me. I guess I need to watch how I create functions.><RenatoOliveira
3435763><2011-11-29 23:10:16><+0 to the &quot;Names function expressions demystified&quot; article as it&#39;s 404ing. Possible mirror?: <a href="http://kangax.github.com/nfe/" rel="nofollow noreferrer">kangax.github.com/nfe</a>><PeterWone
3435763><2011-11-29 23:25:01><@CMS Nice one. Bear in mind though I never saw the original so I don&#39;t know if that&#39;s a mirror or just another article with the same title!><PeterCordes
3435763><2012-01-30 23:18:46><@Mr_Chimp I&#39;m pretty sure it is, thewaybackmachine is saying that it got a 302 at crawl time and the redirection was to the link you provided.><Drt
3435811><2013-05-30 05:13:50><It appears this answer was merged into this question from another question, and the wording <i>might</i> seem to be a tiny bit unrelated to <i>this</i> question. Would you consider editing the answer so it seems more directed specifically at this question? (to reiterate; this isn&#39;t your fault at all... just a side-effect of a merged question). You can also delete it, and I think you would keep your reputation. Or you can leave it; since it&#39;s old, it may not make a big difference.><CodeGeek
5185403><2011-06-03 20:32:22><<a href="http://yuiblog.com/blog/2007/06/12/module-pattern/" rel="nofollow noreferrer">yuiblog.com/blog/2007/06/12/module-pattern</a> is the primordial reference for the module pattern, as far as I can tell. (Though that article uses the <code>var foo = function(){...}</code> syntax even for private variables.><KyleMit
5185403><2013-04-22 03:42:51><This isn&#39;t entirely true in some older versions of IE, actually. (<code>function window.onload() {}</code> was a thing.)><IsmaelLuceno
12893927><2013-01-17 14:13:39><The name in the first case will not be defined because its an <b>anonymous</b> function assigned to a variable. I think the word anonymous was invented for things that don&#39;t have their name defined :)><SachinVerma
12893927><2015-08-29 13:04:03><In this example the two=new becomes a global function because no var><doug65536
14734001><2013-05-14 20:46:50><You have a bit weird way to place the closing braces. Are you a Python coder? It looks like you try to make Javascript look like Python. I am afraid it is confusing for other people. If I had to maintain your JavaScript code I would let your code through an automatic prettyprinter first.><DanielFischer
14734001><2013-12-18 02:13:19><Excellent post.  A &#39;self-executing function&#39; or &#39;immediately invoked function expression&#39; should be easy enough to see and his style preference should not detract from his post - which is accurate and summarizes &#39;hoisting&#39; perfectly.  +1><GManNickG
15704206><2015-05-27 04:31:32><this example is good and is close to perfection, but could be improved. the better example would be to defined <code>var myFunc = null;</code> outside of a loop, or outside of an if/elseif/else block. Then you can conditionally assign different functions to the same variable. In JS, it is a better convention to assign a missing value to null, then to undefined. Therefore, you should declare myFunction as null first, then assign it later, conditionally.><PeterWone
19595198><2015-03-22 18:06:25><I can&#39;t seem to reproduce this. <code>console.log(objectOne.__proto__);</code> prints &quot;functionOne {}&quot; in my console. Any ideas of why this may be the case?><doug65536
19595198><2016-01-21 23:57:23><I can&#39;t seem to reproduce it as well.><mp31415
19595198><2016-01-22 00:26:32><This is a capability of your debugger (to display the &quot;class&quot; of the logged object), and most ones are able to derive a name even for anonymous function expressions these days. Btw, you should make clear that there is no functional difference between the two instances.><ChristopheRoussy
22173438><2014-03-04 21:37:32><then the name <code>w</code> is simply ignored ?><MalusJan
22173438><2014-03-04 21:39:51><is it meant for the purpose documentation/code comment, where the name give&#39;s a hint of what the function do?><AndonM.Coleman
22173438><2014-03-04 21:42:12><@BiAiB: Not quite. It&#39;s not added to the scope the expression is in, but it <i>is</i> in scope <i>within</i> the function.><jdero
22173438><2014-03-04 21:42:57><@PellePenna: Function names are useful for lots of things. The two biggies in my view are recursion, and the name of the function being shown in call stacks, exception traces, and such.><SazzadHissainKhan
22173438><2016-02-10 18:19:34><@ChaimEliyah - &quot;Accepting doesn&#39;t mean it&#39;s the best answer, it just means that it worked for the person who asked.&quot; <a href="http://stackoverflow.com/tour">source</a>><AdamFreeman
22173438><2016-02-10 18:32:23><@A.R.: Quite true. Amusingly, though, right above that it says &quot;The best answers show up first so that they are always easy to find.&quot; Since the accepted answer shows up first even over higher-voted answers, the tour might be somewhat self-contradicting. ;-) Also a bit inaccurate, if we determine &quot;best&quot; by votes (which isn&#39;t reliable, it&#39;s just what we&#39;ve got), &quot;best&quot; answers only show up first if you&#39;re using the &quot;Votes&quot; tab -- otherwise, the answers that are first are the active ones, or the oldest ones.><CodeGeek
22173438><2016-02-10 18:46:56><@T.J.Crowder : Agreed. &#39;arranged by date&#39; is sometimes annoying.><CodeGeek
22173438><2018-04-24 04:37:22><@T.J.Crowder, <a href="https://eslint.org/docs/rules/func-names" rel="nofollow noreferrer">ESLint</a> agrees with you.><SlippD.Thompson
22173438><2019-01-11 21:41:28><Is there an advantage by using the ES6 Method Declaration in Object Initializer over the ES5?><DanielFischer
22173438><2019-01-11 22:01:41><@ealef - Other than being more concise, the only other advantage is if you need to use <code>super</code> within the function to access <code>Object</code>&#39;s version of something. (I&#39;ve updated the answer to clarify that.)><ChristopheRoussy
24055237><2014-06-05 16:34:58><Your example is kind of the same as the top answer><IndianKing
24055237><2014-06-08 13:44:23><The main reason for posting this answer was to provide the link at the bottom. This was the piece that was missing for me to fully understand the above question.><chaws
24055237><2015-01-13 08:26:03><It&#39;s very cool that you wanted to share the link. But links to additional information, in SO, should just be a comment on either the question or your favorite answer. It&#39;s very much sub-optimal to clutter a long, complicated page like this with repeated information just to add a single useful link at the end of it. No, you won&#39;t get rep points for providing the link, but you&#39;ll be helping the community.><NicholasHamilton
25214775><2016-02-02 20:09:06><HI suhail thanks for clear info about function topic. Now my question is which one will be the first declaration in declaration hierarchy whether variable declaration (functionOne) or function declaration (functionTwo) ?><TheGuyWithTheFace
29989450><2015-05-02 23:22:58><I&#39;d say that maintainability is the most important aspect of most code. Performance is important, but in most cases IO is likely to be a bigger bottleneck that the way you define your functions. However there are some problems where you need every bit of performance you can get and this is useful in those cases. Also good to have an answer here that answers clearly a well defined part of the question.><TheGuyWithTheFace
29989450><2015-11-17 22:15:48><Well, I found it to be other way around with Firefox. <a href="http://jsperf.com/sandytest" rel="nofollow noreferrer">jsperf.com/sandytest</a>><SazzadHissainKhan
29989450><2016-12-29 00:56:35><Just an update, since I&#39;ve gone full functional programming style in JavaScript now, I never use declarations, only function expressions so I can chain and call my functions by their variable names. Check out RamdaJS...><PhilMiller
31533124><2015-10-06 00:25:35><Sorry but this is incorrect - I don&#39;t know what Crockford is trying to say in that slide. Both function &amp; variable declarations are always hoisted to top of their scope. The difference is that variable assignments (whether you are assigning it with a string, boolean or function) are not hoisted to the top whereas function bodies (using function declaration) are.><naveejr
31533124><2015-10-06 00:51:24><Have a look at these code examples: <a href="https://gist.github.com/cyberthom/36603fbc20de8e04fd09" rel="nofollow noreferrer">gist.github.com/cyberthom/36603fbc20de8e04fd09</a>><CodeGeek
32477146><2015-10-05 20:58:33><@Arjun What&#39;s the problem if a question was asked years earlier ? An answer doesn&#39;t only benefit the OP but potentially all SO users, no matter when the question was asked. And what&#39;s wrong with answering questions that already have an accepted answer ?><KyleMit
32477146><2015-10-19 05:37:08><@Arjun you got to understand answering old questions is not bad. If it were to be, SO would have had such a barrier. Imagine there is a change in API(albeit not in this question&#39;s context) and someone spots it and provides an answer with the new API, shouldn&#39;t that be allowed?? Until and unless the answer doesn&#39;t make sense and doesn&#39;t belong here, it would be downvoted and removed automatically. You don&#39;t need to bother with it!!!!><mohitmun
34995357><2016-02-01 01:56:52><ahm, your answer... isn&#39;t it ambiguous? well written though so +1 for spending and writing too much info.><ChristopheRoussy
37131496><2018-05-11 05:06:04><While this is good and true, how exactly does this alone relate to the quesiton being asked?><matec
38940765><2016-08-20 08:40:27><what about the third option, <code>var fn = function fn() {...}</code>?><CodeGeek
38940765><2016-08-23 18:00:44><Hi Chharvey, not sure about ur question, I guess u r talking about function expression which I have already mentioned. However, if still there is some confusion just be more elaborative.><KyleMit
38940765><2016-08-23 18:39:46><yes I was asking about a <i>named</i> function expression. it&#39;s similar to your option #2 except that the function has an identifier. usually this identifier is the same as the variable it&#39;s being assigned to, but that&#39;s not always the case.><Ren233
38940765><2016-08-23 19:42:19><Yes Named function expression is similar to my option #2. Well having an identifier is not mandatory as it&#39;s not used. Whenever you will be executing the function expression you will use the variable holding the function object. Identifier serves no purpose.><screwnut
43871841><2017-06-13 20:44:01><<code>...also this way of declaring is a better way to create Constructor functions in JavaScript</code> , may you please elaborate, I&#39;m curious!><FilipBartuzi
43871841><2017-06-13 20:56:45><One reason is because all built-in Constructor functions in JavaScript created like this function Number() { [native code] } and you shouldn&#39;t be confused with built-in ones, also referencing later on in this case is safer and you end up neater code but not using hoisting...><mp31415
46461041><2017-11-26 09:41:53><Yes, this difference is so insignificant that hopefully devs will concern themselves with which approach is more maintainable for their specific needs rather than which one <i>might</i> be faster (you&#39;ll get different jsperf results on each try depending on what the browser is doing -- the majority of javascript tasks needn&#39;t concern themselves with micro-optimizations to this degree).><MalusJan
46461041><2018-05-11 05:10:00><@squidbe There is no difference. Look here: <a href="https://jsperf.com/empty-tests-performance" rel="nofollow noreferrer">jsperf.com/empty-tests-performance</a>><woojoo666
49172390><2018-06-19 01:35:22><I fail to see how this style of coding offers the least bit of performance.><woojoo666
51344002><2018-11-20 21:47:44><What am I looking at? I don&#39;t think this explains the question, nither that you do understand what you did, In the second example, the only reason you can access the &#39;area&#39; variable is that you did not declare it, so it registered on window.area instead.><Mysticial
54476394><2019-03-17 20:55:05><Look at the <b>Browser Compatibility Table</b> for details><woojoo666
61212><2013-02-01 23:43:02><This interactive git cheat sheet <a href="http://www.ndpsoftware.com/git-cheatsheet.html" rel="nofollow noreferrer">ndpsoftware.com/git-cheatsheet.html</a> shows the git workspace (google gives you better results with &quot;workspace&quot; than &quot;working copy&quot;).><GManNickG
61212><2013-07-23 14:00:10><Note: if you only want to remove <i>some</i> untracked files, but <i>not all of them</i>, <code>git clean</code> has now an <b>interactive</b> mode! See <a href="http://stackoverflow.com/a/17802455/6309">my answer to this other question</a>: git 1.8.4+><PeterCordes
61212><2014-09-15 06:28:05><Note that you&#39;re not removing files from git branch, as branch is a reference to a commit and therefore doesn&#39;t contain untracked files. Those are only present in the working directory and have nothing to do with branches. That&#39;s probably just terminology clarification.><mp31415
61212><2017-06-15 23:30:40><Before you post a new answer, consider there are already 25+ answers for this question. Make sure that your answer contributes what is not among existing answers><FilipBartuzi
61212><2017-09-02 14:15:43><To clarify for the understanding of the uninitiated and those new to Git - run git status and if it shows a file as untracked, and you don&#39;t want that file in the repo, you can just go to your filesystem and delete or move it.  This will not do anything bad to your local repo or to Git. You can also use <code>git clean</code> or some variation in the answers below, including the interactive version to delete just selective files, but interactive mode can be tedious. Whatever you do, make sure you understand what <code>git clean</code> will delete or use <code>--dry-run</code> to have it tell you without deleting anything.><IndianKing
61212><2018-03-15 04:48:23><If the files are not yet being tracked, couldn&#39;t you just remove them without git? <code>rm files-to-be-deleted</code>><mp31415
61212><2018-05-02 15:54:25><Just saying: personally I&#39;d be WAY too worried I overlooked something. So I&#39;d simply create a fresh clone in a separate directory, then eventually delete the original after I triple-checked I have everything I need.><PeterWone
61212><2018-06-21 04:44:33><I would Stash it in case you need to use them again and to clean use git clean: more deatils:  <a href="https://git-scm.com/docs/git-clean" rel="nofollow noreferrer">git-scm.com/docs/git-clean</a>><Sandeep
912737><2013-12-09 18:54:56><As previously stated, good to dry-run it with <code>git clean -n -d</code>><Mysticial
912737><2017-07-10 17:13:53><Same thing is to do <code>git clean -nd</code> and <code>git clean -fd</code>.><FilipBartuzi
14521765><2015-07-24 17:03:05><BTW, this is written in <a href="http://git-scm.com/docs/git-clean" rel="nofollow noreferrer">documentation</a> : Git will refuse to delete directories with .git sub directory or file unless a second -f is given. But thanks anyway!><CodeGeek
20195320><2016-02-29 21:10:37><@Martin One of the projects I&#39;m working on is +8 years old with +80 developers actively coding. Git sometimes fails to clean it on the first pass.><CodeGeek
20195320><2020-04-17 14:37:20><I can confirm this, so this is still valid in 2020. We are also working on a large project and I had to run it 4-5 times until GIT did not find any more files to be deleted.><TheGuyWithTheFace
20846779><2014-09-30 20:37:52><@pal4life It was added in 1.8.4, you might be running an older version of git? <a href="https://github.com/git/git/blob/master/Documentation/RelNotes/1.8.4.txt" rel="nofollow noreferrer">github.com/git/git/blob/master/Documentation/RelNotes/1.8.4.&zwnj;&#8203;txt</a>><PrajwalDhatwalia
20846779><2019-10-22 06:38:30><I like this – I&#39;m more comfortable having it in my bash history than any of the other options, because it&#39;s no big deal if I accidentally ctrl-r or ctrl-p to it.><Mysticial
21057032><2016-10-18 04:52:27><Can you explain the -u on the stash?  I do not follow how that works differently from git stash save.  I tried this and it worked.  Looked on git docs and could not find it there either.><Ren233
21057032><2016-10-18 16:55:14><<code>-u</code> is equivalent to <code>--include-untracked</code>. You can find a help with <code>git help stash</code>.><mp31415
28082580><2016-07-05 00:23:19><The command <code>git clean -fdXx</code> produces the error message <i>&quot;fatal: -x and -X cannot be used together&quot;</i> (using git-2.8). For your last sentence within your answer, please provide a link to git manual. Cheers><Sandeep
28082580><2018-12-17 13:19:24><run the two commands in sequence: git clean -fdX, git clean -fdx><TheGuyWithTheFace
34049725><2017-06-25 03:07:14><BTW you can just do git clean {flags} :/ so it will be as if you ran the command in the repo root><LutzPrechelt
35539401><2016-03-01 14:10:30><At least this is a different approach. :) Another way, that would remember the deleted files in the reflog but not in any branches, would be: <code>git add .</code> <code>git commit -m &#39;about to delete&#39;</code> <code>git reset --hard HEAD~</code>><PeterCordes
35539401><2016-04-30 02:25:05><even more quick way is <code>git add . &amp;&amp; git reset --hard HEAD</code>><screwnut
35539401><2016-07-19 19:35:46><<code>git add . &amp;&amp; git reset --hard</code>><IsmaelLuceno
35539401><2017-02-11 04:00:06><This might not be what you want if there are also changes you do wish to commit.><SimonHrabec
35539401><2017-08-30 19:54:22><@AlexanderMills <code>git reset --hard</code> resets all uncommited changes BUT UNTRACKED FILES to the state of the latest commit. That is why we first need <code>git add .</code> -- that stages all untracked files (so they are reset, too)><Sandeep
35737150><2016-04-05 01:06:21><This will also remove valid changes to tracked files. I wouldn&#39;t recommend it.><Unheilig
35737150><2016-04-05 08:01:29><Yeah, you&#39;d want to commit changes to tracked files first.><onmyway133
37614185><2017-03-30 21:35:10><You can replace <code>git add --all</code> by <code>git add .</code>. So you can do it in a shorter way in oneline <code>git add . &amp;&amp; git reset --hard HEAD</code> <i>( be <b>very</b> carefull with this command)</i>.><dddJewelsbbb
37614185><2017-07-01 05:59:25><Why use this over <code>git clean</code>?><GManNickG
37614185><2017-09-19 15:54:18><Because <code>git clean</code> apparently also deletes everything that is ignored. It just deleted my <code>node_modules</code> folder. Doing this would first stage all files except for the ignored ones, and then delete them by doing a reset. Ignored files will not be touched.><DanielFischer
37614185><2017-09-26 19:12:11><@Andreas it doesn&#39;t delete ignored files for me (git 2.14.1). <a href="https://stackoverflow.com/a/64966/2448440">You should run <code>git clean -n</code></a> anyway before doing the real deletion (or use <a href="https://stackoverflow.com/a/20846779/2448440"><code>git clean -i</code></a>).><RenatoOliveira
37614185><2017-09-26 21:52:17><@Qw3ry <code>git version 2.10.2.windows.1</code> over here, strange.><ChristopheRoussy
38978877><2017-01-26 01:46:47><Thanks.  I left out the <code>-x</code> and just used <code>git clean -ffd</code> to avoid erasing files in the .gitignore.><demonkoryu
45220636><2020-01-30 23:27:02><What&#39;s with that image?><chaws
45558196><2019-06-30 23:43:05><How is this remotely helpful? It doesn&#39;t delete any files nor does it do anything to a file which has not been checked into the repo.><mohitmun
45994347><2019-06-30 23:44:14><I think you have a typo <code>uggested</code> but that&#39;s just a &quot;<code>uggestion</code> lol><KyleMit
46409906><2019-06-30 23:45:06><surely this should be used with great caution><MalusJan
46868431><2019-06-30 23:46:52><the stash is a good idea, however you might wanna use <code>git stash save and type some comment as to what this stash was for</code>><SimonHrabec
47070614><2018-06-01 07:35:50><Thanks for you feedback, my statement was confusing. I wanted to say that the highlighted aliases come automatically with oh-my-zsh. They obviously work great in <code>bash</code>. I edited my answer to reflect that.><KyleMit
47627685><2019-05-08 18:26:20><This will also remove changes staged for commit, not only untracked files, which may not be what you want.><CodeGeek
47627685><2019-05-09 22:17:53><Doesn&#39;t work: leaves some files. <code>git clean -ffdx</code> is the solution><screwnut
6841333><2011-07-27 16:22:34><This might be a locale problem.><SimonHrabec
6841333><2012-07-12 16:34:06><The real answer is to always, always use seconds since an epoch for logging, like the Unix epoch, with 64 bit integer representation (signed, if you want to allow stamps before the epoch). Any real-world time system has some non-linear, non-monotonic behaviour like leap hours or daylight savings.><LewisKelsey
6841333><2014-02-15 05:03:03><Lol. They fixed it for jdk6 in 2011. Then, two years after that, they discovered that it should get fixed in jdk7, too.... fixed as of 7u25, of course, I did not find any hint in the release note. Sometimes I wonder how many bugs Oracle fixes and tells nobody about it for PR reasons.><naveejr
6841333><2014-10-14 18:39:15><A great video about these kind of things: <a href="http://www.youtube.com/watch?v=-5wpm-gesOY" rel="nofollow noreferrer">youtube.com/watch?v=-5wpm-gesOY</a>><PrajwalDhatwalia
6841333><2015-07-04 00:23:47><And another from the same guy, @Thorbj&#248;rnRavnAndersen: <a href="https://www.youtube.com/watch?v=Uqjg8Kk1HXo" rel="nofollow noreferrer">youtube.com/watch?v=Uqjg8Kk1HXo</a> (Leap seconds). (This one is from Tom Scott&#39;s own YouTube channel, not from Computerphile.)><Mysticial
6841333><2017-03-17 03:19:17><@PhilH The Nice thing is, there will still be leap seconds. So even that do not work.><matec
6841479><2011-07-27 21:22:16><@Jon: Out of curiosity, why did they set their clocks back by such a &quot;weird&quot; interval? Anything like an hour would have seemed logical, but how come it was 5:52mins?><LutzPrechelt
6841479><2011-07-27 21:25:02><@Johannes: To make it a more globally normal time zone, I believe - the <i>resulting</i> offset is UTC+8. Paris did the same sort of thing in 1911 for example: <a href="http://www.timeanddate.com/worldclock/clockchange.html?n=195&amp;year=1911" rel="nofollow noreferrer">timeanddate.com/worldclock/clockchange.html?n=195&amp;year=1911</a>><dddJewelsbbb
6841479><2011-07-27 22:01:29><@Jon Do you happen to know if Java/.NET copes with September in 1752? I always used to love showing people cal 9 1752 on unix systems><AndonM.Coleman
6841479><2011-07-27 22:04:01><@Mr Moose: I believe Joda Time will do different things depending on the calendar you pick, and Noda Time will when we implement cutover calendars. I don&#39;t know about the &quot;native&quot; Java / .NET classes.><Atul
6841479><2011-07-28 04:06:32><Does this mean that, somewhere in the Java date libraries, there&#39;s logic handling this very edge case (and every other bizarre edge case)?><Ren233
6841479><2011-07-28 04:07:44><@yahelc: Nope - there&#39;s just general time zone code, which handles all kinds of historical time zone transitions.><mohitmun
6841479><2011-07-28 06:05:52><@yahelc, to elaborate: time zone changes are basically a small set of different possible parameterized events. The code implements this set of events, and a timezone database supplies a list of events and parameters for each timezone. By the way, this timezone database can be updated independently of the JRE itself: <a href="http://www.oracle.com/technetwork/java/javase/tzupdater-readme-136440.html" rel="nofollow noreferrer">oracle.com/technetwork/java/javase/tzupdater-readme-136440.h&zwnj;&#8203;tml</a>><Sandeep
6841479><2011-07-28 06:16:14><So why the heck was Shanghai 5 minutes out of wack in the first place?><RenatoOliveira
6841479><2011-07-28 06:27:45><@Charles: Lots of places were had less conventional offsets back then. In some countries, different towns each had their own offset to be as close to geographically correct as possible.><DanielFischer
6858453><2011-07-30 12:28:55><Conversion/storage into UTC really wouldn&#39;t help for the problem described as you would encounter the discontinuity in the conversion to UTC.><chaws
10612572><2012-05-16 13:39:51><I&#39;m afraid that&#39;s not the case. You can try my code in you system, it will output <code>1</code>, because we have different locales.><screwnut
10612572><2014-11-26 23:53:42><That&#39;s only true because you have not specified the locale in the parser input. That&#39;s bad coding style and a huge design flaw in Java -- its inherent localization. Personally, I put &quot;TZ=UTC LC_ALL=C&quot; everywhere I use Java to avoid that. In addition you should avoid every localized version of an implementation unless you are directly interacting with a user and explicitly want it. Don&#39;t to ANY calculations including localizations, always use Locale.ROOT and UTC timezones unless absolutely necessary.><PeterWone
20906129><2017-06-15 18:30:00><Hi Daniel, I have run your piece of code but it is not giving output as expected. like durationAtEarlierOffset and durationAtLaterOffset both are 1 second only and also zot3 and zot4 both are null. I have set just copied and run this code on my machine. is there anything which needs to be done here. Let me know if you want to see a piece of code. Here is code <a href="http://www.tutorialspoint.com/compile_java8_online.php?PID=0Bw_CjBb95KQMUTIyLU1tQ2x3bDQ" rel="nofollow noreferrer">tutorialspoint.com/&hellip;</a> can you let me know what going on here.><MarianSpanik
20906129><2017-07-21 08:38:05><@vineeshchauhan It depends on Java&#39;s version, because this has changed in tzdata, and different versions of JDK bundle different versions of tzdata. On my own installed Java, the times are <code>1900-12-31 23:54:16</code> and <code>1900-12-31 23:54:17</code>, but that doesn&#39;t work on the site you shared, so they are using a different Java version than I.><NathanOliver
21840785><2014-10-31 01:50:27><This is incorrect. The discontinuity isn&#39;t a bug - it&#39;s just that a more recent version of TZDB has slightly different data. For example, on my machine with Java 8, if you change the code very slightly to use &quot;1927-12-31 23:54:02&quot; and  &quot;1927-12-31 23:54:03&quot; you&#39;ll still see a discontinuity - but of 358 seconds now, instead of 353. Even more recent versions of TZDB have yet another difference - see my answer for details. There&#39;s no real bug here, just a design decision around how ambiguous date/time text values are parsed.><TheGuyWithTheFace
21840785><2017-03-15 00:06:29><The real problem is that programmers don&#39;t understand that conversion between local and universal time (in either direction) is not and cannot be 100% reliable. For old timestamps the data we have on what local time was is shaky at best. For future timestamps political actions can change what universal time a given local time maps to. For current and recent past timestamps you can have the problem that the process of updating the tz database and rolling out the changes can be slower than than the implementation schedule of the laws.><SazzadHissainKhan
1783405><2014-02-01 20:43:49><@inger But it does not include the possibility to rename the new local branch (if you want to --set-upstream later on and keep naming consistency)><demonkoryu
1783405><2014-08-26 08:16:17><I think this thread is unhelpful.  Nothing seems to work, the original question seems to have been lost in many of the answers.  I have read every word, tried everything below, and have no idea how to do what the OP wants to do.><woojoo666
1783405><2016-01-13 01:41:39><Git commands are not intuitive to begin with, add the changes introduced with recent versions to the mix and you have this page...><dddJewelsbbb
1783405><2017-03-10 00:35:18><I feel like I&#39;m taking crazy pills. I&#39;m trying to checkout a branch from an <code>upstream</code>, not just <code>origin</code>, and every recommended answer doesn&#39;t do anything remotely helpful (pun-intended). <b>EDIT</b> - excuse me, the multitude of suggestions contained in the top 2 answers were useless; 3rd one (<code>git branch test origin&#47;test</code>) is what works. Glad the top 2 have 20x the number of votes...><Ren233
1783405><2017-07-10 15:50:10><Maybe you have a file named &#39;test&#39; in your work tree, see <a href="https://stackoverflow.com/a/45006389/792416">stackoverflow.com/a/45006389/792416</a> for detail.><NicholasHamilton
1783405><2017-08-04 02:42:38><Here&#39;s what worked for me in 2017.  Two steps:   1) git fetch origin &lt;branchname&gt;  2) git checkout -b &lt;branchname&gt; origin/&lt;branchname&gt;><mohitmun
1783405><2018-10-25 09:37:10><<code>git checkout --track origin&#47;test</code>><MalusJan
1783405><2019-04-16 05:17:35><tldr; The syntax is like <code>git checkout -b &lt;new-branch&gt; &lt;existing-branch&gt;</code>.><NathanOliver
1783426><2009-11-23 23:24:13><To expand on this: git doesn&#39;t allow you to work on someone else&#39;s branches. You can only work on your own. So if you want to add to someone else&#39;s branch, you need to create your own &quot;copy&quot; of that branch, which is what the above command does (well, it creates your branch and checks it out, too).><jdero
1783426><2011-11-04 22:38:53><If it&#39;s a new remote branch you may need to <code>git fetch</code> before doing this so that git is aware of <code>origin&#47;test</code>><NathanOliver
1783437><2013-10-16 15:20:02><This will create a local branch without switching to it.><KyleMit
1783437><2013-12-04 08:04:50><Though I got fatal: Ambiguous object name: &#39;origin/dev&#39; - where a branch &#39;dev&#39; on origin most definitely exists - but I&#39;d accidentally created a branch called &quot;origin/dev&quot; on my machine (in my previous stupid attempts to get this right, no doubt) ... ouch><IsmaelLuceno
1783437><2014-06-19 04:01:53><This has been giving me the error error: failed to push some refs to hint: Updates were rejected because a pushed branch tip is behind its remote hint: counterpart. Check out this branch and merge the remote changes hint: (e.g. &#39;git pull&#39;) before pushing again. hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.><SlippD.Thompson
1787014><2012-04-16 21:24:49><Unsurprising, but this version has been released in the last few years - knowing this syntax can save a lot of time since there&#39;s still a lot of old documentation and comment threads floating around that suggest the older method for doing this.><dddJewelsbbb
1787014><2012-08-28 10:30:55><&quot;modern git&quot;--for the record, (approx) what version are you referring to? Sometimes we have to work on systems running older distros.><Alice
1787014><2013-03-20 04:29:52><&quot;modern git&quot; in this context is <a href="https://raw.github.com/git/git/master/Documentation/RelNotes/1.6.6.txt" rel="nofollow noreferrer">git 1.6.6</a>><demonkoryu
1787014><2013-06-26 15:06:58><@knite: The <code>git checkout test</code> is more DWIM-my. Not only it adds <code>--track</code> option, but when checking out nonexistent branch it notices that there exist remote-tracking branch of the same name and automagically creates local branch for you that you can checkout (you cannot checkout remote-tracking branch, as it is controlled by outside remote repository). HTH><dddJewelsbbb
1787014><2013-07-20 06:17:30><I had pushed a branch to my repo and then modified the README via github. I then wanted to update my local copy. Using <code>git checkout mybranch</code> lead to git suggesting me to use <code>git pull</code> because mybranch already existed. Thanks for leading me towards the solution!><SachinVerma
1787014><2013-09-18 08:55:34><I&#39;m on git version 1.7.10.2 (Apple Git-33) and <code>git checkout test</code> didn&#39;t work for me. Had to fall back to the accepted answer. I probably have some strange config interfering somewhere.><woojoo666
1787014><2013-10-16 17:03:54><See tcaswell&#39;s answer below if the remote of interest is not named <code>origin</code>><matec
1787014><2013-10-18 08:40:10><@aidan If you get a response like <code>error: pathspec &#39;branch_name&#39; did not match any file(s) known to git.</code> then you should do a git fetch first.><screwnut
1787014><2013-12-04 07:59:44><Using git version 1.8.3.msysgit.0 and this doesn&#39;t work for me -  did not match any file(s) known to git - I&#39;ve done many git fetches><CodeGeek
1787014><2014-01-08 23:46:34><@PandaWood Didn&#39;t work for me either, using 1.8.3.4 (Apple Git-47)><SimonHrabec
1787014><2014-01-09 10:03:16><@PandaWood @Adri&#225;nSalgado In your repo, open <code>.git&#47;config</code> and check that the refspec for fetching from your remote (e.g. origin) doesn&#39;t only fetch from a specific branch. For example, this is bad: <code>fetch = +refs&#47;heads&#47;master:refs&#47;remotes&#47;origin&#47;master</code> because it only fetches master. It should look like <code>fetch = +refs&#47;heads&#47;*:refs&#47;remotes&#47;origin&#47;*</code>. Then use <code>git fetch origin</code> after that. If successful, the branch you&#39;re interested in should appear in the fetch output, and it should also appear in the output of <code>git branch -a</code> as a remote branch.><IndianKing
13770793><2015-02-02 13:51:14><I&#39;ll add a note if you have a separate branch locally: Make sure you have associated this with the remote repo using &#39;git remote add origin [the_path_to_your_repo/repo_name.git]&#39; . Then use &#39;git fetch origin&#39; where &#39;origin&#39; means the origin repository you have made the association with.><mp31415
13770793><2016-05-19 21:41:18><<code>git checkout -b newbranch</code> also works great for 1-step create and checkout a new branch based on the current branch.><IndianKing
13770793><2016-05-26 20:51:12><I think this is the most up-to-date (it keeps $@#!ing changing!).   Git 2.5.5 I found the only way to actually <i>see</i> the remote branches was <code>git ls-remote</code> and the only way to actually use one is <code>git checkout -b [branch] --track [remote&#47;branch]</code>...and that&#39;s <i>after</i> <code>git pull [remote] [branch]</code> worked.  I.e., it actually pulled the whole branch, but still wouldn&#39;t list it.><knickum
13770793><2018-01-16 20:48:42><and when this answer doesn&#39;t work either, see <a href="https://stackoverflow.com/a/19442557/365237">this one</a>.><mohitmun
13770793><2018-12-29 10:56:29><just to add, if you <code>git fetch other_remote only_branch</code>, you still get the <code>fatal</code> error. You have to <code>git fetch other_remote</code> without the branch name. Weird design.><Mysticial
14436240><2014-12-17 00:56:14><git clone &lt;either ssh url /http url&gt; - works perfectly for me><PrajwalDhatwalia
14436240><2015-01-08 18:45:22><Yes you are correct. Thanks for your information, I will update it very soon @warvariuc><CodeGeek
14436240><2016-09-28 00:47:26><If the remote has no <code>master</code>, this is not going to work.><Veve
19442557><2014-09-11 16:45:56><This worked for me when neither git fetch origin or git remote update created local branches. I&#39;m not sure why.><demonkoryu
35535226><2016-02-21 19:03:56><Do you realize that this is an extract of this <a href="http://stackoverflow.com/a/13770793/2307070">answer</a>><dddJewelsbbb
35535226><2016-02-21 19:34:02><Looking at it now, they do overlap. Only mine is succinct and tells you what to do rather than tell a story.  I assume it can be more useful therefore, especially for nowadays git versions. You can downvote it if you think it is a bad answer.><FilipBartuzi
35535226><2019-04-03 16:07:28><git fetch is the safe option. Try fetch before using pull. Both download remote content, but while fetch does not change local state, pull will immediately change the local state.><SachinVerma
44049759><2018-01-24 02:16:36><I dont understand -b. If you can do &quot;git checkout master&quot; why cant you do &quot;git checkout origin/test&quot;?><DanielFischer
44049759><2018-01-24 09:13:09><-b for new branch which is from origin/master><LewisKelsey
45006389><2018-11-27 03:05:43><thanks, kept trying to figure out why git wasn&#39;t doing anything.><GManNickG
46057289><2018-04-25 13:13:02><@DmitriZaitsev yes, it will work, if the remote branch is there, and you do fetch, you will get the branch locally... git fetch &amp;&amp; git checkout test..So this works, unless there is no remote branch, but the question saying there is already a remote branch there...><PrajwalDhatwalia
46057289><2018-04-25 20:51:36><The way I see the question, <code>test</code> looks like a new branch, so it is not likely to be present locally. Otherwise you could pull it easier with single <code>git pull</code> command.><Ren233
46057289><2018-04-25 21:36:31><@DmitriZaitsev, yes, that&#39;s why I said git fetch, that check for remote branches which just created, pull can bring other unwanted stuffs in, but fetch makes all branches available if you already have the repo locally...><naveejr
46057289><2018-04-25 22:38:40><Wouldn&#39;t <code>fetch</code> without <code>pull</code> leave changes in the fetched copy but not in the local branch, leading to your local branch not being up-to-date?><FilipBartuzi
46078150><2017-11-20 11:19:36><This answer would be a lot more useful if you explain why you are using it this way. i.e. why someone should use &#39;--track&#39; and so on...><SachinVerma
48137430><2018-01-30 21:52:37><@hallski answered not working 2.15.1 versions but i have reduce .git file weigth clone only 1 branch and filter history with --depth flag. for example <code>$ git clone -b release --single-branch --depth 5 https:&#47;&#47;github.com&#47;user&#47;repo.git</code> Wron&#39;t information <code>$ git remote show origin</code>this does not listed all remote branch with single branch cloned repositories.><mohitmun
51256335><2018-07-27 23:41:04><thanks.  I was wondering if I had to use the full path (<i>remotes/origin/feature/branch</i>) that I saw in <code>git</code> when calling <code>git branch -a</code> command, but I wasn&#39;t for sure, so I just used <code>git checkout -b apps&#47;FEATURE&#47;branch origin&#47;apps&#47;FEATURE&#47;branch</code> and it appeared to work. Message: <code>Branch &#39;apps&#47;FEATURE&#47;branch&#39; set up to track remote branch &#39;apps&#47;FEATURE&#47;epicBranch&#39; from &#39;origin&#39;. Switched to a new branch &#39;apps&#47;FEATURE&#47;branch&#39;</code>><Mysticial
53188417><2018-11-07 20:12:59><In many unix shells the <code>#</code> character is used for comments so anything after the <code>#</code> will be ignored. This is a shell thing and not something specific to git. Using quotes of a backslash before the <code>#</code> should be enough.><TheGuyWithTheFace
56289046><2019-06-05 00:36:48><Tried <code>git branch -l</code> and no remote branch was shown.><jdero
56289046><2019-06-08 00:17:21><use <code>git pull --all</code> or <code>git fetch --all</code>><knickum
56289046><2019-06-08 09:13:10><Yes, and after that, <code>git branch -l</code>  still shows only <i>local</i> branches. It seems to be working exactly as <code>git branch</code> without <code>-l</code>, so what is the reason for <code>-l</code>?><PhilMiller
56289046><2019-06-08 09:15:16><Also your answer does not answer the question - <code>master</code> is not a remote branch.><doug65536
56289046><2019-06-09 10:42:23><<code>-l</code> flag for list. You can use <code>--list</code> too><Unheilig
58026451><2020-03-19 21:14:06><This solved it for me since I cloned a single branch><Unheilig
59261426><2020-01-16 18:28:24><git checkout -b &quot;Branch_name&quot;   [ B means Create local branch]><ChristopheRoussy
40480><2011-07-30 15:23:05><I believe that much of the confusion on this issue has to do with the fact that different people have different definitions of the term &quot;reference&quot;.  People coming from a C++ background assume that &quot;reference&quot; must mean what it meant in C++, people from a C background assume &quot;reference&quot; must be the same as &quot;pointer&quot; in their language, and so on.  Whether it&#39;s correct to say that Java passes by reference really depends on what&#39;s meant by &quot;reference&quot;.><CodeGeek
40480><2012-10-18 17:25:35><There is a very good answer by pgras in this thread: <a href="http://stackoverflow.com/questions/589919/does-java-pass-by-reference?lq=1" title="does java pass by reference">stackoverflow.com/questions/589919/&hellip;</a>><mohitmun
40480><2013-01-16 01:58:19><Of course Java passes all the objects by reference! For the blog mentioned in the question, the foo(Dog d) is just creating a new object and making d pointing to the new address (d originally referred to the object which is also referred by aDog -- This is so-called &quot;pass-by-reference&quot;). It is changing the pointer, the original object is still in its place without any change. The point is there is no copy of the value of object at all, it only copies the reference value.><ChristopheRoussy
40480><2013-01-16 02:24:53><And you cannot say it is &quot;pass-by-value&quot; just because the method doesn&#39;t change the pass-in value, you must check is any VALUE COPY there.><Drt
40480><2013-11-13 04:58:58><@Gravity:  Can you go and put your comment on a HUGE billboard or something?  That&#39;s the whole issue in a nutshell.  And it shows that this whole thing is semantics.  If we don&#39;t agree on the base definition of a reference, then we won&#39;t agree on the answer to this question :)><MalusJan
40480><2014-03-27 21:54:30><I think the confusion is &quot;pass by reference&quot; versus &quot;reference semantics&quot;. Java is pass-by-value with reference semantics.><SimonHrabec
40480><2014-08-11 07:47:45><I usually use the term pass-by-pointer. Sure, the pointer is passed by value, but, after all, the pointer isn&#39;t what anyone cares about. This makes it clear that the pointer (not the object) is being copied, that mutating the pointed object will be visible to the caller, and that changing what the copy is pointing at will not be.><naveejr
40480><2014-09-23 11:07:30><a lot of the answers here are wrong or misleading. we should just forget the semantics and demonstrate the properties of a particular language with examples.><AgrimPathak
40499><2011-02-03 09:23:04><Since the values of the primitives are immutable (like String), the difference between the two cases is not really relevant.><Unheilig
40499><2011-07-31 12:50:55><Exactly.  For all you can tell via observable JVM behavior, primitives could be being passed by reference and could live on the heap.  They don&#39;t, but that&#39;s not actually observable in any way.><PrajwalDhatwalia
40499><2011-08-22 19:26:09><primitives are immutable? is that new in Java 7?><AdamFreeman
40499><2013-04-17 00:33:33><This article sums it up very well: <a href="http://academic.regis.edu/dbahr/GeneralPages/IntroToProgramming/JavaPassByValue.htm" rel="nofollow noreferrer">academic.regis.edu/dbahr/GeneralPages/IntroToProgramming/&hellip;</a>><SlippD.Thompson
40499><2015-07-31 00:29:07><@CarlosHeuberger, &quot;primitives are immutable?&quot;. The point is that you can <i>pretend</i> that &#39;primitives&#39; are actually (mutable) <i>references</i> to immutable objects.><mohitmun
40499><2015-08-13 02:44:10><Pointers are immutable, primitives in general are mutable. String is also not a primitive, it is an object. Moreover, the underlying structure of the String is a mutable array. The only immutable thing about it is the length, that being the inherent nature of arrays.><PeterWone
40499><2017-08-02 23:54:08><This is another answer pointing out the largely semantic nature of the argument. The definition of reference provided in this answer would make Java &quot;pass-by-reference.&quot; The author essentially admits as much in the last paragraph by stating that it is &quot;indistinguishable in practice&quot; from &quot;pass-by-reference.&quot; I doubt OP is asking because of a desire to understand the Java implementation but rather to understand how to correctly use Java. If it were indistinguishable in practice, then there would be no point in caring and even thinking about it would be a waste of time.><PhilMiller
40501><2011-07-25 03:13:09><But the thing that keeps getting repeated &quot;you can&#39;t change the value of objects passed in arguments&quot; is clearly false. You may not be able to make them refer to a different object, but you can change their contents by calling their methods. IMO this means you lose all the benefits of references, and gain no additional guarantees.><SlippD.Thompson
40501><2011-08-01 22:19:38><I never said &quot;you can&#39;t change the value of objects passed in arguments&quot;. I will say &quot;You can&#39;t change the value of the object reference passed in as a method argument&quot;, which is a true statement about the Java language. Obviously you can change the state of the object (as long as it&#39;s not immutable).><NicholasHamilton
40507><2015-02-11 13:36:27><I would rather say that bar is a copy of the reference baz (or baz alias), that points initially to the same object.><AndonM.Coleman
40507><2018-12-11 05:53:15><isn&#39;t there a slight different between String class and all other classes ?><mp31415
40514><2020-04-28 21:50:30><this is the best answer. Short and correct.><onmyway133
40523><2008-09-08 22:58:53><Isn&#39;t it slightly confusing the issue with internal details? There&#39;s no conceptual difference between &#39;passing a reference&#39; and &#39;passing the value of a reference&#39;, assuming that you mean &#39;the value of the internal pointer to the object&#39;.><Ren233
40523><2008-09-11 14:55:48><But there is a subtle difference. Look at the first example. If it was purely pass by reference, aDog.name would be &quot;Fifi&quot;. It isn&#39;t - the reference you are getting is a value reference that if overwritten will be restored when exiting the function.><matec
40523><2008-11-27 01:50:54><beware however that integral types are passed by value and not by reference. Also immutable types are passed by reference but &quot;kinda&quot; works as passing them by value: the most common example would be String. This allow for internal space optimization of immutable objects.><FilipBartuzi
40523><2009-02-13 07:02:20><@Lorenzo: No, in Java everything is passed by value. Primitives are passed by value, and object references are passed by value. The objects themselves are never passed to a method, but the objects are always in the heap and only a reference to the object is passed to the method.><LutzPrechelt
40523><2010-10-21 00:38:55><My attempt at a good way to visualize object passing: Imagine a balloon. Calling a fxn is like tieing a second string to the balloon and handing the line to the fxn. parameter = new Balloon() will cut that string and create a new balloon (but this has no effect on the original balloon). parameter.pop() will still pop it though because it follows the string to the same, original balloon. Java is pass by value, but the value passed is not deep, it is at the highest level, i.e. a primitive or a pointer. Don&#39;t confuse that with a deep pass-by-value where the object is entirely cloned and passed.><PhilMiller
40523><2011-02-03 05:10:46><Your point might be clearer if the name passed to the constructor was different than the name used in the <code>foo</code> method.><naveejr
40523><2011-02-09 17:46:44><What&#39;s confusing is that object references are actually pointers. In the beginning SUN called them pointers. Then marketing informed that &quot;pointer&quot; was a bad word. But you still see the &quot;correct&quot; nomenclature in NullPointerException.><SimonHrabec
40523><2011-06-04 06:56:07><BlueRaja, not anything that would hold up in court, that is from my recollection which may be flawed, but some evidence can be found right here: <a href="http://java.sun.com/docs/books/jls/third_edition/html/typesValues.html#4.3.1" rel="nofollow noreferrer">java.sun.com/docs/books/jls/third_edition/html/&hellip;</a>><RenatoOliveira
40523><2011-06-22 04:03:02><I like to think of pass-by-value (As pertains to parameters of functions) as meaning that every function makes a local copy of the objects passed. In general, relying on a satellite method do it&#39;s job on some larger state seems more nebulous than explicitly defining the state passed and returned.><DanielFischer
40523><2011-08-02 17:58:33><Isn&#39;t saying &quot;object references are passed by value&quot; just what people mean when they say &quot;pass by reference&quot;? I mean you wouldn&#39;t call <code>void foo(int&amp; a) { a = 5; }</code> &quot;pass by value&quot; in C++, but it&#39;s exactly the same as Java.><NicholasHamilton
40523><2011-08-12 09:31:43><Java is pass-by-copy-of-the-variable-value. There is no difference in passing primitives or Objects! The only difference is that the primitive variable contains its value directly while an object variable contains a bit value that helps the JVM to find the Object in the Heap. Also, in both cases these reference values are copied before being given to the method. Finally, please don&#39;t mention p....... while talking about Java, not even to say that it&#39;s incorrect to do that!><SachinVerma
40630><2015-02-11 13:58:48><I think it is very close to my understanding of Java object and its reference. Object in Java is passed to a method by a reference copy (or alias).><chaws
42392><2017-01-25 18:09:26><I  find your second-to-last sentence very misleading.  It&#39;s not true that &quot;all objects in Java are references&quot;.  It&#39;s only the <i>references</i> to those objects that are references.><Drt
49857><2016-08-07 16:46:02><&quot;pass by copy&quot; is what pass-by-value <b>means</b>.><DanielFischer
49857><2020-02-25 03:28:30><@T.J.Crowder. &quot;Pass by copy&quot; may be a more appropriate way of expressing the same concept for Java purposes: because semantically it makes it very difficult to shoehorn in an idea akin to passing by reference, which is what you want in Java.><Drt
49857><2020-02-25 15:51:02><@mikerodent - Sorry, I didn&#39;t follow that. :-) &quot;Pass-by-value&quot; and &quot;pass-by-reference&quot; are the correct terms of art for these concepts. We should use them (providing their definitions when people need them) rather than making up new ones. Above I said &quot;pass by copy&quot; is what &quot;pass-by-value&quot; means, but actually, it&#39;s not clear what &quot;pass by copy&quot; means -- a copy of what? The value? (E.g., object reference.) The object itself? So I stick to the terms of art. :-)><Alice
73021><2009-04-03 01:52:18><This is why the common refrain &quot;Java doesn&#39;t have pointers&quot; is so misleading.><Sandeep
85711><2014-07-02 11:59:12><+1 I would also add <code>Dog **objPtrPtr</code> to the C++ example, that way we can modify what the pointer &quot;points to&quot;.><PhilMiller
85711><2018-11-06 17:11:44><But this doesn&#39;t answer for the given question in Java. As the matter of fact, everything in Java&#39;s method is Pass By Value, nothing more.><naveejr
85711><2019-02-21 20:58:41><This exemple just prove that java use the very equivalent of pointer in C no ? Where pass by value in C are basically read only ? At the end, this whole thread is incomprehensible><LutzPrechelt
436969><2013-09-22 22:09:21><@Gevorg - Then what is a &quot;NullPointerException&quot;?><Atul
436969><2013-09-23 22:08:10><@Hot: A unfortunately named exception from before Java settled on a clear terminology. The semantically equivalent exception in c# is called NullReferenceException.><DanielFischer
436969><2013-09-23 23:46:14><It&#39;s always seemed to me that the use of &quot;reference&quot; in Java terminology is an affectation that hinders understanding.><DanielFischer
436969><2015-12-30 05:36:08><I learnt to call these so called &quot;pointers to objects&quot; as an &quot;handle to the object&quot;. This reduced ambiguity.><FilipBartuzi
707416><2013-12-18 05:24:26><+1 for the swap test -- probably the most straightforward and relatable way to distinguish between <i>passing by reference</i> and <i>passing a reference by value</i>.  Iff you can easily write a function <code>swap(a, b)</code> that (1) swaps <code>a</code> and <code>b</code> from the caller&#39;s POV, (2) is type-agnostic to the extent that static typing allows (meaning using it with another type requires nothing more than changing the declared types of <code>a</code> and <code>b</code>), and (3) doesn&#39;t require the caller to explicitly pass a pointer or name, then the language supports passing by reference.><CodeGeek
707416><2016-11-24 21:16:43><&quot;..for primitive datatypes you will work with an copy and for objects you will work with an copy of the reference to the objects&quot; - perfectly written!><LutzPrechelt
1964260><2010-09-08 06:02:17><+1. What C <i>does</i> support, is <i>treating</i> references (which C calls <i>pointers</i>) <i>as</i> first-class values, and <i>then</i> passing them <i>by value</i>.><PrajwalDhatwalia
1964260><2011-02-03 09:27:19><Yeah, in C you can create pointers not only on objects, but on arbitrary variables - so you can easily simulate &quot;call-by-reference&quot; of any variable. In Java this works only for variables which have a surrounding object, which you can give.><Alice
3439923><2010-08-13 05:27:49><The static is throwing it off.  public class Main {     public static void main(String[] args) {    	 Main m = new Main();        m.aaa();     }          public void aaa()    	 {    		 String temp = &quot;Vinay&quot;;           print(temp);           System.err.println(temp);    	 }          private void print(String temp) {         temp = null;     } }  the above code does not NPE.><jdero
3439923><2010-08-13 14:27:20><Didn&#39;t got what you are trying to say..?><TomasAndrle
3439923><2013-08-02 18:04:53><Doesn&#39;t answer the question. The OP is asking for an explanation, not just a proof.><AndonM.Coleman
3663123><2010-09-08 22:16:37><I like this distinction in nomenclature.  It&#39;s unfortunate that Java supports call by sharing for objects, but not call by value (as does C++).  Java supports call by value only for primitive data types and not composite data types.><CodeGeek
3663123><2010-10-26 04:03:18><I really don&#39;t think we needed an extra term - it&#39;s simply pass-by-value for a specific type of value. Would adding &quot;call by primitive&quot; add any clarification?><naveejr
3663123><2011-09-16 08:29:43><<a href="http://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing" rel="nofollow noreferrer">Call by Sharing</a>><LewisKelsey
3663123><2016-01-08 08:14:02><So I can pass-by-reference by sharing some global context object, or even passing a context object that contains other references? I still pass-by-value, but at least I have access to references I <i>can</i> modify and make them point to something else.><PeterCordes
3663123><2019-05-23 05:31:26><There is already a term for how Java passes parameters. It&#39;s called &quot;pass-by-value&quot;. Introducing another term just adds to the confusion.><onmyway133
3663123><2019-05-23 08:03:21><@Sanjeev: call-by-object-sharing is a special case of pass-by-value. However, a lot of people argue vehemently that Java (and similar languages like Python, Ruby, ECMAScript, Smalltalk) are pass-by-reference. I would prefer to call it pass-by-value, too, but call-by-object-sharing seems to be a reasonable term that even people who argue that it is <i>not</i> pass-by-value can agree to.><mp31415
6462053><2016-06-07 11:59:03><&#39;Pass by value&#39; is a standard term in computer science and has been since the 1950s. No point in complaining about it now.><knickum
7034719><2012-02-25 11:29:07><Do you mean pointers?.. If I get it correctly, in <code>public void foo(Car car){ ... }</code>, <code>car</code> is local to <code>foo</code> and it contains the heap location of the Object? So if I change <code>car</code>&#39;s value by <code>car = new Car()</code>, it will point to different Object on the heap? and if I change <code>car</code>&#39;s property valu by <code>car.Color = &quot;Red&quot;</code>, the Object in the heap pointed by <code>car</code> will be modified. Also, it is the same in C#? Please reply! Thanks!><MarianSpanik
11764499><2012-09-01 15:58:53><Also remembering that <code>String</code>S are immutable in Java.><MarianSpanik
11764499><2013-05-25 12:12:43><I find it helpful to think of class-type variables as holding &quot;object IDs&quot;.  Java&#39;s default string representation of objects works well with such a description.  If one sets <code>Foo</code> to &quot;Car #1234&quot;, and copies <code>Foo</code> to <code>Bar</code>, then both <code>Foo</code> and <code>Bar</code> will hold &quot;Car #1234&quot;.  Saying <code>Foo.SetColor(Colors.Blue)</code> will paint &quot;Car #1234&quot; blue.  The other description I use for such storage locations is &quot;promiscuous object references&quot;, since code which passes such a reference to an object has no way of controlling how the recipient might share it.><mp31415
11764499><2018-07-16 08:22:58><Variables don&#39;t enter into the way Java works. Actual arguments are from evaluating expressions.><woojoo666
12429953><2013-06-07 16:46:12><+1 Nice stuff. good diagrams. I also found a nice succinct page here <a href="http://www.adp-gmbh.ch/php/pass_by_reference.html" rel="nofollow noreferrer">adp-gmbh.ch/php/pass_by_reference.html</a> OK I admit it is written in PHP, but it is the priciple of understanding the difference that I think is important (and how to manipulate that difference to your needs).><SachinVerma
12429953><2013-07-16 03:08:28><@Eng.Fouad It&#39;s a nice explanation but if <code>a</code> points to the same object as <code>f</code> (and never gets its own copy of the object <code>f</code> points to), any changes to the object made using <code>a</code> should modify <code>f</code> aswell (since they are both working with the same object), so at some point <code>a</code> must get its own <i>copy</i> of the object <code>f</code> points to.><doug65536
12429953><2013-12-01 21:02:34><@MrD when &#39;a&#39; points to the same object &#39;f&#39; also points to, then any change made to that object via &#39;a&#39; is also observable via &#39;f&#39;, BUT IT DID NOT CHANGE &#39;f&#39;. &#39;f&#39; still points to the same object. You can totally change the object, but you can never change what &#39;f&#39; points to. This is the fundamental issue that for some reason some people just can&#39;t comprehend.><mohitmun
12429953><2014-11-18 19:34:58><@MikeBraun ...what? Now you&#39;ve confused me :S. Isn&#39;t what you just wrote contrary to what 6. and 7. shows?><Drt
12429953><2014-11-19 03:17:10><@EvilWashingMachine no, why? You never see modifyReference letting &quot;f&quot; point to a completely different instance, do you? There&#39;s only one object in 6 and 7. Locally new references to tgat object can be created (&quot;c&quot; in the example) and the content of that one object can be changed (as happens in 7), but nothing within the method has the power to re-assign &quot;f&quot; to a second object.><TheGuyWithTheFace
12429953><2014-11-20 22:18:52><@MikeBraun oh I see, I misunderstood when you said &quot; BUT IT DID NOT CHANGE &#39;f&#39;&quot;. I thought you also meant the object &#39;f&#39; points to does not change.><Ren233
12429953><2015-02-11 13:19:14><If I say that object in Java is passed to a method by copy of the reference, that would probably solve the whole discussion. Nice diagrams above  would fit-in and support that statement.><IndianKing
12429953><2015-08-08 23:21:12><The setAttribute method need to be accessed by Java reflection.  <a href="http://tutorials.jenkov.com/java-reflection/private-fields-and-methods.html" rel="nofollow noreferrer">tutorials.jenkov.com/java-reflection/&hellip;</a>><KyleMit
12429953><2016-05-07 04:36:52><By this definition, all languages are pass by value and pass by reference does not exist. Pass by reference means you can edit the caller&#39;s instance of what you received. Whether this is done through a pointer or using C++&#39;s convenient syntax is irrelevant.><knickum
14105447><2013-08-02 18:05:23><There is no such thing as a &#39;constant referenece&#39; in Java unless the programmer specifies &#39;finally&#39;.><PeterCordes
14105447><2013-09-09 21:06:23><What I meant by constant reference is, there is no way to change the reference itself by saying new MyClass() in a function. If I put it correctly, there object references are passed by value which means a copy of the reference is passed so you can change the data where that reference refers to but you can not change it with new operator and allocate a new object.><Ren233
14105447><2014-09-25 08:41:47><So fix your answer. If it was a constant you couldn&#39;t reassign it inside the called method, and you can, unless you specify <code>final.</code>><woojoo666
16880062><2017-09-17 18:09:47><&#39;Pass its inner value&#39; is meaningless.><MalusJan
16880062><2017-09-18 00:41:46><@EJP thanks for the note, excuse my bad English from 2013, I&#39;ve edited the whole thing, if you see a better wording, you may suggest or edit><LewisKelsey
17303467><2018-07-16 08:28:11><With pass-by-value, as Java is, &quot;caller&#39;s variable&quot; doesn&#39;t make sense. The actual argument is the evaluation of an expression; a variable need not be involved at all.><Unheilig
17563873><2017-06-11 07:24:59><This is the clearest, simplest way to see that Java passes by value. The value of <code>obj</code> (<code>null</code>) was passed to <code>init</code>, not a reference to <code>obj</code>.><PeterWone
18287583><2016-02-27 19:06:27><in java we can do: <code>someArray = InitArray(someArray)</code> assuming we have this:  <code>static int [] InitArray( int[] arr){ ... return ...}</code>><AgrimPathak
18287583><2016-02-28 00:28:14><You are correct. That&#39;s a possible alternative for a simple pass-by-reference. But pass-by-reference can do more powerful things. e.g. it could assign multiple values: e.g. <code>int[] array1; int[] array2; InnitArrays(out array1, out array2);</code> assuming that you create a method <code>static void InitArray(out int[] a1, out int[] a2){...}</code>><mohitmun
18740042><2013-11-01 14:53:33><However, you should have followed up with a more complex example where a function appears to alter a variable to whose address it has a reference.><AdamFreeman
18740042><2013-12-18 12:48:00><People are not &quot;dancing around the real issue&quot; of stack vs heap, because that&#39;s <i>not</i> the real issue.  It&#39;s an implementation detail at best, and downright wrong at worst.  (It&#39;s quite possible for objects to live on the stack; google &quot;escape analysis&quot;.  And a huge number of objects contain primitives that probably <i>don&#39;t</i> live on the stack.)  The real issue is <i>exactly</i> the difference between reference types and value types -- in particular, that the value of a reference-type variable is a reference, not the object it refers to.><MarianSpanik
19970416><2017-11-29 04:33:54><This is very misleading.  You certainly <i>can</i> change the value of an argument from within a method.><PrajwalDhatwalia
20125921><2015-10-22 14:42:28><In java when you say &quot;In java everything is reference&quot; you mean all <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html" rel="nofollow noreferrer">objects</a> are passed by reference.  <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html" rel="nofollow noreferrer">Primitive data types</a> are not passed by reference.><LewisKelsey
20125921><2016-12-20 09:29:33><I am able to print swapped value in main method. in trickey method , add the following statement <code>arg1.x = 1; 		arg1.y = 1; 		arg2.x = 2; 		arg2.y = 2;</code> so, as arg1 now holding of pnt2 refrence and arg2 holding now pnt1 reference, so, its printing <code>X1: 2 Y1: 2 X2: 1 Y2: 1</code>><doug65536
20566453><2014-01-11 01:02:04><In a language with pass-by-reference, the thing which is passed (the reference) is ephemeral; the recipient is not &quot;supposed&quot; to copy it.  In Java, passing an array is passed is an &quot;object identifier&quot;--equivalent to a slip of paper which says &quot;Object #24601&quot;, when the 24601st object constructed was an array.  The recipient can copy &quot;Object #24601&quot; anywhere it wants, and anyone with a slip of paper saying &quot;Object #24601&quot; can do anything it wants with any of the array elements.  The pattern of bits that is passed wouldn&#39;t actually say &quot;Object #24601&quot;, of course, but...><SazzadHissainKhan
20566453><2014-01-11 01:04:46><...the key point is that the recipient of the object-id that identifies the array can store that object-id wherever it wants and give it to whomever it wants, and any recipient would be able to access or modify the array whenever it wants.  By contrast, if an array were passed by reference in a language like Pascal which supports such things, the called method could do whatever it wanted with the array, but could not store the reference in such a way as to allow code to modify the array after it returned.><matec
20566453><2014-01-11 06:48:25><Indeed, in Pascal you <i>can</i> get the address of every variable, be it passed-by-reference or locally copied, <code>addr</code> does it untyped,<code>@</code> does it with type, and you can modify the referenced variable later (except locally copied ones). But I don&#39;t see the point why you would do that. That slip of paper in your example (Object #24601) is a reference,its purpose is to help find the array in memory, it does not contain any array data in itself. If you restart your program, the same array might get a different object-id even if its content will be the same as it has been in the previous run.><mohitmun
20566453><2014-01-11 06:52:31><I&#39;d thought the &quot;@&quot; operator was not part of standard Pascal, but was implemented as a common extension.  Is it part of the standard?  My point was that in a language with true pass-by-ref, and no ability to construct a non-ephemeral pointer to an ephemeral object, code which holds the only reference to an array, anywhere in the universe, before passing the array by reference can know that unless the recipient &quot;cheats&quot; it will still hold the only reference afterward.  The only safe way to accomplish that in Java would be to construct a temporary object...><IsmaelLuceno
20566453><2014-01-11 06:54:39><...which encapsulates an <code>AtomicReference</code> and neither exposes the reference nor its target, but instead includes methods to do things to the target; once the code to which the object was passed returns, the <code>AtomicReference</code> [to which its creator kept a direct reference] should be invalidated and abandoned.  That would provide the proper semantics, but it would be slow and icky.><MalusJan
26028582><2016-07-08 23:26:49><Java by default is said to be pass by reference. usually when a mutable object is passed to some methods then any changes done with that object reference will be reflected to the other parts too using same object reference. But in case of immutable object, if reference is reassigned to some other objects, then it will not be reflected to the other parts, entirely new objects will be created.><doug65536
26028582><2017-06-11 07:27:00><@ShailendraSingh Java never passes by reference, period. See Gaurav&#39;s answer for a clear proof of this.><SimonHrabec
26028582><2017-10-24 07:04:38><&quot;pass-by-copy-of-the-variable-value&quot; is slightly misleading. An actual argument is a value, which is the result of evaluating an expression. There need be no variable in the expression.><knickum
26028582><2019-06-13 03:25:33><There is already a term for this behaviur: pass-by-value. There is no need to introduce new terminology. Java is pass-by-value.><LutzPrechelt
27608651><2015-01-25 09:30:21><You can only define one class per file.  This is not including nested and inner classes.  Considering this will be something a new programmer will be reading, you should explain this to the user; allowing them to duplicate the code on their machine.><CodeGeek
27608651><2015-03-19 21:53:06><@mrres1 Not entirely correct. You can define only one <i>public</i> top-level class/interface per file. Supporting several classes per file is a remnant from the first Java version, which didn&#39;t have nested classes, but it is still supported, though often frowned upon.><Mysticial
28750315><2017-01-18 19:38:31><This actually doesn&#39;t explain anything in regards to potential by ref/by val property of Java.><SachinVerma
29133165><2017-03-30 13:41:44><I think you nailed it by saying <code>you can&#39;t change the reference from the object itself</code>><RenatoOliveira
33885194><2015-12-11 06:44:08><Please provide a definitive reference for this; i.e. a specific reference to a specific section of an official C++ specification.  (I suspect that this is how you would describe the &gt;&gt;representations&lt;&lt; in C++ if you were simulating the behavior of Java parameter using C++ features.  But that is missing the point.  What we are talking about here is language models, and it is well know that Java and C++&#39;s respective language models are (very) different.)><MarianSpanik
37190132><2016-06-07 12:05:08><Java has not redefined those terms. Nobody has. It has merely avoided the C term &#39;pointer&#39;.><Alice
37190132><2016-09-01 05:05:00><Those terms existed long before Java or C. Pointer was only ever a method for implementing one of them. If you accept Java&#39;s definition for them, then they become meaningless because by that definition, every language ever created is only Pass by Value.><Mysticial
37669835><2016-06-15 16:14:00><Is there an issue in your c++ version where your risking a segfault when <code>Foo(99)</code> goes out of scope but you reference it in your main method?><rahs
38550131><2017-01-18 19:40:26><So it&#39;s byRef in regards to objects and byVal in regards to primitives?><SazzadHissainKhan
38550131><2017-01-26 07:28:13><@mox please read: Objects are not passed by reference, this is a ledgend: String a=new String(&quot;unchanged&quot;);><NathanOliver
38550131><2017-01-26 07:35:22><public void changeit(String changeit){changit = &quot;changed&quot;;}  changeIt(a); assert(a.equals(&quot;unchanged&quot;));><NicholasHamilton
38550131><2017-08-02 23:07:10><This is yet another great example of the fallacy of the &quot;it is not pass by reference&quot; semantics argument. This answer says right in the bold, first sentence: &quot;only references are passed.&quot; Either a reference is passed, or a reference is not passed. You just said yourself that a reference is passed. By saying &quot;it is not passed by reference since <i>a reference is passed</i> but...&quot; you are trying to make a point by mangling English.><GManNickG
39767073><2017-08-02 23:25:39><You might want to clarify your last sentence. My first reaction to &quot;passing the values only and not pointers...&quot; is that your Java implementation probably does <i>exactly that</i>, passes a pointer. The fact that you cannot dereference that pointer seems irrelevant.><knickum
43113746><2019-08-06 19:32:43><If you use a reference-type parameter to modify its referenced object then the caller&#39;s referenced object has been changed, it&#39;s pass by reference :-)><knickum
43113746><2020-04-10 23:44:56><@Stephane, in Java you&#39;re not passing the referenced object, you&#39;re passing only the reference and since a copy of the reference is being passed, it&#39;s being Passed-by-Value. If you were able to make a persistent change to the reference itself by setting it to null or assigning a different object to it, that would make it pass-by-reference, but we cannot do that in Java. Please note that Java&#39;s use of the word reference (many other languages call this a pointer) is different from it&#39;s usage in &quot;pass-by-reference&quot;.><IsmaelLuceno
46026822><2017-10-16 23:18:26><First you said  - &quot;Java is pass by value&quot; and then you said  - &quot;[...] otherwise, the change is reflected as the modifications are only made on a &quot;reference&quot; of the object&quot;  = Java is passed by reference><Veve
50391764><2019-05-03 20:18:06><Describing java as &quot;pass-by-value&quot; is highly misleading.  For non-primitive types Java uses &quot;pass by value of the reference&quot;.  &quot;Pass by value&quot; implies the value is copied when passed to a method.  It is not, the reference is copied.><IsmaelLuceno
51522896><2018-08-26 05:08:34><I&#39;m not sure it&#39;s technically correct to mention that copies are made for primitive types. Primitive types are immutable which is why they cannot be modified inside a method they are passed to.  The difference is negligible for things like numbers, but there is an important difference for potentially large strings.><KyleMit
51522896><2018-10-03 12:40:21><This answer is completely incorrect and only creates confusion. Java is a pure pass-by-value language. What confuses you is that the value can be a pointer to an object. Pass-by-reference means one would be able to change the identity of an object at the caller&#39;s side. E.g. assigning a new object to a method parameter would also affect the pointer that was passed in the code that called the method.><demonkoryu
51522896><2018-12-28 02:49:38><@Dennis Strings are not primitives, they&#39;re objects.><onmyway133
51522896><2019-01-23 08:01:56><It&#39;s not about what&#39;s &quot;In your book.&quot;  &quot;Pass by reference&quot; and &quot;Pass by value&quot; are industry standard terms which have very specific definitions. By those definitions Java is &quot;Pass by value&quot; without exceptions.><Unheilig
51522896><2019-12-25 08:00:47><&quot;Passing an object&quot; is not a valid operation in Java. You pass a reference to an object. Doing so is <i>not</i> called &quot;passing by reference&quot;. It is called &quot;passing by value&quot;. The reference passed is a <i>value</i>, which is <i>copied</i> to a new place on the stack for the method to use, just like any primitive value.><RenatoOliveira
52060690><2019-05-07 03:45:48><Passing a reference is not the same as pass-by-reference. Java is ALWAYS pass-by-value.  This is true even when passing a reference because the reference is being passed by value (i.e. a copy of the reference is being passed). This is confusing in Java due to the word &quot;reference&quot; in Java to refer to a pointer.><FilipBartuzi
54373107><2019-01-26 05:43:37><Java does not allow us to &#39;emulate pass by reference&#39;. The failure of one user to accept an answer is not a huge weakness of the entire site.><SachinVerma
54373107><2019-01-26 06:02:42><Explain what you mean by  &quot;java does not allow us to emulate&#39;. As far as the weakness, it&#39;s a difference in opinion.><IsmaelLuceno
54373107><2019-02-05 06:51:33><Honestly, you can simplify this answer by saying Java is pass by value only for primitive types.   Everything that inherits from Object is effectively pass by reference, where the reference is the pointer you&#39;re passing.><PrajwalDhatwalia
54373107><2019-02-06 08:19:57><@Scuba Steve if that&#39;s what you got out of my post, I have totally failed to get my message across. Everything in java is ALWAYS pass by value and NEVER pass by reference. When passing an object, you&#39;re actually passing a reference to that object, but THE REFERENCE IS BEING PASSED BY VALUE (i.e. a copy of the reference is passed.) And again, this not my personal opinion, but true by definition.><woojoo666
54373107><2019-02-06 08:36:22><That&#39;s true for any reference in any language... unless you explicitly passed a reference by reference, which generally speaking, wouldn&#39;t make much sense to do.><MalusJan
54373107><2019-02-06 08:40:23><Not the case. This is true in C, Java, JavaScript, but not true in Pascal (which has &quot;Variable Parameters&quot; the same as reference parameters) and C++ (please see the example I posted)><knickum
55831416><2019-10-09 12:56:45><Wrong. Try to use a language that actually passes arguments by reference, like Fortran, and you will see the difference.><Veve
58905127><2019-11-19 06:59:03><C is 100% pass by value. So I&#39;m not sure how you can both say that Java passes objects by reference and that it&#39;s no different from C. (Perhaps you&#39;re confused because java passes references to objects. But it passes these references by value.)><MalusJan
58905127><2019-11-19 09:55:17><Please consider deleting this post as it makes no meaningful contribution to the discussion.><dddJewelsbbb
58905127><2020-02-08 00:27:59><This is plain wrong. Java is <b>pass-by-value</b>.><GManNickG
60141523><2020-02-21 06:24:38><Object references (i.e. pointers) are passed by value and primitives are also passed by value. Meaning everything is always passed by value. I think the operative term here is Pass-by-value.><jdero
7074><2014-12-02 11:05:22><@O.R.Mapper, but the fact remains that <code>string</code> is a <i>lexical</i> construct of the C# <i>grammar</i> whereas <code>System.String</code> is just a type.  Regardless of any <i>explicit</i> difference mentioned in any spec, there is still this implicit difference that could be accomodated with some ambiguity.  The language itself <i>must</i> support <code>string</code> in a way that the implementation is not (quite) so obligated to consider for a particular class in the BCL.><demonkoryu
7074><2014-12-02 16:22:33><@KirkWoll: According to the language specification, the language itself <i>must</i> consider <code>string</code> to be exactly the same as the BCL type <code>System.String</code>, nothing else. That is not ambiguous at all. Of course, you can implement your own compiler, using the C# grammar, and use all of the tokens found like that for something arbitrary, unrelated to what is defined in the C# language specification. However, the resulting language would only be a C# lookalike, it could not be considered C#.><AndonM.Coleman
7074><2015-11-30 16:52:40><You can use <code>string</code> without a using directive for System. You can&#39;t do that with <code>String</code>.><mp31415
7074><2016-05-11 01:39:05><read about Boxing/Unboxing too btw. - <a href="https://msdn.microsoft.com/en-us/library/yz2be5wk.aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/yz2be5wk.aspx</a> - &quot;The concept of boxing and unboxing underlies the C# unified view of the type system in which a value of any type can be treated as an object&quot;><AndonM.Coleman
7077><2012-04-20 19:52:21><@JonSkeet - Like you, I prefer the aliased types. The <a href="http://msdn.microsoft.com/en-us/library/ms229045.aspx" rel="nofollow noreferrer">Design Guidelines for Developing Class Libraries - General Naming Conventions</a> recommends developers stick to the language specific naming, rather than the CLR type. They do so in the <code>Convert</code> methods, to save them re-defining it for every language.><woojoo666
7077><2012-04-20 20:24:48><@Dominic: That&#39;s in member names though, not implementation. I&#39;m fine with (say) public int ReadInt32().><screwnut
7077><2012-05-23 06:36:15><If you decide to use StyleCop and follow that, that will say to use the types specific to the language. So for C# you&#39;ll have string (instead of String), int (instead of Int32), float (instead of Single) - <a href="http://stylecop.soyuz5.com/SA1121.html" rel="nofollow noreferrer">stylecop.soyuz5.com/SA1121.html</a>><TomasAndrle
7077><2012-10-13 07:25:39><I always use the aliases because I&#39;ve assumed one day it might come in handy because they are acting as an abstraction, so therefore can have their implementations changed without me having to know.><SlippD.Thompson
7077><2014-05-13 07:04:24><Isn&#39;t the second example &quot;`string greet = String.Format(&quot;Hello {0}!&quot;, place);&quot; meant to have a capital S? String?><ChristopheRoussy
7077><2014-12-16 01:46:22><One of the major advantage of String.Format that I have actually seen in real source code is when it&#39;s used this way, String.Format(&quot;The value of a is {0}&quot;, a); a being any variable declared and initialized. This way of formatting the strings have various advantages. One very simple example would be when say variable a is a value of a currency we can have &#163; or $ or whichever currency symbol formatted into the string.><ChristopheRoussy
7077><2014-12-22 13:21:27><Visual Studio 2015 says that String.Format should be changed to string.Format, so I guess Microsoft is going that way. I have also always used String for the static methods.><TheGuyWithTheFace
7079><2015-03-17 00:32:52><Just pick one and be consistent. If you work somewhere with a house style, use that.><demonkoryu
7079><2016-02-24 14:51:16><unfortunately style is personal preference and may be too expensive to enforce in a large code base across several teams without dedicated code owner. there are always more important matters to take care of rather than string vs String. which brings us back to &quot;more important things in life&quot;><chaws
7081><2015-05-30 04:23:54><That&#39;s the problem, they are not &#39;C#&#39; aliases, they are &#39;C&#39; aliases.  There is no native &#39;string&#39; or &#39;int&#39; in the C# language, just syntactic sugar.><MalusJan
7081><2016-02-24 14:57:31><not sure where &quot;C&quot; came from here, since C# 5 language specification reads &quot;The keyword string is simply an alias for the predefined class System.String.&quot; on page 85, paragraph 4.2.4. All high level languages are syntactic sugar over CPU instruction sets and bytecode.><IsmaelLuceno
12863><2015-06-15 23:37:29><The second point sounds actually like a reason <i>not</i> to use <code>string</code>, <code>int</code> etc.><rahs
12863><2015-09-16 01:48:00><@MauganRa And it&#39;s supposed to, the author of the book lists those reasons as to why he <i>doesn&#39;t use</i> aliases.><MalusJan
12863><2015-09-22 06:11:04><&quot;If someone is reading C# source code they should interpret long according to the language spec, not another languages spec.&quot;  That misses the point entirely.  It&#39;s not that anyone <i>intends</i> to misinterpret code, it&#39;s simply easy for one&#39;s brain to jump to the wrong conclusion when a type has a different meaning than what the programmer sees on a daily basis in another context.  We all make mistakes; using explicitly named types makes those mistakes less likely.><screwnut
12863><2016-08-31 12:15:22><@Darryl - I remember programming with .NET 1.x on Windows XP 32x.  One of the kernel APIs required a <code>long</code>, and I kept getting overflow errors by using a .NET long for the struct I was passing in; it had to be a .NET int /Int32 to translate to the kernel&#39;s definition of a <code>long</code>.  So there&#39;s still room for confusion!  <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa383751(v=vs.85).aspx" rel="nofollow noreferrer">msdn.microsoft.com/en-us/library/windows/desktop/&hellip;</a>><Ren233
12863><2017-03-02 18:41:21><+These reasons sum up my feelings on the matter. When I first started coding in C# (coming from a Java/C++/C background) I thought the aliases were ugly. I still feel that way, unfortunately most of the world doesn&#39;t seem to agree with me, or they don&#39;t care, and so use the lowercase.><woojoo666
12863><2017-11-14 03:17:48><The &quot;bittedness&quot; of an integer is reliant upon the compiler, not the language. The reason you get overflows using &quot;long&quot; is not because of the kernel, it is because of the compiler. Microsoft 16 bit compilers used a 16 bit integer size, 32 bit compilers used a 32 bit integer size. &quot;string&quot;: is actually an &quot;alias&quot; for char*, but that is all out the window with .NET -- which is why IntPtr has no primitive equivalent -- no pointers.><AdamFreeman
12863><2018-02-08 22:30:36><@jinzai the question is about C#, in which <code>long</code> is defined as a signed 64-bit integer, regardless of the platform or the compiler.  So in some cases at least, yes, it <i>does</i> depend on the language.><AdamFreeman
12863><2019-07-30 17:37:57><what about <code>var value = br.ReadSingle();</code>?><NicholasHamilton
30797><2010-04-07 00:10:21><by default most people do add this in any ways at the top of the file. VS does this by default in most cases of not all!><knickum
30797><2016-05-19 00:58:27><By default I add only <code>using</code> statements I require, and explicitly remove all that I don&#39;t.  Power Productivity Tools &gt; &quot;[x] Remove and Format Usings on save&quot;><DanielFischer
30797><2016-12-02 07:48:35><@JMD I&#39;ve modified the .cs template file so it doesn&#39;t even have any using statements at the top! I also changed the class template to <code>internal sealed</code>.><knickum
30797><2019-02-19 22:45:10><@JMD I hate that feature. It sometimes makes changes on otherwise untouched files making it difficult to see what actual changes a changeset contains. Of course I usually remove &quot;using spam&quot;, but only actively, not automatically.><MalusJan
30797><2019-03-20 07:29:30><That may be so for C#, but not all .NET languages. (Powershell imports the System namespace by default.)><screwnut
30797><2019-05-06 16:24:54><Would you mind explaining the reason behind this odd behavior?><RenatoOliveira
42306><2013-01-28 18:49:37><Do you also write code like: Int32 i = 1;  Rather than int i = 1; ?  Seems inconsistent to not use the string alias when it&#39;s availble.><PeterCordes
42306><2013-02-16 01:30:42><@nashwan: actually, yes, I do use <code>Int32 i=1;</code> intstead of <code>int i = 1;</code>  I find the former to be more readable as to my intent: namely that I want a 32 bit signed integer.><RenatoOliveira
42306><2014-04-15 21:09:24><Well I guess it all depends whether the developer thinks they are writing C# code (string) or .NET code (String).  Personally I foremost think I&#39;m writing C# (and it&#39;s C# that is using .NET).><Ren233
42306><2015-04-27 04:27:10><@NotMe Is it common that you specifically need a 32 bit signed integer, and not just an abstracted integer?><SachinVerma
42306><2015-04-27 10:56:54><@Alex: my point was simply that I prefer to be very specific in my coding in order to remove ambiguity.><NathanOliver
42306><2016-03-18 23:38:29><On the absolute other end of the spectrum, I nearly always just use <code>var</code>><AdamFreeman
42306><2016-10-09 02:52:03><@NotMe There is no ambiguity.  C# defines <code>int</code> as now and forever always being a 32-bit signed integer.  It does the same for the other aliases <code>short</code> is always 16-bit signed, etc.><NicholasHamilton
117035><2011-07-02 04:35:22><Converting between C# and VB.NET is easy enough as it is. <a href="http://www.developerfusion.com/tools/convert/vb-to-csharp/" rel="nofollow noreferrer">developerfusion.com/tools/convert/vb-to-csharp</a>><KyleMit
215263><2008-10-19 01:02:29><Jeffrey Richter recommends using the CLR type in all cases (CLR via C#) to avoid exactly the kind of confusion that is taking place here.><jdero
215263><2008-10-19 01:17:18><Clearly, whether you use S or s it will have caused this questions, so down-vote Richter. ;)><Unheilig
215263><2008-10-19 03:23:07><Richter meant that string shouldn&#39;t have been an option - Microsoft shouldn&#39;t have it in the language. You can&#39;t down-vote Richter - he&#39;s a legend! :)><IsmaelLuceno
215263><2008-10-19 03:51:30><Fair point Jon, but I just happen to agree with Richter on this point about String. And yes, I totally agree - CLR via C# is wonderful!><matec
215263><2008-10-19 14:34:50><I agree that it <i>might</i> have been better to not have the aliases at all. But given that we have them, I think it&#39;s fine to use them (but not in method names etc.)><SazzadHissainKhan
215263><2011-12-04 00:41:29><&quot;string&quot; is not the same as &quot;String&quot;. Is means &quot;System.String&quot;. So if you use &quot;String&quot; you have to put &quot;using System&quot; to include the namespace><demonkoryu
215266><2008-10-19 03:24:16><You don&#39;t need to prefix System to use String.><AdamFreeman
215266><2009-10-17 01:53:00><You do have to include a <code>using System</code> when using <code>String</code>, otherwise you get the following error: <code>The type or namespace name &#39;String&#39; could not be found (are you missing a using directive or an assembly reference?)</code>><Sandeep
215304><2015-11-16 16:31:12><` If you code in C#, I&#39;d prefer string as it&#39;s a C# type alias and well-known by C# programmers` - when would a C# person not know the .NET framework. +1 as I think generally this is the best answer, but the point I mention seems odd.><LewisKelsey
215304><2016-04-28 19:41:38><I personally prefer using &quot;Int32&quot;, since it immediately shows the range of the value. Imagine if they upgraded the type of &quot;int&quot; on later higher-bit systems. &#39;int&#39; in c is apparently seen as <i>&quot;the integer type that the target processor is most efficient working with&quot;</i>, and defined as &quot;at least 16 bit&quot;. I&#39;d prefer predictable consistency there, thank you very much.><Atul
215304><2017-01-22 01:39:59><@MyDaftQuestions I concur. If anything it would make sense to <i>consistently use the .net types</i> because they are language ignorant and the type is obvious, independent of any language (do I know all of F#&#39;s or VB&#39;s idiosyncrasies?).><SlippD.Thompson
215304><2018-12-08 10:47:06><@Nyerguds There are two reasons to simply not worry about it. One is that <code>int</code> is defined in the C# language spec as a 32 bit integer regardless of the hardware. C#, despite a shared heritage in the mists of time, is not actually C. Changing <code>int</code> to a 64 bit integer would be a breaking change in the specification and the language. It would also require redefining <code>long</code>, as <code>long</code> is currently the 64 bit integer. The other reason not to worry is irrelevant since the types will never change, but .NET is just abstract enough that 99% of the time you don&#39;t have to think about it anyway. ;-)><naveejr
215304><2018-12-09 10:29:47><@Craig I dig into lots of old proprietary game formats where I <i>do</i> have to think about that all the time, though. And then using <code>Int16</code>, <code>Int32</code> and <code>Int64</code> is a <i>lot</i> more transparent in the code than using the rather nondescriptive <code>short</code>, <code>int</code> and <code>long</code>><SazzadHissainKhan
215422><2008-10-19 10:00:57><The inheritance situation with enum is interesting.  Can you point to documentation onto why alias must be used for enumerations?  Or is this a known bug?><IndianKing
215422><2008-10-19 14:34:02><It&#39;s in section 14.1 of the spec (I can&#39;t quote here easily as it&#39;s too long). It doesn&#39;t explicitly say that you&#39;ve got to use the alias, but the aliases are <i>sort of</i> treated as their own types. It&#39;s all a bit weird.><Alice
215422><2010-05-12 01:08:40><&quot;the aliases are all to value types&quot; is said twice about different sets of aliases. Can&#39;t be true both times %)><PeterCordes
215422><2011-09-10 05:27:44><@PiPeep what&#39;s more astounding than the large amount of upvotes is the staggering low amount of downvotes (consider the top 5 posts have a total of over 2000 upvotes, and yet only 1 downvote amongst them all). Especially when you factor in the notion that there&#39;s always &quot;haters&quot; in any community, I really find that simply incredible.><LutzPrechelt
215422><2011-12-27 03:41:17><+1 for mentioning the enum situation. That&#39;s the real answer I would consider it to be. The enum in c# are not considered to be the integer(int) values like in c++. So you should either typecast it or convert it at declaration like @JonSkeet has mentioned it. Should you do this, then it has to be considered a &#39;type&#39; . The keywords are alone considered which is in our case, a set of aliases of the original classes.><LewisKelsey
215422><2011-12-30 03:53:52><Your comment: &quot;It doesn&#39;t explicitly say that you&#39;ve got to use the alias, but the aliases are sort of treated as their own types. It&#39;s all a bit weird.&quot;><SlippD.Thompson
215422><2011-12-30 03:56:53><@phoog: Ah, sorry, I didn&#39;t realise you were referring to a comment. Yes, it&#39;s well-specified, I agree.><Ren233
215813><2019-05-24 20:04:17><I do not understand what this answer means and why it was upvoted. You can use <code>typeof(string)</code> in reflection. Example one: <code>if (someMethodInfo.ReturnType == typeof(string)) { ... }</code> Example two: <code>var p = typeof(string).GetProperty(&quot;FirstChar&quot;, BindingFlags.NonPublic | BindingFlags.Instance);</code> Where is it that you must use <code>String</code>, not <code>string</code>? If you try things like <code>Type.GetType(&quot;String&quot;)</code> or <code>Type.GetType(&quot;string&quot;)</code>, neither will find the class because the namespace is missing. If for some <i>silly</i> reason you compare <code>.Name</code> of a type to <code>&quot;string&quot;</code> in a case-sensitive way, you are right.><MalusJan
215831><2011-05-06 02:41:26><I wasn&#39;t aware that StyleCop would flag String use - except for static methods. I think that is great as that is how I always use it: string for type declarations and String when I access the static members.><AdamFreeman
580546><2013-08-19 18:30:07><Keep in mind that calling a local <code>@string</code> is really rather pointless, since the names of locals are only present in PDBs. Might as well call it <code>_string</code> or something. It makes more sense for things that have names accessible via reflection, where the name of an <code>@string</code> member would be <code>&quot;string&quot;</code>.><naveejr
655907><2011-08-01 01:58:52><<code>string</code> is not a <i>type</i> in C#; it is a reserved word that maps to a type in the CLR.><doug65536
655907><2011-08-01 03:03:30><@CesarGon: According to ECMA-334, section 8.2.1: &quot;C# provides a set of predefined types [...] The predefined reference types are object and string.&quot;><mohitmun
655907><2011-08-01 03:30:23><According to ECMA-334, section 9.4.3, &quot;string&quot; is a keyword. :-) I agree with you that &quot;string&quot; is a type if you focus on the semantics, but I&#39;d say it&#39;s a keyword (i.e. a reserved word) if you focus on the syntax. The standard backs both points of view (perhaps too ambiguously!). To me, the OP is about syntax, so I tend to focus on syntax when I look at answers, but I see your point too. Furthermore, your answer, as it stands, may be interpreted as to mean that two different types exist: string and String, when that is not the case. One is a maping to the other.><Ren233
655907><2013-07-09 00:50:49><Let&#39;s be clear about this.  &#39;string&#39; is a reserved alias.  It is not a true datatype.  It is something that points to something else.  You can remove all these aliases (or just never use them) and have a perfectly good programming language.><KyleMit
8865991><2012-07-25 23:26:08><In a 64 bit build, int maps to System.Int64 (8 bytes) , in 32 bit build it maps to System.Int32 (4 bytes)><rahs
12706960><2013-04-24 05:14:37><-1 All type names are pascal case by convention.  But C# keywords are all lowercase.><rahs
12706960><2013-04-24 21:24:26><@PDaddy yes, and <code>string</code> is indeed a C# keyword. The question being asked here is whether to prefer the keyword or the type name. My answer says that, although you can obviously pick the keyword, one argument in favour of using the type name is that they keyword <code>string</code>, which is an alias for the <code>String</code>, is ultimately a reference type.The keyword <code>int</code>, in contrast, is an alias for <code>Int32</code> which is a value type.><onmyway133
12706960><2013-04-24 23:34:06><The casing conventions don&#39;t differ between reference types and value types, as evidenced by the <code>Int32</code> type you yourself mentioned.  It doesn&#39;t make sense to eschew the keyword in favor of the class name to abide by some imagined restriction that reference types follow different naming conventions than value types.><AndonM.Coleman
12706960><2013-04-25 02:40:21><@PDaddy yes you are correct. I was carrying over Java conventions here, where primitives are camelCase.><IndianKing
12725425><2016-10-09 02:53:24><Care to name these other languages, because I know of none in .net where string != System.String.  Also, literal has nothing to do with string vs String...><rahs
12725425><2019-02-21 09:17:14><Are there really 26 voters who believe this is correct?><Veve
12725425><2019-02-21 09:36:53><@Andy I was working with Java back when I answered this where it does make a difference, not sure if the question specified .net when I answered it as it&#39;s been edited since then><IsmaelLuceno
21144988><2014-11-06 20:04:10><&quot;In short &quot;String&quot; is an alias ( the same thing called with different names) of &quot;string&quot;&quot;. This is not correct: the alias is &quot;string&quot;.><Veve
21144988><2016-11-04 22:11:45><<i>when you do variable declaration it&#39;s good to use &quot;string&quot; ( small &quot;s&quot;) and when you are using it as a class name then &quot;String&quot; ( capital &quot;S&quot;) is preferred.</i> This convention seems to be no more valid: if you use Visual Studio 2015 and try to write <code>String</code> it suggest you to &quot;simplify your code&quot;, carrying it to <code>string</code>...><dddJewelsbbb
23762744><2014-09-24 22:56:13><Where are you getting this stuff? This is all complete nonsense: <code>String</code> and <code>string</code> are exactly the same thing.><PhilMiller
23762744><2019-11-07 08:49:09><@JaySullivan I&#39;d beg to differ.><Mysticial
24155226><2018-03-04 17:29:34><The only tiny difference is that if you use the String class, you need to import the System namespace on top of your file, whereas you don’t have to do this when using the string keyword.><matec
24155226><2019-06-04 21:36:55><There are simple use-cases where the equality statement would fail... Such as defining a type call String in the blah namespace and importing that namespace into the file in which the equality statement is running.><mp31415
27965515><2015-05-08 08:40:28><I suppose to be diabolical one could: <code>using String = System.Int32; using Int32 = System.String;</code>  and then count the bugs.><TheGuyWithTheFace
27965515><2018-10-10 04:26:00><this is the right answer. <code>string</code> is <code>System.String</code>. <code>String</code> could be anything.><onmyway133
27965515><2019-04-12 00:37:15><Agreed @DaveCousineau - that&#39;s the point of the alias. You can create another <code>String</code> type that wouldn&#39;t be set to the System.String object. Check out: <a href="http://blog.paranoidcoding.com/2019/04/08/string-vs-String-is-not-about-style.html" rel="nofollow noreferrer">blog.paranoidcoding.com/2019/04/08/&hellip;</a>><FilipBartuzi
27965515><2019-04-12 00:40:28><&quot;The keyword <code>string</code> has concrete meaning in C#. It is the type <code>System.String</code> which exists in the core runtime assembly. The runtime intrinsically understands this type and provides the capabilities developers expect for <code>strings</code> in .NET. Its presence is so critical to C# that if that type doesn’t exist the compiler will exit before attempting to even parse a line of code. Hence <code>string</code> has a precise, unambiguous meaning in C# code. The identifier <code>String</code> though has no concrete meaning in C#. It is an identifier that goes through all the name lookup rules as <code>Widget</code>, <code>Student</code>, etc…&quot;><CodeGeek
29489427><2016-11-04 22:04:39><This convention is no more valid: if you use Visual Studio 2015 and try to use <code>String</code> the program suggests you to &quot;simplify your code&quot;, carrying it to <code>string</code>.><onmyway133
32893650><2015-10-26 17:03:43><I&#39;ve given you a +1, but your actual methods, when optimise+ is on, are identically <code>return &quot;Hello World!&quot;;</code>. To actually ensure the types are &quot;considered&quot; you can use <code>return (string)(object)typeof(string).Name;</code> and <code>return (System.String)(System.Object)typeof(System.String).Name;</code>, which happens to confirm <code>System.Object</code> is identical to <code>object</code> too :-)><knickum
48322758><2019-09-20 18:32:24><In the end someone able to state an actual difference... you may also add the need for a <code>using System;</code> directive prior to use <code>String</code> type instead of the C# keyword <code>string</code>. This should be the selected answer, or at least a highly voted one.><chaws
48680864><2018-02-15 00:13:14><so internally they are the same. meaning, they point to the same thing, and can be used interchangeably.  their difference lies in that String is the name of the actual struct as defined, whereas string is an alias which points to that same struct. it (string) being an alias makes it a keyword, which is why VS shows them as difference colors. if you right click to view definition for string, you will be staring at the struct String.><CodeGeek
55734544><2019-04-18 03:54:34><The <code>String</code> in <code>MyClass&lt;String&gt;</code> is not the <code>String</code> in the question (<code>System.String</code> class), though.  It&#39;s a type parameter named <code>String</code> that will &quot;hide&quot; any unqualified usages of <code>String</code> the class (e.g. adding <code>public String GetText() { return &quot;Hello, World!&quot;; }</code> to that same generic class fails to compile).  Evil code, that is.><mp31415
56753700><2019-07-04 21:28:41><As far as I know, <code>string</code> vs. <code>String</code> is a matter of coding style.><matec
56753700><2019-07-04 21:29:08><And <code>string</code> tends to win.><demonkoryu
57526143><2019-09-20 18:11:03><&quot;<i>B. They are Different in Famework and in Non-C# Contexts</i>&quot;: While this may be true, the answer doesn&#39;t tell what are the differences, it only lists the contexts where they can appear. Technically it doesn&#39;t answer the question, and unfortunately doesn&#39;t help more than the selected answer.><doug65536
57526143><2019-10-05 21:34:41><&quot;<i>They are the SAME (exactly the same)</i>&quot;: no, try this: <code>string s = nameof (string)</code> to be convinced.><mohitmun
208105><2017-03-06 19:31:56><Find here a benchmark which compares &quot;delete&quot; vs &quot;undefined&quot; vs &quot;null&quot; <a href="http://jsben.ch/#/BWMiw" rel="nofollow noreferrer">jsben.ch/#/BWMiw</a>><LutzPrechelt
208105><2017-11-15 23:35:26><<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete" rel="nofollow noreferrer">developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/&hellip;</a>><demonkoryu
208106><2008-10-16 19:04:14><Is it possible to use associative array syntax with delete? Say i have the name of the property as a string i.e. &#39;regex&#39;.><Atul
208106><2008-10-16 19:06:42><Checked, it also works with &quot;delete myJSONObject[&#39;regex&#39;];&quot; See: <a href="http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/delete_Operator" rel="nofollow noreferrer">developer.mozilla.org/en/Core_JavaScript_1.5_Reference/&hellip;</a>><PeterCordes
208106><2008-10-16 20:41:45><Irritatingly MS fail to mention that in their own JScript documentation on MSDN.><SazzadHissainKhan
208106><2010-04-17 00:24:33><An upshot of one of the observations at the &quot;understanding delete&quot; link above, is that, since you cannot necessarily delete a variable, but only object properties, you therefore cannot delete an object property &quot;by reference&quot; -- var value=obj[&#39;prop&#39;]; delete value //doesn&#39;t work><chaws
208106><2011-08-10 10:21:35><So it doesn&#39;t actually delete it? It just becomes undefined, but the key still exists? Am I missing something?><AndonM.Coleman
208106><2011-08-10 16:29:19><@Pete no, it does remove it. Given: <code>var x = {a : &#39;A&#39;, b : &#39;B&#39;};</code> Compare: <code>delete x.a; typeof x.a; &#47;* &quot;undefined&quot; *&#47; x.hasOwnProperty(&#39;a&#39;); &#47;* false *&#47;</code> to <code>x.b = undefined; typeof x.b; &#47;* &quot;undefined&quot; *&#47;; x.hasOwnProperty(&#39;b&#39;); &#47;* true *&#47;</code>><mp31415
208106><2012-07-28 17:22:43><I&#39;m finding that I get an error when using Object.defineProperty( window, &quot;b&quot;, ... ) on a var that was already declared on <i>window</i>, for example: &quot;var b = 500;&quot; even if I delete it, the error reads: &quot;Uncaught TypeError: Cannot redefine property: b&quot;. (Latest version of Chrome.)><naveejr
208106><2012-10-27 06:03:04><It&#39;s worth noting that you can use the 3rd example given here to delete items inside of a for-in loop. <code>for(var k in obj) { delete obj[k]; }</code> will unset every property of the object (not that you&#39;d ever have a use for this, specifically -- but you could add a condition, like <code>if (obj[k] === 2)</code>).><Mysticial
208106><2012-12-20 09:57:12><@ChristopherPfohl works for me. Like I said, it&#39;s actually quite in-depth, so it&#39;s a bit difficult to summarize. The basic response in the answer above is sufficient for almost all cases, the blog goes into some more of the edge cases and the reasons those cases exist.><FilipBartuzi
12469043><2012-11-08 01:39:59><This approach doesn&#39;t modify the original object which might be still referenced elsewhere. This might or might not be a problem depending on how it&#39;s used but it&#39;s something to keep in mind.><chaws
12469043><2013-01-26 04:20:43><@B1KMusic Here&#39;s the way to delete an element from an Array: <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice" rel="nofollow noreferrer">splice</a>><DanielFischer
12469043><2013-01-27 04:37:09><@wulftone nope, that splits the array and does nothing to delete a value. I really think the best way to delete from an array where specific values are needed to be deleted is to use <code>delete</code> and make a Garbage Collection function to clean it up.><ChristopheRoussy
12469043><2013-01-29 03:43:54><@B1KMusic Oh I misunderstood.  I thought by &quot;delete&quot; you meant &quot;remove from the array.&quot;  You actually mean to remove it from both the array and from memory at the same time, right?><dddJewelsbbb
12469043><2013-01-29 06:13:38><@wulftone umm, that&#39;s kinda what I assumed delete means in general. Yes, for some  of my apps, I&#39;ve come across weird glitches that were caused by using just <code>delete array[index]</code>, and I had to write my own garbage collection method to keep the array clean so it wouldn&#39;t clutter the localStorage/skip a number.><Sandeep
12469043><2013-01-29 06:48:24><@wulftone I actually did find a use for <code>Array.prototype.splice()</code>. I gave my answer a much needed update><SimonHrabec
12469043><2013-08-27 12:01:41><I don’t see <code>splice</code> in your edit, but <code>remove</code> ought to be <code>Array.prototype.remove = function(index) { this.splice(index, 1); };</code>><DanielFischer
21720354><2016-01-11 00:58:19><You&#39;re wrong - only objects are passed by reference in JavaScript, so if <code>myJSONObject.regex</code>&#39;s value is a string and you assign it to some other object, the other object has a copy of this value.><ChristopheRoussy
21720354><2016-01-11 01:34:48><You are right and this is a quote: &quot;to be careful about your other references to the same object.&quot;><Atul
21735614><2014-03-05 05:05:54><a property is assigned to undefined still is a property of an object, so it will not be removed by GC, unless misread your last paragraph.><LutzPrechelt
23848569><2014-12-09 09:32:19><Keep in mind that if your object&#39;s keys are numbers, you may need to <code>_.omit(collection, key.toString())</code>><mohitmun
23848569><2018-04-15 07:00:57><Hmmmmm.... Underscore is ~100x slower than <code>delete obj[prop]</code> which is ~100x slower than <code>obj[prop] = undefined</code>.><Alice
25839420><2015-06-01 23:14:02><delete foo.bar works even if bar doesn&#39;t exist, so your test is a bit too much, IMHO.><Mysticial
25839420><2015-06-03 04:07:29><@PhiLho that depends on where you are running JavaScript. In Node.js I believe this causes your server to crash.><rahs
25839420><2015-06-03 05:28:10><<code>delete foo.bar;</code> only throws an exception if foo is falsy, or if you&#39;re in strict mode and foo is an object with an unconfigurable bar property.><SimonHrabec
25839420><2015-06-03 06:20:12><I don&#39;t remember the exact issue I&#39;ve had with this but I think the problem may appear when foo itself doesn&#39;t exist and you try to delete it&#39;s property.><PeterWone
25839420><2015-06-03 17:16:35><Yes, you have to test if foo exists, otherwise foo.bar will throw an exception, but you don&#39;t need to check the existence for bar before deleting it. That&#39;s the &quot;too much&quot; part of my comment. :-)><doug65536
25839420><2015-06-15 18:06:52><Could be that I was checking for the property itself to determine the state of the machine or something. E.g. not necessary for OP&#39;s question.><matec
29910821><2015-05-07 01:51:33><It might be worth noting that even though using the <code>delete</code> operator is healthy in regard of <a href="http://stackoverflow.com/questions/864516/what-is-javascript-garbage-collection">garbage collection</a>, it can be <a href="http://stackoverflow.com/a/21735614/2788872">unexpectedly slow</a>, in no small part for the same reason.><MalusJan
34707963><2016-01-11 00:47:18><@Gothdo it has more benefits, especially when you need to do some functional stuff. E.g. you can assign function to variable, pass as an argument or use <code>apply</code>, <code>call</code>, <code>bind</code> functions...><RenatoOliveira
35539892><2016-09-22 23:30:26><I would think you should always use <code>splice</code> on an array instead of <code>delete</code>.><doug65536
35539892><2016-11-23 17:19:15><@JoelTrauger : That&#39;s what I&#39;m saying ;-)><chaws
35539892><2016-11-24 05:59:56><Yes. My comment is that that <code>delete</code> shouldn&#39;t even be a thing. It&#39;s <code>splice</code> is what the OP was looking for.><PrajwalDhatwalia
35539892><2016-11-24 18:01:08><@JoelTrauger : As I tried to explain, <code>delete</code> should be used for object properties and <code>splice</code> for array elements.><matec
35539892><2018-04-15 07:05:43><Splice is really slow. While it should be used instead of <code>delete</code> on arrays, it would be wisest to not create code centered around it at all.><woojoo666
35539892><2018-04-16 00:36:36><@lolzerywowzery : What strategy would you suggest for removing elements from an array without using <code>splice</code>?><mohitmun
35539892><2018-04-30 22:41:59><@JohnSlegers It really depends on the code at hand. In general I would say try to create code organized to have arrays that push/pop items on them or arrays that contain data where the data is modified, not the array, instead of using splice.><naveejr
37987813><2017-07-17 08:07:09><This function works like a charm, but why do we need return true and return false? My version of the code:   <a href="https://codepen.io/anon/pen/rwbppY" rel="nofollow noreferrer">codepen.io/anon/pen/rwbppY</a>. Will my version fail for any case?><woojoo666
37987813><2017-07-17 13:52:42><@witty2017 it won&#39;t fail. The place where I used the function also needed to check whether the property already exists or not. if the property doesn&#39;t exist, it&#39;ll return false. If it finds the property and deletes it, it&#39;ll return true.><SachinVerma
38227080><2016-09-26 07:15:33><Also <code>JSON.parse(JSON.stringify({ ...myObject, regex: undefined }))</code>><rahs
40493600><2016-12-02 01:14:04><Maybe because the goal is to remove a property from an object, not to create a new one without the property... although, your solution is my favorite, as I prefer the immutable way.><Veve
40493600><2016-12-02 04:45:31><The question stated &quot;to end up with <b>new</b> myObject&quot;.><PrajwalDhatwalia
40493600><2016-12-21 09:59:38><According to <a href="http://kangax.github.io/compat-table/esnext/" rel="nofollow noreferrer">kangax.github.io/compat-table/esnext</a>, object rest properties aren&#39;t finalized for ES6, have zero browser implementations, and only Babel provides support.><doug65536
40493600><2017-06-30 15:24:43><Also I consider this approach less readable than some alternatives. This is basically a hack using destructuring assignment and rest operator to achieve something which is not immediately apparent to the reader. In contrast, the delete statement or the Underscore way of _.omit are both quite obvious with regards to intent.><MarianSpanik
40493600><2017-06-30 15:26:07><Plus you litter your scope with the regex variable in this example.><knickum
40493600><2017-06-30 15:30:00><Adding Underscore for removing a property will litter your project :) Instead of having it available as <code>regex</code> you could also assign it to any other variable, e.g. <code>_</code>, what is used in languages like Go to discard a result: <code>const { regex: _, ...newObject } = myObject;</code>.><LewisKelsey
46886723><2018-04-04 04:24:59><<code>SyntaxError: Unexpected token &#39;...&#39;. Expected a property name.</code>?><doug65536
46886723><2018-04-04 04:45:04><Try it with a modern browser such as Firefox, Chromium or Safari. And I expect it to work with Edge as well.><woojoo666
46886723><2018-04-04 04:48:37><As an alternative, if your customers force you to support outdated browsers, you could consider using TypeScript which transpiles your code into legacy syntax (+ gives you the benefit of static type safety).><woojoo666
47805034><2019-08-13 18:13:45><var keyname = &quot;KeyName&quot;; delete myObject[keyname];><SimonHrabec
48635496><2019-08-24 03:40:07><@CoddWrench Sorry, I didn&#39;t pay attention to seeing that answer. I answer it immediately after seeing <code>delete myObject.regex;</code>.><Ren233
51482818><2018-12-03 04:53:29><I don&#39;t think this is an ES6 feature, but one that was only included in ES9.><Alice
51482818><2018-12-05 15:07:42><So actually you are not using ES6, as you write, but ES9... ;-)><dddJewelsbbb
51482818><2019-06-21 16:18:59><This isn&#39;t removing a property from an object but creating a new object without that property.><naveejr
52301527><2018-12-03 04:52:15><I think the spread/rest syntax for object literals was only included in ES2018 (ES9), not ES6, even though several JS engines had already implemented it.><TheGuyWithTheFace
52301527><2018-12-05 05:56:09><@trincot It was first introduced in 2014 (<a href="https://github.com/tc39/proposal-object-rest-spread" rel="nofollow noreferrer">github.com/tc39/proposal-object-rest-spread</a>) and it&#39;s a ES6 (ECMAScript 2015 aka ECMAScript 6th Edition) feature. However, even if I&#39;m wrong, I don&#39;t think it&#39;s makes a difference to the answer&#39;s context.><Sandeep
52301527><2018-12-05 15:03:19><The link refers to ES6 where indeed the spread syntax was introduced for arrays, but then it continues to propose something similar for object literals. That second part was only incorporated in ES9 if I am not mistaken.><MalusJan
56030135><2019-09-25 00:02:01><Slick arrow function!><Unheilig
419174><2019-08-23 00:39:32><Why does a file <code>helloworld.py</code> with just <code>print(&quot;hello world&quot;)</code> in it can run with command <code>python helloworld.py</code> even when there is no <code>if __name__ == &quot;__main__&quot;</code>?><woojoo666
419185><2019-02-19 00:09:14><Out of curiosity: What hapens if I run <code>subprocess.run(&#39;foo_bar.py&#39;)</code> in a python script? I suppose that <code>foo_bar</code> will be started with <code>__name__ = &#39;__main__&#39;</code> just like when I tipe <code>foo_bar.py</code> in cmd manually. Is that the case? Taking @MrFooz&#39; Answer into account there should not be any problem doing this and having as many &quot;main&quot; modules at a time as I like. Even changing the <code>__name__</code> value or having several independantly creates instances (or instances that created each other by <code>subprocess</code>) interact with each other should be business as usual for Python. Do I miss something?><AgrimPathak
419185><2019-02-20 00:16:03><@hajef You&#39;re correct about how things would work with <code>subprocess.run</code>. That said, a generally better way of sharing code between scripts is to create modules and have the scripts call the shared modules instead of invoking each other as scripts. It&#39;s hard to debug <code>subprocess.run</code> calls since most debuggers don&#39;t jump across process boundaries, it can add non-trivial system overhead to create and destroy the extra processes, etc.><Drt
419185><2019-02-24 21:47:03><i have a doubt in foo2.py example in the food for thought section.what does from foo2.py import functionB do? In my view it just imports foo2.py from functionB><chaws
14502904><2013-12-27 02:07:26><I would consider this bad form as you&#39;re 1) relying on side effects and 2) abusing <code>and</code>. <code>and</code> is used for checking if two boolean statements are both true. Since you&#39;re not interested in the result of the <code>and</code>, an <code>if</code> statement more clearly communicates your intentions.><doug65536
40057173><2018-01-11 20:59:53><The C/C++ illustration is wrong: 3 times the same unit name (<i>file1</i>).><GManNickG
45824951><2020-02-13 00:55:49><it seems it has been too long time to write the luminous answer +1><GManNickG
46371154><2018-01-11 21:06:38><Good to learn about <i>import lock</i>. Could you please explain <i>sign on to a methodology that [...]</i> part a little bit more?><matec
46371154><2018-04-14 08:26:20><@Wolf: Sure. I&#39;ve added a few sentences about the multiple entry points methodology.><screwnut
51011507><2019-03-25 05:16:18><Yes, point 1 is vital to understand. From that, the need for this mechanism become clear.><mp31415
54506767><2019-02-22 20:44:37><This answer makes the assumption that the OP (or any user with a similar question) is both familiar with <i>C</i> <i>and</i> knows what an entry point is.><Drt
54506767><2019-04-10 05:35:39><This answer also assumes that no code (other than definitions without side effects) take place before the <code>if __name__ == &quot;__main__&quot;</code> block. Technically the top of the script executed is the entry point of the program.><Alice
394809><2011-05-26 08:48:06><Though Pythons older than 2.5 are slowly drifting to history, here is a list of old pre-2.5 ternary operator tricks: <a href="http://c2.com/cgi/wiki?PythonIdioms" rel="nofollow noreferrer">&quot;Python Idioms&quot;, search for the text &#39;Conditional expression&#39;</a> . <a href="http://en.wikipedia.org/wiki/Ternary_operation#Python" rel="nofollow noreferrer">Wikipedia</a> is also quite helpful Ж:-)><PrajwalDhatwalia
394814><2016-01-25 23:07:08><The order may seems strange for coders however <code>f(x) = |x| = x if x &gt; 0 else -x</code> sounds very natural to mathematicians. You may also understand it as do A in most case, except when C then you should do B instead...><DanielFischer
394814><2016-03-06 17:23:11><Be careful with order of operations when using this. For example, the line <code>z = 3 + x if x &lt; y else y</code>. If <code>x=2</code> and <code>y=1</code>, you might expect that to yield 4, but it would actually yield 1. <code>z = 3 + (x if x &gt; y else y)</code> is the correct usage.><FilipBartuzi
394814><2016-04-15 08:36:05><The point was if you want to perform additional evaluations <i>after</i> the conditional is evaluated, like adding a value to the result, you&#39;ll either need to add the additional expression to both sides (<code>z = 3 + x if x &lt; y else 3 + y</code>), or group the conditional (<code>z = 3 + (x if x &lt; y else y)</code> or <code>z = (x if x &lt; y else y) + 3</code>)><Ren233
394814><2017-05-26 23:31:44><what if there are multiple conditions ?><TheGuyWithTheFace
394814><2017-08-09 14:08:33><@MrGeek, you could group the boolean expressions. &quot;foo&quot; if (bool or bool &amp;&amp; bool or etc) else &quot;bar&quot;><Ren233
394814><2017-08-09 17:17:55><@Dimesio I meant something like if (c1) a1 elif (c2) a2 elif ... else a(n).><matec
394814><2017-08-11 08:04:32><@MrGeek, I see what you mean, so you would basically be nesting the operations: ` &quot;foo&quot; if Bool else (&quot;bar&quot; if Bool else &quot;foobar&quot;) `><IsmaelLuceno
394814><2018-06-17 20:50:52><Programmers need precise correct formulation even more than mathematician, because in mathematics there is always a resort to underlying concepts. A convincing argument  is the % operator, mimicking the way &quot;mod&quot; is used in math would have been a disaster.  So no, I don&#39;t accept your argument. It is like adhering to imperial units. Groetjes Albert><Drt
394814><2019-09-08 23:02:18><For the expression: &#39;x and y&#39; and &#39;x or y&#39; and their return values I recommend checking <a href="https://docs.python.org/3/reference/expressions.html#boolean-operations" rel="nofollow noreferrer">docs.python.org/3/reference/expressions.html#boolean-operati&zwnj;&#8203;ons</a> and also the other post: <a href="https://stackoverflow.com/questions/3181901/python-boolean-expression-and-or/3181946#3181946" title="python boolean expression and or">stackoverflow.com/questions/3181901/&hellip;</a>><Alice
394887><2009-10-21 23:33:59><The remedy is to use (test and [true_value] or [false_value])[0], which avoids this trap.><IsmaelLuceno
394887><2014-01-13 15:52:08><Ternary operator usually executes faster(sometimes by 10-25%).><TheGuyWithTheFace
394887><2014-08-05 20:30:33><@volcano Do you have source for me?><LutzPrechelt
394887><2018-03-20 04:59:54><@OrangeTux <a href="https://tio.run/##bcoxCoAwEETRPqeY0kCwsPQ2kmR1QZOwWQtPH4OClQO/GV65dMtpao2PkkURuBoTIoEG76AOZGeDPol6SoKCCR5xrxH0yvVfeiwpdJ/lgVzH3kDWFOGk37Ha1m4" rel="nofollow noreferrer">Here&#39;s the disassembled code</a>. Using the method ThomasH suggested would be even slower.><PeterCordes
470376><2011-02-04 10:25:24><Note that this one always evaluates everything, whereas the if/else construct only evaluates the winning expression.><RenatoOliveira
470376><2012-03-09 03:31:48><<code>(lambda: print(&quot;a&quot;), lambda: print(&quot;b&quot;))[test==true]()</code>><PhilMiller
470376><2012-06-01 02:20:15><It should be noted that what&#39;s within the <code>[]</code>s can be an arbitrary expression. Also, for safety you can explicitly test for truthiness by writing <code>[bool(&lt;expression&gt;)]</code>. The <code>bool()</code> function has been around since v2.2.1.><PeterCordes
470376><2015-05-29 04:57:14><Is this idiomatic in python? Seems confusing but maybe its convention><Unheilig
470376><2016-02-19 15:49:50><Ugly is in the eye of the beholder, and I don&#39;t find this ugly at all.  It concisely make elegant use of the fact that bool is a subclass of int and that Python indexes are 0-based.  Admittedly, it&#39;s probably not the most efficient (as @SilverBackNet mentioned, both options are eval&#39;d).  However, this works perfectly for deciding between 1 of 2 strings as @Claudiu said - I use it for this all the time.  For example: <code>&#39;%d item%s to process!&#39;%(num_items,(&#39;&#39;,&#39;s&#39;)[num_items &gt; 1])</code> or <code>&#39;Null hypothesis %s be rejected (p-val = %0.4f)&#39;%((&quot;can&#39;t&quot;,&#39;must&#39;)[pval&lt;alpha],pval)</code>.><woojoo666
470376><2016-03-02 02:43:37><I&#39;ve done a similar trick -- only once or twice, but done it -- by indexing into a dictionary with <code>True</code> and <code>False</code> as the keys:  <code>{True:trueValue, False:falseValue}[test]</code>  I don&#39;t know whether this is any less efficient, but it does at least avoid the whole &quot;elegant&quot; vs. &quot;ugly&quot; debate.  There&#39;s no ambiguity that you&#39;re dealing with a boolean rather than an int.><IndianKing
470376><2016-05-03 07:10:56><<a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations" rel="nofollow noreferrer">comparisons to singletons should always use is/is not instead of ==</a>><woojoo666
470376><2017-11-29 21:59:33><This trick may help avoid timing based attacks on algorithms if it always evaluates both possible results and avoids skipping code (an &#39;if&#39; skips).><AgrimPathak
470376><2019-10-10 21:48:45><@jskulski only in old python, before 2.5.  Even then though, <code>if cond: [expression_1] else: [expression_2]</code> was more common><NicholasHamilton
1855173><2018-10-12 01:34:51><While the tuple of lambdas trick works, it takes roughly 3x as long as the ternary operator.  It&#39;s only likely to be a reasonable idea if it can replace a long chain of <code>if else if</code>.><RenatoOliveira
2919360><2010-10-05 05:14:21><This one emphasizes the primary intent of the ternary operator: value selection. It also shows that more than one ternary can be chained together into a single expression.><doug65536
2919360><2014-12-02 05:30:51><@Craig , I agree, but it&#39;s also helpful to know what will happen when there are no parentheses. In real code, I too would tend to insert explicit parens.><IndianKing
10314837><2013-11-12 00:11:06><Why not <code>bool(cond)</code> instead of <code>cond is True</code>?  The former checks the truthiness of <code>cond</code>, the latter checks for pointer-equality with the <code>True</code> object.  As highlighted by @AndrewCecil, <code>&quot;blob&quot;</code> is truthy but it <code>is not True</code>.><onmyway133
10314837><2014-02-24 19:51:08><Wow, that looks really hacky! :) Technically, you can even write <code>[on_false, on_True][cond is True]</code> so the expression becomes shorter.><Atul
10314837><2019-03-28 22:08:20><There is no short circuit in this answer.  If on_true and on_false are expensive to call this is a bad answer.><PhilMiller
20093702><2013-12-27 13:50:06><Why not simply <code>result = (y, x)[a &lt; b]</code> Why do you uses <code>lambda</code> function <b>?</b>><onmyway133
20093702><2014-02-13 16:14:33><@GrijeshChauhan Because on &quot;compliated&quot; expressions, e. g. involving a function call etc., this would be executed in both cases. This might not be wanted.><chaws
30052371><2019-02-10 02:07:40><<code>result = {1: x, 0: y}[a &gt; b]</code> is another possible variant (<code>True</code> and <code>False</code> are actually integers with values <code>1</code> and <code>0</code>)><Veve
33765206><2016-02-18 21:05:59><<code>expression1 or expression2</code> being similar and with the same drawbacks/positives as <code>expression1 || expression2</code> in javascript><AndonM.Coleman
33765206><2016-05-27 12:37:39><Thanks, @selurvedu - it can be confusing until you get it straight. I learned the hard way, so your way might not be as hard. ;) Using if without the else, at the end of a generator expression or list comprehension will filter the iterable. In the front, it&#39;s a ternary conditional operation, and requires the else. Cheers!!><AdamFreeman
37155553><2017-08-20 14:07:17><I prefer <code>print( &#39;yes&#39; if conditionX else &#39;nah&#39; )</code> over your answer. :-)><MalusJan
37155553><2017-10-26 19:40:17><That is if you want to <code>print()</code> in both cases - and it looks a bit more pythonic, I have to admit :) But what if the expressions/functions are not the same - like <code>print(&#39;yes&#39;) if conditionX else True</code> - to get the <code>print()</code> only in truthy <code>conditionX </code>><TheGuyWithTheFace
37155553><2018-10-22 05:51:29><To add to Frederick99&#39;s remark, another reason to avoid <code>print(&#39;yes&#39;) if conditionX else print(&#39;nah&#39;)</code> is that it gives a SyntaxError in Python2.><jdero
37155553><2018-10-22 12:09:00><The only reason it gives a syntax error is because in Python 2 print is a statement - <code>print &quot;yes&quot;</code>, while in Python 3 it is a function - <code>print(&quot;yes&quot;)</code>. That can be resolved by either using it as a statement, or better - <code>from future import print_function</code>.><woojoo666
39067220><2017-02-16 07:08:50><This <a href="https://archive.is/yqwSh" rel="nofollow noreferrer">blogger found python&#39;s ternary operator to be unnecessarily different than most other languages</a>.><PeterCordes
39067220><2018-01-11 01:12:28><It may sound opinionated; but what it essentially says is that it the Python syntax is likely to be understood by a person who never saw a ternary operator, while very few people will understand the more usual syntax unless they have been told first what it means.><RenatoOliveira
39067220><2018-06-17 20:55:29><Algol68:  a=.if. .true. .then. 1 .else. 0 .fi. This may be expressed also a=(.true.|1|0)  As usual Algol68 is an improvement over its successors.><NicholasHamilton
45779600><2017-10-20 14:37:01><If you want to use that in the context of <code>x = [condition] and ([expression_1] or 1) or [expression_2]</code> and <code>expression_1</code> evaluates to false, <code>x</code> will be <code>1</code>, not <code>expression_1</code>. Use the accepted answer.><mp31415
49653070><2018-10-12 01:28:46><Note that the ternary operator is smaller (in memory) and faster than the nested if.  Also, your nested <code>if-else</code> isn&#39;t actually a rewrite of the ternary operator, and will produce different output for select values of a and b (specifically if one is a type which implements a weird <code>__ne__</code> method).><Drt
50047083><2018-10-12 01:13:50><While useful for similar problems, this is not a ternary conditional.  It works to replace <code>x if x else y</code>, but not <code>x if z else y</code>.><KyleMit
52919467><2018-10-22 04:45:54><I have added a one line statement example to check which number is big to elaborate it further><CodeGeek
52919467><2018-10-22 05:52:56><<code>print</code> is really not a good choice, as this will give a SyntaxError in Python2.><demonkoryu
52919467><2018-10-22 05:54:21><@Thierry Lathuille here I used print() function not print statement, print function is for Python 3 while print statement is for Python 2><IndianKing
52919467><2018-10-22 05:58:23><The question has already been asked on SO, just try it with Python 2 and you will see by yourself. &#39;print(&#39;hello&#39;) is a perfectly valid syntax in Python 2.7, but the way it is parsed makes your code above throw a SyntaxError.><screwnut
58409100><2019-10-20 15:18:40><Upvote for that <code>short-circuit</code> evaluation.><FilipBartuzi
60876846><2020-04-29 00:57:59><This seems to be twice the amount of work, more RAM usage and more obfuscated than the simpler <code>val = a if cond else b</code> statement.><Mysticial
